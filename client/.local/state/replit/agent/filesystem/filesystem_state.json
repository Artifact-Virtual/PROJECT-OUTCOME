{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# OCSH NFT Game - Hybrid Web3 Gaming dApp\n\n## Overview\n\nThis is a decentralized gaming platform built around the OCSH (On-Chain Survival Handbook) NFT collection. The application implements a hybrid web3 gaming experience with both on-chain and off-chain components, featuring real-time multiplayer gameplay, territory control, alliance systems, and an innovative Foundry Courier integration for offline transaction handling.\n\nThe project consists of two integrated applications: Part 1 (Main Dashboard) for strategic gameplay and Part 2 (Handheld PWA Terminal) for offline blockchain transaction handling. The project follows a full-stack architecture with React/TypeScript frontend, Express.js backend, PostgreSQL database with Drizzle ORM, and WebSocket support for real-time features.\n\n**Latest Major Update (August 2025)**: Revolutionary online-based alliance power system ensuring fair and dynamic battles. Alliance power is calculated ONLY from currently online members, creating strategic gameplay where coordination, timing, and active participation determine victory. No more static power calculations - battles require real-time alliance coordination and strategic timing for success.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript and Vite for fast development\n- **UI Library**: Shadcn/ui components built on Radix UI primitives\n- **Styling**: Tailwind CSS with custom cyberpunk theme and CSS variables\n- **State Management**: TanStack Query for server state, React hooks for local state\n- **Routing**: Wouter for lightweight client-side routing\n- **Real-time**: WebSocket integration for live game updates\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Real-time**: WebSocket server for multiplayer features\n- **Session Management**: PostgreSQL-backed sessions with connect-pg-simple\n\n### Database Design\n- **ORM**: Drizzle with PostgreSQL dialect\n- **Schema**: Modular schema with separate tables for users, alliances, territories, battles, messages, and courier transactions\n- **Relationships**: Well-defined foreign key relationships between entities\n- **Migrations**: Drizzle-kit for schema management and migrations\n\n### Game Architecture  \n- **Online-Based Power System**: Alliance power calculated ONLY from currently online members for dynamic strategic gameplay\n- **Real-Time Battle Coordination**: Victory requires coordinating online members and strategic timing rather than static power\n- **Fair Competition**: No alliance can dominate through offline member accumulation - only active participation counts\n- **Dynamic Rankings**: Alliance power rankings change in real-time as members come online/offline throughout the day\n- **Strategic Timing**: Alliances must coordinate when to attack based on their online member availability\n- **Territory Mathematics**: Holdings create exponential power advantages through supply lines and logistics\n- **Alliance System**: Multi-role alliance management with ability to join/leave alliances at any time for strategic flexibility\n- **Territory Control**: 24-hour territory claiming with strategic positioning\n- **Messaging**: On-chain messaging with anti-spam mechanisms and cooldowns\n- **Activity Rewards**: Higher online participation percentages provide coordination bonuses and power multipliers\n\n### Strategic Equipment System\n- **Combat Enhancement Items**: Tactical processors, war machine cores providing permanent battle power boosts\n- **Communication Equipment**: Signal amplifiers, quantum relays reducing message costs and adding encryption\n- **Territory Control Gear**: Beacons, fortress protocols enhancing defense and claim speed\n- **Resource Generation**: Extractors, nano-fabricators increasing passive resource generation rates\n- **Intelligence Tools**: Recon drones, stealth systems extending intel gathering capabilities\n- **Alliance Management**: Command hubs providing coordination bonuses and supply line efficiency\n- **Base ETH & ARCx Pricing**: Affordable strategic items using Base network tokens instead of expensive mainnet\n- **Tier-Based Progression**: Basic to experimental items with level requirements and escalating power\n\n### Offline-First Features\n- **Courier Service**: Python-based Foundry Courier integration for offline transaction encoding/decoding\n- **Handheld Interface**: Dedicated offline terminal for transaction management\n- **Frame Encoding**: Support for encoding blockchain transactions into transmittable frames\n- **Broadcast Queue**: Transaction queuing system for when connectivity returns\n\n### Web3 Integration\n- **Wallet Connection**: MetaMask and Web3 wallet integration\n- **Multi-chain**: Designed for Base Network with Ethereum mainnet expansion\n- **Transaction Management**: Comprehensive transaction lifecycle management\n- **Smart Contract**: Proxy pattern contracts for upgradeability\n\n### Security Considerations\n- **Input Validation**: Zod schemas for all API inputs and database operations\n- **Rate Limiting**: Built-in cooldowns for messaging and actions\n- **Session Security**: Secure session management with PostgreSQL storage\n- **Error Handling**: Comprehensive error boundaries and logging\n\n## External Dependencies\n\n### Database & Infrastructure\n- **@neondatabase/serverless**: Neon PostgreSQL serverless database client\n- **drizzle-orm**: Type-safe PostgreSQL ORM with schema validation\n- **connect-pg-simple**: PostgreSQL session store for Express\n\n### Web3 & Blockchain\n- **Foundry Courier**: Python-based CLI tool for offline transaction handling\n- **Web3 Providers**: Browser-based wallet integration (MetaMask, etc.)\n- **Base Network**: Primary blockchain for deployment\n\n### UI & Frontend\n- **@radix-ui/***: Comprehensive set of unstyled, accessible UI primitives\n- **@tanstack/react-query**: Powerful data synchronization for server state\n- **tailwindcss**: Utility-first CSS framework with custom theme\n- **wouter**: Lightweight routing library for React\n\n### Development & Build Tools\n- **vite**: Fast build tool with HMR and development server\n- **typescript**: Type safety across the entire application\n- **esbuild**: Fast bundling for production server builds\n- **@replit/vite-plugin-cartographer**: Replit-specific development enhancements\n\n### Real-time & Communication\n- **ws**: WebSocket library for real-time multiplayer features\n- **date-fns**: Date manipulation and formatting utilities\n\n### Form Handling & Validation\n- **react-hook-form**: Performant forms with easy validation\n- **@hookform/resolvers**: Zod integration for form validation\n- **zod**: Runtime type validation and schema definition","size_bytes":6832},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        \"wasteland-orange\": \"var(--wasteland-orange)\",\n        \"rust-red\": \"var(--rust-red)\",\n        \"burnt-amber\": \"var(--burnt-amber)\",\n        \"ash-gray\": \"var(--ash-gray)\",\n        \"blood-maroon\": \"var(--blood-maroon)\",\n        \"toxic-yellow\": \"var(--toxic-yellow)\",\n        \"radiation-green\": \"var(--radiation-green)\",\n        \"steel-blue\": \"var(--steel-blue)\",\n        \"dark-wasteland\": \"var(--dark-wasteland)\",\n        \"deeper-void\": \"var(--deeper-void)\",\n        \"rusted-metal\": \"var(--rusted-metal)\",\n        \"corroded-steel\": \"var(--corroded-steel)\",\n        \"charred-earth\": \"var(--charred-earth)\",\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        display: [\"var(--font-display)\"],\n        title: [\"var(--font-title)\"],\n        body: [\"var(--font-body)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        \"wasteland-glitch\": {\n          \"0%\": { transform: \"translate(0)\" },\n          \"10%\": { transform: \"translate(-3px, 1px) skew(1deg)\" },\n          \"20%\": { transform: \"translate(2px, -2px) skew(-1deg)\" },\n          \"30%\": { transform: \"translate(-1px, 3px) skew(0.5deg)\" },\n          \"40%\": { transform: \"translate(3px, -1px) skew(-0.5deg)\" },\n          \"50%\": { transform: \"translate(-2px, 2px) skew(1deg)\" },\n          \"60%\": { transform: \"translate(1px, -3px) skew(-1deg)\" },\n          \"70%\": { transform: \"translate(-3px, 1px) skew(0.5deg)\" },\n          \"80%\": { transform: \"translate(2px, -2px) skew(-0.5deg)\" },\n          \"90%\": { transform: \"translate(-1px, 1px) skew(1deg)\" },\n          \"100%\": { transform: \"translate(0)\" },\n        },\n        \"radiation-pulse\": {\n          \"0%, 100%\": { \n            opacity: \"0.7\", \n            transform: \"scale(1)\",\n            filter: \"hue-rotate(0deg) brightness(1)\"\n          },\n          \"25%\": { \n            opacity: \"1\", \n            transform: \"scale(1.05)\",\n            filter: \"hue-rotate(20deg) brightness(1.2)\"\n          },\n          \"50%\": { \n            opacity: \"0.8\", \n            transform: \"scale(0.98)\",\n            filter: \"hue-rotate(40deg) brightness(0.9)\"\n          },\n          \"75%\": { \n            opacity: \"1\", \n            transform: \"scale(1.02)\",\n            filter: \"hue-rotate(-10deg) brightness(1.1)\"\n          }\n        },\n        drift: {\n          \"0%\": { transform: \"translateX(0) translateY(0)\" },\n          \"25%\": { transform: \"translateX(-10px) translateY(-5px)\" },\n          \"50%\": { transform: \"translateX(0) translateY(-10px)\" },\n          \"75%\": { transform: \"translateX(10px) translateY(-5px)\" },\n          \"100%\": { transform: \"translateX(0) translateY(0)\" }\n        },\n        \"atmospheric-drift\": {\n          \"0%\": { transform: \"translateX(0) translateY(0) rotate(0deg)\" },\n          \"25%\": { transform: \"translateX(-20px) translateY(-10px) rotate(1deg)\" },\n          \"50%\": { transform: \"translateX(10px) translateY(-20px) rotate(-0.5deg)\" },\n          \"75%\": { transform: \"translateX(20px) translateY(-10px) rotate(1deg)\" },\n          \"100%\": { transform: \"translateX(0) translateY(0) rotate(0deg)\" }\n        },\n        \"hologram-flicker\": {\n          \"0%, 100%\": { \n            opacity: \"1\", \n            filter: \"brightness(1) contrast(1)\"\n          },\n          \"10%\": { \n            opacity: \"0.9\", \n            filter: \"brightness(1.1) contrast(1.2)\"\n          },\n          \"20%\": { \n            opacity: \"1\", \n            filter: \"brightness(0.9) contrast(0.8)\"\n          },\n          \"30%\": { \n            opacity: \"0.95\", \n            filter: \"brightness(1.2) contrast(1.1)\"\n          },\n          \"50%\": { \n            opacity: \"0.85\", \n            filter: \"brightness(1.3) contrast(0.9)\"\n          },\n          \"70%\": { \n            opacity: \"1\", \n            filter: \"brightness(0.8) contrast(1.3)\"\n          },\n          \"85%\": { \n            opacity: \"0.9\", \n            filter: \"brightness(1.1) contrast(1)\"\n          }\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"wasteland-glitch\": \"wasteland-glitch 0.4s infinite\",\n        \"radiation-pulse\": \"radiation-pulse 3s ease-in-out infinite\",\n        \"drift\": \"drift 60s linear infinite\",\n        \"atmospheric-drift\": \"atmospheric-drift 90s ease-in-out infinite\",\n        \"hologram-flicker\": \"hologram-flicker 2s ease-in-out infinite alternate\",\n      },\n      boxShadow: {\n        wasteland: \"0 0 30px hsl(28 85% 55% / 0.6)\",\n        rust: \"0 0 25px hsl(15 85% 45% / 0.5)\",\n        amber: \"0 0 20px hsl(35 75% 45% / 0.4)\",\n        toxic: \"0 0 35px hsl(45 95% 55% / 0.7)\",\n        radiation: \"0 0 40px hsl(85 65% 45% / 0.6)\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":7157},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"attached_assets/content-1755208108556.md":{"content":"[Skip to content](https://github.com/Artifact-Virtual/foundry-courier/blob/master/README.md#start-of-content)\n\n[Artifact-Virtual](https://github.com/Artifact-Virtual)/ **[foundry-courier](https://github.com/Artifact-Virtual/foundry-courier)** Public\n\n- [Notifications](https://github.com/login?return_to=%2FArtifact-Virtual%2Ffoundry-courier) You must be signed in to change notification settings\n- [Fork\\\\\n0](https://github.com/login?return_to=%2FArtifact-Virtual%2Ffoundry-courier)\n- [Star\\\\\n0](https://github.com/login?return_to=%2FArtifact-Virtual%2Ffoundry-courier)\n\n\n## Collapse file tree\n\n## Files\n\nmaster\n\nSearch this repository\n\n/\n\n# README.md\n\nCopy path\n\nBlameMore file actions\n\nBlameMore file actions\n\n## Latest commit\n\n[![amuzetnoM](https://avatars.githubusercontent.com/u/130906200?v=4&size=40)](https://github.com/amuzetnoM)[amuzetnoM](https://github.com/Artifact-Virtual/foundry-courier/commits?author=amuzetnoM)\n\n[Update README.md](https://github.com/Artifact-Virtual/foundry-courier/commit/9f6a3db72db4d6375348c987c5eca32a02003580)\n\nsuccess\n\nAug 13, 2025\n\n[9f6a3db](https://github.com/Artifact-Virtual/foundry-courier/commit/9f6a3db72db4d6375348c987c5eca32a02003580) · Aug 13, 2025\n\n## History\n\n[History](https://github.com/Artifact-Virtual/foundry-courier/commits/master/README.md)\n\nOpen commit details\n\n[View commit history for this file.](https://github.com/Artifact-Virtual/foundry-courier/commits/master/README.md)\n\n113 lines (78 loc) · 3.36 KB\n\n/\n\n# README.md\n\nTop\n\n## File metadata and controls\n\n- Preview\n\n- Code\n\n- Blame\n\n\n113 lines (78 loc) · 3.36 KB\n\n[Raw](https://github.com/Artifact-Virtual/foundry-courier/raw/refs/heads/master/README.md)\n\nCopy raw file\n\nDownload raw file\n\nYou must be signed in to make or propose changes\n\nMore edit options\n\nOutline\n\nEdit and raw actions\n\n# Foundry Courier Toolkit\n\n[Permalink: Foundry Courier Toolkit](https://github.com/Artifact-Virtual/foundry-courier/blob/master/README.md#foundry-courier-toolkit)\n\n> Darknet Continuum\n\n[![Cross-Platform](https://camo.githubusercontent.com/6266ed8e1c3fa607d45317091868b9621552eb5bc817593baf0e08b40c5f0dcb/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4f532d57696e646f77732532302537432532304c696e75782532302537432532304d6163253230253743253230416e64726f69642532302537432532305455492d696e666f726d6174696f6e616c)](https://camo.githubusercontent.com/6266ed8e1c3fa607d45317091868b9621552eb5bc817593baf0e08b40c5f0dcb/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4f532d57696e646f77732532302537432532304c696e75782532302537432532304d6163253230253743253230416e64726f69642532302537432532305455492d696e666f726d6174696f6e616c)[![No Internet Required](https://camo.githubusercontent.com/984cdf2d96d38f4c8671a48f43b2b222a00cfa1a7df6f6ebe1221c9f9a0feab1/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4f66666c696e652d52656164792d73756363657373)](https://camo.githubusercontent.com/984cdf2d96d38f4c8671a48f43b2b222a00cfa1a7df6f6ebe1221c9f9a0feab1/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4f66666c696e652d52656164792d73756363657373)[![Battle Hardened](https://camo.githubusercontent.com/2f821cb35f0ffb3997aa936a9f4b4892b7956282cf3f5609220351416241a9f2/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f426174746c652d2d48617264656e65642d5965732d637269746963616c)](https://camo.githubusercontent.com/2f821cb35f0ffb3997aa936a9f4b4892b7956282cf3f5609220351416241a9f2/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f426174746c652d2d48617264656e65642d5965732d637269746963616c)[![License: MIT](https://camo.githubusercontent.com/5582d4c23f650f1d41ff1fa4faf6202b30c754579efd1b11dc9511d2de817bd6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d677265656e)](https://camo.githubusercontent.com/5582d4c23f650f1d41ff1fa4faf6202b30c754579efd1b11dc9511d2de817bd6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d677265656e)\n\n* * *\n\n## Purpose\n\n[Permalink: Purpose](https://github.com/Artifact-Virtual/foundry-courier/blob/master/README.md#purpose)\n\n**Move signed blockchain transactions over radio, mesh, SMS, sneakernet, or any data carrier.**\n\nThis toolkit is designed for extreme resilience: when the internet fails, you can still move value. All tools are text-based, portable, and run on minimal hardware (USB, microSD, old phones, smartwatches with terminal access, etc.).\n\n* * *\n\n## Features\n\n[Permalink: Features](https://github.com/Artifact-Virtual/foundry-courier/blob/master/README.md#features)\n\n- Encode/decode signed transactions with CRC32 and optional parity (error correction)\n- Broadcast raw transactions to Bitcoin and Ethereum networks\n- Minimal HTTP/SMS gateway for rebroadcasting\n- Text-based CLI and TUI (menu interface) for universal access\n- Portable: runs from USB, microSD, or any device with Python and a terminal\n- Offline documentation ( `commands.lib`)\n\n* * *\n\n## Project Structure\n\n[Permalink: Project Structure](https://github.com/Artifact-Virtual/foundry-courier/blob/master/README.md#project-structure)\n\n- `courier/foundry_courier.py` – Core encode/decode logic\n- `courier_cli.py` – Main CLI tool (battle-hardened, menu-driven)\n- `tools/push_eth.py` – Broadcast raw Ethereum tx\n- `tools/push_btc.py` – Broadcast raw Bitcoin tx\n- `gateways/sms_gateway.py` – Minimal HTTP/SMS gateway\n- `examples/` – Test vectors and demo files\n- `commands.lib` – All CLI commands and usage, always up to date\n- `requirements.txt` – Minimal dependencies\n\n* * *\n\n## Install & Run\n\n[Permalink: Install & Run](https://github.com/Artifact-Virtual/foundry-courier/blob/master/README.md#install--run)\n\n```\n# 1. Set up Python (3.11+ recommended)\npython -m venv .venv && .venv\\Scripts\\activate   # Windows\n# or\npython3 -m venv .venv && source .venv/bin/activate # Linux/Mac\npip install -r requirements.txt\n\n# 2. Run the CLI (menu or direct command)\npython courier_cli.py help\npython courier_cli.py list-services\n```\n\n* * *\n\n## Usage Examples\n\n[Permalink: Usage Examples](https://github.com/Artifact-Virtual/foundry-courier/blob/master/README.md#usage-examples)\n\n### Encode a signed transaction\n\n[Permalink: Encode a signed transaction](https://github.com/Artifact-Virtual/foundry-courier/blob/master/README.md#encode-a-signed-transaction)\n\n```\npython courier_cli.py encode-tx --hex <SIGNED_TX_HEX> --output frames.txt\n```\n\n### Decode frames\n\n[Permalink: Decode frames](https://github.com/Artifact-Virtual/foundry-courier/blob/master/README.md#decode-frames)\n\n```\npython courier_cli.py decode-frames --input frames.txt --output recovered.hex\n```\n\n### Broadcast to Ethereum\n\n[Permalink: Broadcast to Ethereum](https://github.com/Artifact-Virtual/foundry-courier/blob/master/README.md#broadcast-to-ethereum)\n\n```\npython courier_cli.py push-eth --hex <SIGNED_TX_HEX> --rpc-url <ETH_RPC_URL>\n```\n\n### Broadcast to Bitcoin\n\n[Permalink: Broadcast to Bitcoin](https://github.com/Artifact-Virtual/foundry-courier/blob/master/README.md#broadcast-to-bitcoin)\n\n```\npython courier_cli.py push-btc --hex <SIGNED_TX_HEX> --rpc-url <BTC_RPC_URL> --user <USER> --password <PWD>\n```\n\n* * *\n\n## End-to-End Testing\n\n[Permalink: End-to-End Testing](https://github.com/Artifact-Virtual/foundry-courier/blob/master/README.md#end-to-end-testing)\n\nThis project includes a full end-to-end test suite to ensure all core functionality works as expected.\n\n### Run all tests\n\n[Permalink: Run all tests](https://github.com/Artifact-Virtual/foundry-courier/blob/master/README.md#run-all-tests)\n\n```\npython test_end_to_end.py\n```\n\nTest results and a summary report will be written to `report.md` in the project root after running the tests.\n\n* * *\n\n## Battle-Hardened Philosophy\n\n[Permalink: Battle-Hardened Philosophy](https://github.com/Artifact-Virtual/foundry-courier/blob/master/README.md#battle-hardened-philosophy)\n\n- **Text-based first:** Works on any OS, terminal, or device (including Termux, smartwatches, old phones)\n- **Portable Python:** Bundle on USB/microSD, run anywhere with Python or as a standalone executable\n- **Minimal dependencies:** No heavy libraries, easy to audit and maintain\n- **Offline docs:** All commands in `commands.lib` for field reference\n- **Universal UI:** TUI/CLI for maximum compatibility; QR/barcode support possible for smart devices\n- **No private keys ever:** Always sign offline, only move signed payloads\n- **Legal & safe:** Respect radio laws, never transmit keys, repeat for reliability\n\n* * *\n\n## License\n\n[Permalink: License](https://github.com/Artifact-Virtual/foundry-courier/blob/master/README.md#license)\n\nMIT","size_bytes":8567},"attached_assets/content-1755210358873.md":{"content":"ARCx is deployed and live! Stay tuned for the address and DEX listing!\n\n![Page cover](https://artifact-virtual.gitbook.io/artifact-virtual/~gitbook/image?url=https%3A%2F%2F2085825860-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FrJCQSAserS2RzkJmDWnn%252Fuploads%252FDkVh8lYoXNaRvT0fxZaF%252FGemini_Generated_Image_6w9zc6w9zc6w9zc6%2520%281%29.png%3Falt%3Dmedia%26token%3Ddc3da75b-b22d-43af-9766-0aa3ddc39498&width=1248&dpr=4&quality=100&sign=e5a2c8bb&sv=2)\n\nCopy\n\n```inline-grid min-w-full grid-cols-[auto_1fr] [count-reset:line] print:whitespace-pre-wrap\nOn-Chain Resilience Field Manual\n```\n\nIn the evolving digital economy, reliance on the traditional internet infrastructure poses risks. In cases of power outages, cable damage, or grid failures, blockchain networks can endure by finding alternative data transmission routes. This guide provides protocols to maintain transaction flow, even when conventional networks fail.\n\n* * *\n\n#### [Direct link to heading](https://artifact-virtual.gitbook.io/artifact-virtual/home/darknet-continuum\\#prtcl1-bone-net-bonet)    **PRTCL** **1** `BONE NET (BONET)`\n\nMesh Networking\n\nCreate a decentralized, peer-to-peer network where devices connect directly to each other. Transactions are passed from device to device like whispers through a crowd. This method is slower but highly effective for moving signed transactions without a central internet connection.\n\n#### [Direct link to heading](https://artifact-virtual.gitbook.io/artifact-virtual/home/darknet-continuum\\#prtcl2-signal-script)    PRTCL2 `SIGNAL SCRIPT`\n\nSMS Transactions\n\nUtilize existing cellular towers for basic communication. Transactions can be sent via plain-text SMS, containing a simple command, wallet address, and signature. This method requires no apps or browsers, relying only on a cell signal and a keypad.\n\n#### [Direct link to heading](https://artifact-virtual.gitbook.io/artifact-virtual/home/darknet-continuum\\#prtcl3-physical-handshake-ledger)    **PRTCL** **3** `PHYSICAL HANDSHAKE (LEDGER)`\n\nOffline Hardware Transfer\n\nEmploy a physical-delivery method for transactions. One person signs a transaction, and another person physically carries the data to a location with an internet connection to broadcast it. This method turns transaction delivery into a form of spycraft.\n\n#### [Direct link to heading](https://artifact-virtual.gitbook.io/artifact-virtual/home/darknet-continuum\\#prtcl4-data-relic)    **PRTCL** **4** `DATA RELIC`\n\nUSB Sneakernet\n\nUse a portable storage device as the data carrier. A signed transaction file is saved to a USB stick, physically moved to a device that has network access, and then broadcast to the blockchain.\n\n#### [Direct link to heading](https://artifact-virtual.gitbook.io/artifact-virtual/home/darknet-continuum\\#prtcl5-static-haul-long-and-short)    **PRTCL** **5** `STATIC HAUL (LONG & SHORT)`\n\nHam Radio Blockchain\n\nHarness the power of amateur radio. If ham radio can transmit emails over long distances, it can transmit blockchain data, offering a resilient, cross-border method of communication that is immune to physical infrastructure cuts.\n\n#### [Direct link to heading](https://artifact-virtual.gitbook.io/artifact-virtual/home/darknet-continuum\\#prtcl6-ghost-mode)    **PRTCL** **6** `GHOST MODE`\n\nRadio Broadcast\n\nLeverage radio broadcasts to transmit transactions. A signed, compressed data packet is converted into radio waves and broadcast over the air. Anyone with the right receiver can capture, decode, and inject the transaction into the network, bypassing routers and DNS entirely.\n\n#### [Direct link to heading](https://artifact-virtual.gitbook.io/artifact-virtual/home/darknet-continuum\\#prtcl7-skychain-relay)    **PRTCL** **7** `SKYCHAIN RELAY`\n\nSatellite Link\n\nBroadcast transactions directly into space using a satellite dish. The satellite then relays the data back down to a receiving station connected to the blockchain network, completely bypassing all terrestrial infrastructure.\n\n#### [Direct link to heading](https://artifact-virtual.gitbook.io/artifact-virtual/home/darknet-continuum\\#core-doctrine)    Core Doctrine\n\nThe true essence of blockchain is independent of the internet; instead, the internet serves as a useful transport layer. If one route fails, a resilient network seeks another path. As long as data can be transferred, value can be transferred.\n\n[PreviousMigration](https://artifact-virtual.gitbook.io/artifact-virtual/home/constitutional-intelligence/development/migration) [NextDOCTRINE](https://artifact-virtual.gitbook.io/artifact-virtual/doctrine)\n\nLast updated 8 hours ago","size_bytes":4634},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { storage } from \"./storage\";\nimport { BattleEngine } from \"./services/battle-engine\";\nimport { AlliancePowerCalculator } from \"./services/alliance-power-calculator\";\nimport { \n  insertUserSchema, insertAllianceSchema, insertBattleSchema, insertMessageSchema, insertCourierTransactionSchema,\n  insertItemSchema, insertMarketplaceListingSchema, insertTradeOfferSchema, insertEscrowContractSchema, insertTradingPostSchema,\n  insertNftMintSchema\n} from \"@shared/schema\";\nimport { setupWebSocket } from \"./services/websocket\";\nimport { CourierService } from \"./services/courier\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const httpServer = createServer(app);\n  \n  // Initialize WebSocket server\n  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n  setupWebSocket(wss);\n  \n  // Initialize Courier service\n  const courierService = new CourierService();\n\n  // User routes\n  app.get(\"/api/users/:address\", async (req, res) => {\n    try {\n      const user = await storage.getUserByAddress(req.params.address);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      res.json(user);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get user\" });\n    }\n  });\n\n  app.post(\"/api/users\", async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      const user = await storage.createUser(userData);\n      res.status(201).json(user);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid user data\" });\n    }\n  });\n\n  app.get(\"/api/users/:id/alliance\", async (req, res) => {\n    try {\n      const userAlliance = await storage.getUserAlliance(req.params.id);\n      res.json(userAlliance);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get user alliance\" });\n    }\n  });\n\n  // Alliance routes\n  app.post(\"/api/alliances\", async (req, res) => {\n    try {\n      const allianceData = insertAllianceSchema.parse(req.body);\n      const alliance = await storage.createAlliance(allianceData);\n      res.status(201).json(alliance);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid alliance data\" });\n    }\n  });\n\n  app.post(\"/api/alliances/:id/join\", async (req, res) => {\n    try {\n      const { userId, role = \"member\" } = req.body;\n      const member = await storage.joinAlliance(userId, req.params.id, role);\n      res.status(201).json(member);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to join alliance\" });\n    }\n  });\n\n  // Territory routes\n  app.get(\"/api/territories\", async (req, res) => {\n    try {\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 100;\n      const territories = await storage.getTerritories(limit);\n      res.json(territories);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get territories\" });\n    }\n  });\n\n  app.get(\"/api/territories/:x/:y\", async (req, res) => {\n    try {\n      const x = parseInt(req.params.x);\n      const y = parseInt(req.params.y);\n      const territory = await storage.getTerritory(x, y);\n      res.json(territory);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get territory\" });\n    }\n  });\n\n  app.post(\"/api/territories/claim\", async (req, res) => {\n    try {\n      const territory = await storage.claimTerritory(req.body);\n      res.status(201).json(territory);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to claim territory\" });\n    }\n  });\n\n  // Battle routes\n  app.post(\"/api/battles\", async (req, res) => {\n    try {\n      const battleData = insertBattleSchema.parse(req.body);\n      const battle = await storage.createBattle(battleData);\n      res.status(201).json(battle);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid battle data\" });\n    }\n  });\n\n  app.patch(\"/api/battles/:id/complete\", async (req, res) => {\n    try {\n      const { winnerId } = req.body;\n      const battle = await storage.completeBattle(req.params.id, winnerId);\n      res.json(battle);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to complete battle\" });\n    }\n  });\n\n  // Enhanced battle resolution using aggregate power calculations\n  app.post(\"/api/battles/:id/resolve\", async (req, res) => {\n    try {\n      const battleEngine = new BattleEngine();\n      const battle = await storage.getBattle(req.params.id);\n      \n      if (!battle) {\n        return res.status(404).json({ message: \"Battle not found\" });\n      }\n\n      if (battle.status !== \"pending\") {\n        return res.status(400).json({ message: \"Battle already resolved\" });\n      }\n\n      if (!battle.territoryId) {\n        return res.status(400).json({ message: \"Battle must have an associated territory\" });\n      }\n\n      // Use battle engine to calculate outcome based on aggregate power\n      const result = await battleEngine.resolveBattle(\n        battle.challengerId,\n        battle.defenderId,\n        battle.territoryId\n      );\n\n      // Complete the battle with calculated results\n      const completedBattle = await storage.completeBattle(\n        req.params.id,\n        result.winnerId,\n        result.battleData\n      );\n\n      // Update territory ownership if battle was for territory control\n      if (battle.territoryId && result.winnerId === battle.challengerId) {\n        await storage.claimTerritory(\n          parseInt(String(battle.territoryId)), \n          parseInt(String(battle.territoryId)), \n          result.winnerId\n        );\n      }\n\n      res.json({\n        battle: completedBattle,\n        resolution: result.battleData,\n        powerDifference: result.powerDifference,\n      });\n\n    } catch (error) {\n      console.error(\"Battle resolution error:\", error);\n      res.status(500).json({ message: \"Failed to resolve battle\" });\n    }\n  });\n\n  // Get alliance power rankings\n  app.get(\"/api/alliances/power-rankings\", async (req, res) => {\n    try {\n      const calculator = new AlliancePowerCalculator();\n      const rankings = await calculator.getAlliancePowerRankings();\n      res.json(rankings);\n    } catch (error) {\n      console.error(\"Alliance power calculation error:\", error);\n      res.status(500).json({ message: \"Failed to calculate alliance power\" });\n    }\n  });\n\n  // Get specific alliance power breakdown\n  app.get(\"/api/alliances/:id/power\", async (req, res) => {\n    try {\n      const calculator = new AlliancePowerCalculator();\n      const powerData = await calculator.calculateAllianceTotalPower(req.params.id);\n      res.json(powerData);\n    } catch (error) {\n      console.error(\"Alliance power calculation error:\", error);\n      res.status(500).json({ message: \"Failed to calculate alliance power\" });\n    }\n  });\n\n  // Predict battle outcome between alliances\n  app.post(\"/api/alliances/battle-prediction\", async (req, res) => {\n    try {\n      const { alliance1Id, alliance2Id } = req.body;\n      const calculator = new AlliancePowerCalculator();\n      const prediction = await calculator.predictAllianceBattle(alliance1Id, alliance2Id);\n      res.json(prediction);\n    } catch (error) {\n      console.error(\"Battle prediction error:\", error);\n      res.status(500).json({ message: \"Failed to predict battle outcome\" });\n    }\n  });\n\n  app.get(\"/api/battles/user/:userId\", async (req, res) => {\n    try {\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 10;\n      const battles = await storage.getUserBattles(req.params.userId, limit);\n      res.json(battles);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get user battles\" });\n    }\n  });\n\n  // Message routes\n  app.post(\"/api/messages\", async (req, res) => {\n    try {\n      const messageData = insertMessageSchema.parse(req.body);\n      const message = await storage.createMessage(messageData);\n      \n      // Broadcast message via WebSocket\n      wss.clients.forEach((client) => {\n        if (client.readyState === WebSocket.OPEN) {\n          client.send(JSON.stringify({\n            type: 'new_message',\n            data: message\n          }));\n        }\n      });\n      \n      res.status(201).json(message);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid message data\" });\n    }\n  });\n\n  app.get(\"/api/messages/:channel\", async (req, res) => {\n    try {\n      const { channel } = req.params;\n      const { allianceId, limit = \"50\" } = req.query;\n      const messages = await storage.getMessages(\n        channel, \n        allianceId as string, \n        parseInt(limit as string)\n      );\n      res.json(messages);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get messages\" });\n    }\n  });\n\n  // Courier routes\n  app.post(\"/api/courier/encode\", async (req, res) => {\n    try {\n      const { txHex, userId } = req.body;\n      const result = await courierService.encodeTx(txHex);\n      \n      const transaction = await storage.createCourierTransaction({\n        userId,\n        txHex,\n        encodedFrames: result.frames,\n        status: \"encoded\"\n      });\n      \n      res.json({ ...result, transactionId: transaction.id });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to encode transaction\" });\n    }\n  });\n\n  app.post(\"/api/courier/decode\", async (req, res) => {\n    try {\n      const { frames } = req.body;\n      const result = await courierService.decodeFrames(frames);\n      res.json(result);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to decode frames\" });\n    }\n  });\n\n  app.post(\"/api/courier/broadcast\", async (req, res) => {\n    try {\n      const { txHex, network = \"ethereum\" } = req.body;\n      const result = await courierService.broadcastTx(txHex, network);\n      res.json(result);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to broadcast transaction\" });\n    }\n  });\n\n  app.get(\"/api/courier/transactions/:userId\", async (req, res) => {\n    try {\n      const transactions = await storage.getUserCourierTransactions(req.params.userId);\n      res.json(transactions);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get courier transactions\" });\n    }\n  });\n\n  // Leaderboard route\n  app.get(\"/api/leaderboard\", async (req, res) => {\n    try {\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 10;\n      const leaderboard = await storage.getLeaderboard(limit);\n      res.json(leaderboard);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get leaderboard\" });\n    }\n  });\n\n  // Trading API Routes\n  \n  // Items\n  app.get(\"/api/items\", async (req, res) => {\n    try {\n      const userId = req.query.userId as string;\n      if (!userId) {\n        return res.status(400).json({ message: \"User ID required\" });\n      }\n      const items = await storage.getUserItems(userId);\n      res.json(items);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get user items\" });\n    }\n  });\n\n  app.post(\"/api/items\", async (req, res) => {\n    try {\n      const itemData = insertItemSchema.parse(req.body);\n      const item = await storage.createItem(itemData);\n      res.status(201).json(item);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid item data\" });\n    }\n  });\n\n  app.get(\"/api/items/:id\", async (req, res) => {\n    try {\n      const item = await storage.getItem(req.params.id);\n      if (!item) {\n        return res.status(404).json({ message: \"Item not found\" });\n      }\n      res.json(item);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get item\" });\n    }\n  });\n\n  app.patch(\"/api/items/:id\", async (req, res) => {\n    try {\n      const item = await storage.updateItem(req.params.id, req.body);\n      res.json(item);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to update item\" });\n    }\n  });\n\n  // Marketplace\n  app.get(\"/api/marketplace\", async (req, res) => {\n    try {\n      const category = req.query.category as string;\n      const sortBy = req.query.sortBy as string;\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 50;\n      const listings = await storage.getMarketplaceListings(category, sortBy, limit);\n      res.json(listings);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get marketplace listings\" });\n    }\n  });\n\n  app.post(\"/api/marketplace\", async (req, res) => {\n    try {\n      const listingData = insertMarketplaceListingSchema.parse(req.body);\n      const listing = await storage.createListing(listingData);\n      \n      // Update item as listed\n      await storage.updateItem(listingData.itemId, { isListed: true });\n      \n      res.status(201).json(listing);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid listing data\" });\n    }\n  });\n\n  app.get(\"/api/marketplace/:id\", async (req, res) => {\n    try {\n      const listing = await storage.getListing(req.params.id);\n      if (!listing) {\n        return res.status(404).json({ message: \"Listing not found\" });\n      }\n      res.json(listing);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get listing\" });\n    }\n  });\n\n  app.patch(\"/api/marketplace/:id\", async (req, res) => {\n    try {\n      const listing = await storage.updateListing(req.params.id, req.body);\n      res.json(listing);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to update listing\" });\n    }\n  });\n\n  app.post(\"/api/marketplace/:id/buy\", async (req, res) => {\n    try {\n      const { buyerId, escrowData } = req.body;\n      const listing = await storage.getListing(req.params.id);\n      \n      if (!listing) {\n        return res.status(404).json({ message: \"Listing not found\" });\n      }\n      \n      if (listing.status !== 'active') {\n        return res.status(400).json({ message: \"Listing not available\" });\n      }\n      \n      // Create escrow contract\n      const escrow = await storage.createEscrowContract({\n        contractAddress: escrowData.contractAddress,\n        buyerId,\n        sellerId: listing.sellerId,\n        itemId: listing.itemId,\n        amount: listing.price,\n        createdTxHash: escrowData.txHash\n      });\n      \n      // Update listing status\n      await storage.updateListing(req.params.id, { \n        status: 'sold',\n        soldAt: new Date()\n      });\n      \n      res.json({ escrow, listing });\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to purchase item\" });\n    }\n  });\n\n  // Trade Offers\n  app.get(\"/api/trades\", async (req, res) => {\n    try {\n      const userId = req.query.userId as string;\n      const type = req.query.type as 'sent' | 'received' | undefined;\n      \n      if (!userId) {\n        return res.status(400).json({ message: \"User ID required\" });\n      }\n      \n      const offers = await storage.getUserTradeOffers(userId, type);\n      res.json(offers);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get trade offers\" });\n    }\n  });\n\n  app.post(\"/api/trades\", async (req, res) => {\n    try {\n      const offerData = insertTradeOfferSchema.parse(req.body);\n      const offer = await storage.createTradeOffer(offerData);\n      res.status(201).json(offer);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid trade offer data\" });\n    }\n  });\n\n  app.get(\"/api/trades/:id\", async (req, res) => {\n    try {\n      const offer = await storage.getTradeOffer(req.params.id);\n      if (!offer) {\n        return res.status(404).json({ message: \"Trade offer not found\" });\n      }\n      res.json(offer);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get trade offer\" });\n    }\n  });\n\n  app.patch(\"/api/trades/:id\", async (req, res) => {\n    try {\n      const offer = await storage.updateTradeOffer(req.params.id, req.body);\n      res.json(offer);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to update trade offer\" });\n    }\n  });\n\n  app.post(\"/api/trades/:id/respond\", async (req, res) => {\n    try {\n      const { response, txHash } = req.body; // response: 'accept' | 'decline'\n      const updates: any = { \n        status: response === 'accept' ? 'accepted' : 'declined',\n        respondedAt: new Date()\n      };\n      \n      if (txHash) {\n        updates.txHash = txHash;\n      }\n      \n      if (response === 'accept') {\n        updates.executedAt = new Date();\n        updates.status = 'executed';\n      }\n      \n      const offer = await storage.updateTradeOffer(req.params.id, updates);\n      res.json(offer);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to respond to trade offer\" });\n    }\n  });\n\n  // Escrow Contracts\n  app.get(\"/api/escrow\", async (req, res) => {\n    try {\n      const userId = req.query.userId as string;\n      const type = req.query.type as 'buyer' | 'seller' | undefined;\n      \n      if (!userId) {\n        return res.status(400).json({ message: \"User ID required\" });\n      }\n      \n      const contracts = await storage.getUserEscrowContracts(userId, type);\n      res.json(contracts);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get escrow contracts\" });\n    }\n  });\n\n  app.post(\"/api/escrow\", async (req, res) => {\n    try {\n      const contractData = insertEscrowContractSchema.parse(req.body);\n      const contract = await storage.createEscrowContract(contractData);\n      res.status(201).json(contract);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid escrow contract data\" });\n    }\n  });\n\n  app.get(\"/api/escrow/:id\", async (req, res) => {\n    try {\n      const contract = await storage.getEscrowContract(req.params.id);\n      if (!contract) {\n        return res.status(404).json({ message: \"Escrow contract not found\" });\n      }\n      res.json(contract);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get escrow contract\" });\n    }\n  });\n\n  app.patch(\"/api/escrow/:id\", async (req, res) => {\n    try {\n      const contract = await storage.updateEscrowContract(req.params.id, req.body);\n      res.json(contract);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to update escrow contract\" });\n    }\n  });\n\n  app.post(\"/api/escrow/:id/complete\", async (req, res) => {\n    try {\n      const { txHash } = req.body;\n      const contract = await storage.updateEscrowContract(req.params.id, {\n        status: 'completed',\n        completedAt: new Date(),\n        completedTxHash: txHash\n      });\n      \n      // Transfer item ownership if applicable\n      if (contract.itemId) {\n        await storage.updateItem(contract.itemId, {\n          ownerId: contract.buyerId,\n          isListed: false\n        });\n      }\n      \n      res.json(contract);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to complete escrow\" });\n    }\n  });\n\n  app.post(\"/api/escrow/:id/dispute\", async (req, res) => {\n    try {\n      const { reason, evidence } = req.body;\n      const contract = await storage.updateEscrowContract(req.params.id, {\n        status: 'disputed',\n        disputeReason: reason,\n        resolutionData: { evidence, disputedAt: new Date() }\n      });\n      res.json(contract);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to dispute escrow\" });\n    }\n  });\n\n  // Trading Posts\n  app.get(\"/api/trading-posts\", async (req, res) => {\n    try {\n      const territoryId = req.query.territoryId as string;\n      const posts = await storage.getTradingPosts(territoryId);\n      res.json(posts);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get trading posts\" });\n    }\n  });\n\n  app.post(\"/api/trading-posts\", async (req, res) => {\n    try {\n      const postData = insertTradingPostSchema.parse(req.body);\n      const post = await storage.createTradingPost(postData);\n      res.status(201).json(post);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid trading post data\" });\n    }\n  });\n\n  app.get(\"/api/trading-posts/:id\", async (req, res) => {\n    try {\n      const post = await storage.getTradingPost(req.params.id);\n      if (!post) {\n        return res.status(404).json({ message: \"Trading post not found\" });\n      }\n      res.json(post);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get trading post\" });\n    }\n  });\n\n  app.patch(\"/api/trading-posts/:id\", async (req, res) => {\n    try {\n      const post = await storage.updateTradingPost(req.params.id, req.body);\n      res.json(post);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to update trading post\" });\n    }\n  });\n\n  // NFT Minting API Routes\n  \n  // Check if wallet is eligible to mint\n  app.get(\"/api/nft/eligibility/:walletAddress\", async (req, res) => {\n    try {\n      const { walletAddress } = req.params;\n      const eligibility = await storage.checkNftEligibility(walletAddress);\n      res.json(eligibility);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to check NFT eligibility\" });\n    }\n  });\n\n  // Get available territories for minting\n  app.get(\"/api/nft/available-territories\", async (req, res) => {\n    try {\n      // Get all territories and filter for unclaimed ones\n      const allTerritories = await storage.getTerritories(1000); // Get many territories\n      const availableTerritories = allTerritories.filter(t => !t.ownerId || t.status === 'unclaimed');\n      \n      // Return territories in a grid format with strategic value\n      const territoryGrid = availableTerritories.map(territory => ({\n        x: territory.x,\n        y: territory.y,\n        strategicValue: Math.floor(Math.random() * 100) + 1, // Mock strategic value\n        resources: ['water', 'tech', 'fuel', 'weapons'][Math.floor(Math.random() * 4)],\n        threat_level: Math.floor(Math.random() * 5) + 1,\n        nearby_alliances: Math.floor(Math.random() * 3),\n      }));\n      \n      res.json(territoryGrid);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get available territories\" });\n    }\n  });\n\n  // Create NFT mint record\n  app.post(\"/api/nft/mint\", async (req, res) => {\n    try {\n      const mintData = insertNftMintSchema.parse(req.body);\n      \n      // Check eligibility first\n      const eligibility = await storage.checkNftEligibility(mintData.walletAddress);\n      if (!eligibility.eligible) {\n        return res.status(400).json({ message: eligibility.reason });\n      }\n      \n      // Create mint record\n      const mint = await storage.createNftMint(mintData);\n      res.status(201).json(mint);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid NFT mint data\" });\n    }\n  });\n\n  // Confirm NFT mint (called after blockchain transaction)\n  app.post(\"/api/nft/confirm\", async (req, res) => {\n    try {\n      const { tokenId, userId, txHash } = req.body;\n      \n      // Update mint with transaction hash\n      await storage.updateNftMint(tokenId, { \n        mintTxHash: txHash,\n        status: 'confirmed' \n      });\n      \n      // Update user and claim territory\n      const user = await storage.confirmNftMint(tokenId, userId);\n      \n      res.json({ user, message: \"NFT minted successfully and territory claimed!\" });\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to confirm NFT mint\" });\n    }\n  });\n\n  // Get NFT mint status\n  app.get(\"/api/nft/mint/:tokenId\", async (req, res) => {\n    try {\n      const mint = await storage.getNftMint(req.params.tokenId);\n      if (!mint) {\n        return res.status(404).json({ message: \"NFT mint not found\" });\n      }\n      res.json(mint);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get NFT mint\" });\n    }\n  });\n\n  // Get user's NFT status\n  app.get(\"/api/nft/user/:walletAddress\", async (req, res) => {\n    try {\n      const mint = await storage.getNftMintByWallet(req.params.walletAddress);\n      res.json(mint || { hasNft: false });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get user NFT status\" });\n    }\n  });\n\n  return httpServer;\n}\n","size_bytes":24084},"server/storage.ts":{"content":"import { \n  users, alliances, allianceMembers, territories, battles, messages, courierTransactions,\n  items, marketplaceListings, tradeOffers, escrowContracts, tradingPosts, nftMints,\n  type User, type InsertUser, type Alliance, type InsertAlliance, \n  type AllianceMember, type InsertAllianceMember, type Territory, type InsertTerritory,\n  type Battle, type InsertBattle, type Message, type InsertMessage,\n  type CourierTransaction, type InsertCourierTransaction,\n  type Item, type InsertItem, type MarketplaceListing, type InsertMarketplaceListing,\n  type TradeOffer, type InsertTradeOffer, type EscrowContract, type InsertEscrowContract,\n  type TradingPost, type InsertTradingPost, type NftMint, type InsertNftMint\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, or, count, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByAddress(address: string): Promise<User | undefined>;\n  getUserByCallSign(callSign: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<User>;\n  \n  // Alliance operations\n  getAlliance(id: string): Promise<Alliance | undefined>;\n  createAlliance(alliance: InsertAlliance): Promise<Alliance>;\n  getUserAlliance(userId: string): Promise<{ alliance: Alliance; member: AllianceMember } | undefined>;\n  joinAlliance(userId: string, allianceId: string, role?: string): Promise<AllianceMember>;\n  \n  // Territory operations\n  getTerritory(x: number, y: number): Promise<Territory | undefined>;\n  getTerritories(limit?: number): Promise<Territory[]>;\n  claimTerritory(territoryData: InsertTerritory): Promise<Territory>;\n  getUserTerritories(userId: string): Promise<Territory[]>;\n  \n  // Battle operations\n  createBattle(battle: InsertBattle): Promise<Battle>;\n  getBattle(id: string): Promise<Battle | undefined>;\n  completeBattle(id: string, winnerId: string): Promise<Battle>;\n  getUserBattles(userId: string, limit?: number): Promise<Battle[]>;\n  \n  // Message operations\n  createMessage(message: InsertMessage): Promise<Message>;\n  getMessages(channel: string, allianceId?: string, limit?: number): Promise<Message[]>;\n  \n  // Courier operations\n  createCourierTransaction(transaction: InsertCourierTransaction): Promise<CourierTransaction>;\n  getCourierTransaction(id: string): Promise<CourierTransaction | undefined>;\n  updateCourierTransaction(id: string, updates: Partial<CourierTransaction>): Promise<CourierTransaction>;\n  getUserCourierTransactions(userId: string): Promise<CourierTransaction[]>;\n  \n  // Leaderboard\n  getLeaderboard(limit?: number): Promise<User[]>;\n  \n  // Trading operations\n  createItem(item: InsertItem): Promise<Item>;\n  getItem(id: string): Promise<Item | undefined>;\n  getUserItems(userId: string): Promise<Item[]>;\n  updateItem(id: string, updates: Partial<Item>): Promise<Item>;\n  \n  // Marketplace operations\n  createListing(listing: InsertMarketplaceListing): Promise<MarketplaceListing>;\n  getListing(id: string): Promise<MarketplaceListing | undefined>;\n  getMarketplaceListings(category?: string, sortBy?: string, limit?: number): Promise<MarketplaceListing[]>;\n  updateListing(id: string, updates: Partial<MarketplaceListing>): Promise<MarketplaceListing>;\n  \n  // Trade offers\n  createTradeOffer(offer: InsertTradeOffer): Promise<TradeOffer>;\n  getTradeOffer(id: string): Promise<TradeOffer | undefined>;\n  getUserTradeOffers(userId: string, type?: 'sent' | 'received'): Promise<TradeOffer[]>;\n  updateTradeOffer(id: string, updates: Partial<TradeOffer>): Promise<TradeOffer>;\n  \n  // Escrow contracts\n  createEscrowContract(contract: InsertEscrowContract): Promise<EscrowContract>;\n  getEscrowContract(id: string): Promise<EscrowContract | undefined>;\n  getUserEscrowContracts(userId: string, type?: 'buyer' | 'seller'): Promise<EscrowContract[]>;\n  updateEscrowContract(id: string, updates: Partial<EscrowContract>): Promise<EscrowContract>;\n  \n  // Trading posts\n  createTradingPost(post: InsertTradingPost): Promise<TradingPost>;\n  getTradingPost(id: string): Promise<TradingPost | undefined>;\n  getTradingPosts(territoryId?: string): Promise<TradingPost[]>;\n  updateTradingPost(id: string, updates: Partial<TradingPost>): Promise<TradingPost>;\n  \n  // NFT Minting operations\n  checkNftEligibility(walletAddress: string): Promise<{ eligible: boolean; reason?: string }>;\n  createNftMint(mint: InsertNftMint): Promise<NftMint>;\n  getNftMint(tokenId: string): Promise<NftMint | undefined>;\n  getNftMintByWallet(walletAddress: string): Promise<NftMint | undefined>;\n  updateNftMint(tokenId: string, updates: Partial<NftMint>): Promise<NftMint>;\n  confirmNftMint(tokenId: string, userId: string): Promise<User>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByAddress(address: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.address, address));\n    return user || undefined;\n  }\n\n  async getUserByCallSign(callSign: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.callSign, callSign));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(insertUser).returning();\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User> {\n    const [user] = await db.update(users).set(updates).where(eq(users.id, id)).returning();\n    return user;\n  }\n\n  async getAlliance(id: string): Promise<Alliance | undefined> {\n    const [alliance] = await db.select().from(alliances).where(eq(alliances.id, id));\n    return alliance || undefined;\n  }\n\n  async createAlliance(insertAlliance: InsertAlliance): Promise<Alliance> {\n    const [alliance] = await db.insert(alliances).values(insertAlliance).returning();\n    return alliance;\n  }\n\n  async getUserAlliance(userId: string): Promise<{ alliance: Alliance; member: AllianceMember } | undefined> {\n    const result = await db\n      .select()\n      .from(allianceMembers)\n      .innerJoin(alliances, eq(allianceMembers.allianceId, alliances.id))\n      .where(eq(allianceMembers.userId, userId))\n      .limit(1);\n\n    if (result.length === 0) return undefined;\n\n    return {\n      alliance: result[0].alliances,\n      member: result[0].alliance_members,\n    };\n  }\n\n  async joinAlliance(userId: string, allianceId: string, role: string = \"member\"): Promise<AllianceMember> {\n    const [member] = await db\n      .insert(allianceMembers)\n      .values({ userId, allianceId, role })\n      .returning();\n\n    // Update alliance member count\n    await db\n      .update(alliances)\n      .set({ memberCount: sql`member_count + 1` })\n      .where(eq(alliances.id, allianceId));\n\n    return member;\n  }\n\n  async getTerritory(x: number, y: number): Promise<Territory | undefined> {\n    const [territory] = await db\n      .select()\n      .from(territories)\n      .where(and(eq(territories.x, x), eq(territories.y, y)));\n    return territory || undefined;\n  }\n\n  async getTerritories(limit: number = 100): Promise<Territory[]> {\n    return await db.select().from(territories).limit(limit);\n  }\n\n  async claimTerritory(territoryData: InsertTerritory): Promise<Territory> {\n    const [territory] = await db.insert(territories).values(territoryData).returning();\n    return territory;\n  }\n\n  async getUserTerritories(userId: string): Promise<Territory[]> {\n    return await db.select().from(territories).where(eq(territories.ownerId, userId));\n  }\n\n  async createBattle(battle: InsertBattle): Promise<Battle> {\n    const [newBattle] = await db.insert(battles).values(battle).returning();\n    return newBattle;\n  }\n\n  async getBattle(id: string): Promise<Battle | undefined> {\n    const [battle] = await db.select().from(battles).where(eq(battles.id, id));\n    return battle || undefined;\n  }\n\n  async completeBattle(id: string, winnerId: string, battleData?: any): Promise<Battle> {\n    const [battle] = await db\n      .update(battles)\n      .set({\n        winnerId,\n        status: \"completed\",\n        battleData: battleData || {},\n        completedAt: sql`now()`,\n      })\n      .where(eq(battles.id, id))\n      .returning();\n\n    // Update user stats based on battle performance\n    const currentBattle = await this.getBattle(id);\n    if (currentBattle) {\n      const powerDifference = battleData?.powerDifference || 0;\n      \n      // Dynamic XP based on power difference (underdog bonus)\n      const baseXp = 100;\n      const underdogBonus = powerDifference > 100 ? Math.min(50, powerDifference / 10) : 0;\n      const winnerXp = baseXp + underdogBonus;\n      const loserXp = Math.max(25, Math.round(winnerXp * 0.3));\n\n      // Dynamic reputation based on battle quality\n      const baseReputation = 10;\n      const qualityBonus = powerDifference > 200 ? 5 : 0;\n      const winnerReputation = baseReputation + qualityBonus;\n\n      // Winner rewards\n      await db\n        .update(users)\n        .set({\n          xp: sql`xp + ${winnerXp}`,\n          wins: sql`wins + 1`,\n          reputation: sql`reputation + ${winnerReputation}`,\n        })\n        .where(eq(users.id, winnerId));\n\n      // Loser compensation\n      const loserId = winnerId === currentBattle.challengerId ? currentBattle.defenderId : currentBattle.challengerId;\n      await db\n        .update(users)\n        .set({\n          xp: sql`xp + ${loserXp}`,\n          losses: sql`losses + 1`,\n          reputation: sql`reputation + 2`, // Small consolation reputation\n        })\n        .where(eq(users.id, loserId));\n    }\n\n    return battle;\n  }\n\n  async getUserBattles(userId: string, limit: number = 10): Promise<Battle[]> {\n    return await db\n      .select()\n      .from(battles)\n      .where(or(eq(battles.challengerId, userId), eq(battles.defenderId, userId)))\n      .orderBy(desc(battles.createdAt))\n      .limit(limit);\n  }\n\n  async createMessage(message: InsertMessage): Promise<Message> {\n    const [newMessage] = await db.insert(messages).values(message).returning();\n    \n    // Update user message count\n    await db\n      .update(users)\n      .set({\n        messageCount: sql`message_count + 1`,\n        lastMessageTime: sql`now()`,\n      })\n      .where(eq(users.id, message.senderId));\n\n    return newMessage;\n  }\n\n  async getMessages(channel: string, allianceId?: string, limit: number = 50): Promise<Message[]> {\n    let query = db\n      .select()\n      .from(messages)\n      .where(eq(messages.channel, channel))\n      .orderBy(desc(messages.createdAt))\n      .limit(limit);\n\n    if (allianceId && channel === \"alliance\") {\n      query = db\n        .select()\n        .from(messages)\n        .where(and(eq(messages.channel, channel), eq(messages.allianceId, allianceId)))\n        .orderBy(desc(messages.createdAt))\n        .limit(limit);\n    }\n\n    return await query;\n  }\n\n  async createCourierTransaction(transaction: InsertCourierTransaction): Promise<CourierTransaction> {\n    const [newTransaction] = await db.insert(courierTransactions).values(transaction).returning();\n    return newTransaction;\n  }\n\n  async getCourierTransaction(id: string): Promise<CourierTransaction | undefined> {\n    const [transaction] = await db.select().from(courierTransactions).where(eq(courierTransactions.id, id));\n    return transaction || undefined;\n  }\n\n  async updateCourierTransaction(id: string, updates: Partial<CourierTransaction>): Promise<CourierTransaction> {\n    const [transaction] = await db\n      .update(courierTransactions)\n      .set(updates)\n      .where(eq(courierTransactions.id, id))\n      .returning();\n    return transaction;\n  }\n\n  async getUserCourierTransactions(userId: string): Promise<CourierTransaction[]> {\n    return await db\n      .select()\n      .from(courierTransactions)\n      .where(eq(courierTransactions.userId, userId))\n      .orderBy(desc(courierTransactions.createdAt));\n  }\n\n  async getLeaderboard(limit: number = 10): Promise<User[]> {\n    return await db\n      .select()\n      .from(users)\n      .orderBy(desc(users.xp))\n      .limit(limit);\n  }\n\n  // Trading operations\n  async createItem(insertItem: InsertItem): Promise<Item> {\n    const [item] = await db.insert(items).values(insertItem).returning();\n    return item;\n  }\n\n  async getItem(id: string): Promise<Item | undefined> {\n    const [item] = await db.select().from(items).where(eq(items.id, id));\n    return item || undefined;\n  }\n\n  async getUserItems(userId: string): Promise<Item[]> {\n    const userItems = await db.select().from(items).where(eq(items.ownerId, userId));\n    return userItems;\n  }\n\n  async updateItem(id: string, updates: Partial<Item>): Promise<Item> {\n    const [item] = await db.update(items).set(updates).where(eq(items.id, id)).returning();\n    return item;\n  }\n\n  // Marketplace operations\n  async createListing(insertListing: InsertMarketplaceListing): Promise<MarketplaceListing> {\n    const [listing] = await db.insert(marketplaceListings).values(insertListing).returning();\n    return listing;\n  }\n\n  async getListing(id: string): Promise<MarketplaceListing | undefined> {\n    const [listing] = await db.select().from(marketplaceListings).where(eq(marketplaceListings.id, id));\n    return listing || undefined;\n  }\n\n  async getMarketplaceListings(category?: string, sortBy?: string, limit: number = 50): Promise<MarketplaceListing[]> {\n    let query = db.select().from(marketplaceListings)\n      .where(eq(marketplaceListings.status, 'active'));\n\n    if (category && category !== 'all') {\n      query = query.innerJoin(items, eq(marketplaceListings.itemId, items.id))\n        .where(and(\n          eq(marketplaceListings.status, 'active'),\n          eq(items.category, category)\n        ));\n    }\n\n    // Apply sorting\n    switch (sortBy) {\n      case 'price_asc':\n        query = query.orderBy(marketplaceListings.price);\n        break;\n      case 'price_desc':\n        query = query.orderBy(desc(marketplaceListings.price));\n        break;\n      case 'newest':\n        query = query.orderBy(desc(marketplaceListings.createdAt));\n        break;\n      default:\n        query = query.orderBy(marketplaceListings.createdAt);\n    }\n\n    const listings = await query.limit(limit);\n    return listings;\n  }\n\n  async updateListing(id: string, updates: Partial<MarketplaceListing>): Promise<MarketplaceListing> {\n    const [listing] = await db.update(marketplaceListings).set(updates).where(eq(marketplaceListings.id, id)).returning();\n    return listing;\n  }\n\n  // Trade offers\n  async createTradeOffer(insertOffer: InsertTradeOffer): Promise<TradeOffer> {\n    const [offer] = await db.insert(tradeOffers).values(insertOffer).returning();\n    return offer;\n  }\n\n  async getTradeOffer(id: string): Promise<TradeOffer | undefined> {\n    const [offer] = await db.select().from(tradeOffers).where(eq(tradeOffers.id, id));\n    return offer || undefined;\n  }\n\n  async getUserTradeOffers(userId: string, type?: 'sent' | 'received'): Promise<TradeOffer[]> {\n    let query = db.select().from(tradeOffers);\n    \n    if (type === 'sent') {\n      query = query.where(eq(tradeOffers.fromUserId, userId));\n    } else if (type === 'received') {\n      query = query.where(eq(tradeOffers.toUserId, userId));\n    } else {\n      query = query.where(or(\n        eq(tradeOffers.fromUserId, userId),\n        eq(tradeOffers.toUserId, userId)\n      ));\n    }\n\n    const offers = await query.orderBy(desc(tradeOffers.createdAt));\n    return offers;\n  }\n\n  async updateTradeOffer(id: string, updates: Partial<TradeOffer>): Promise<TradeOffer> {\n    const [offer] = await db.update(tradeOffers).set(updates).where(eq(tradeOffers.id, id)).returning();\n    return offer;\n  }\n\n  // Escrow contracts\n  async createEscrowContract(insertContract: InsertEscrowContract): Promise<EscrowContract> {\n    const [contract] = await db.insert(escrowContracts).values(insertContract).returning();\n    return contract;\n  }\n\n  async getEscrowContract(id: string): Promise<EscrowContract | undefined> {\n    const [contract] = await db.select().from(escrowContracts).where(eq(escrowContracts.id, id));\n    return contract || undefined;\n  }\n\n  async getUserEscrowContracts(userId: string, type?: 'buyer' | 'seller'): Promise<EscrowContract[]> {\n    let query = db.select().from(escrowContracts);\n    \n    if (type === 'buyer') {\n      query = query.where(eq(escrowContracts.buyerId, userId));\n    } else if (type === 'seller') {\n      query = query.where(eq(escrowContracts.sellerId, userId));\n    } else {\n      query = query.where(or(\n        eq(escrowContracts.buyerId, userId),\n        eq(escrowContracts.sellerId, userId)\n      ));\n    }\n\n    const contracts = await query.orderBy(desc(escrowContracts.createdAt));\n    return contracts;\n  }\n\n  async updateEscrowContract(id: string, updates: Partial<EscrowContract>): Promise<EscrowContract> {\n    const [contract] = await db.update(escrowContracts).set(updates).where(eq(escrowContracts.id, id)).returning();\n    return contract;\n  }\n\n  // Trading posts\n  async createTradingPost(insertPost: InsertTradingPost): Promise<TradingPost> {\n    const [post] = await db.insert(tradingPosts).values(insertPost).returning();\n    return post;\n  }\n\n  async getTradingPost(id: string): Promise<TradingPost | undefined> {\n    const [post] = await db.select().from(tradingPosts).where(eq(tradingPosts.id, id));\n    return post || undefined;\n  }\n\n  async getTradingPosts(territoryId?: string): Promise<TradingPost[]> {\n    let query = db.select().from(tradingPosts).where(eq(tradingPosts.status, 'active'));\n    \n    if (territoryId) {\n      query = query.where(and(\n        eq(tradingPosts.status, 'active'),\n        eq(tradingPosts.territoryId, territoryId)\n      ));\n    }\n\n    const posts = await query.orderBy(desc(tradingPosts.volume24h));\n    return posts;\n  }\n\n  async updateTradingPost(id: string, updates: Partial<TradingPost>): Promise<TradingPost> {\n    const [post] = await db.update(tradingPosts).set(updates).where(eq(tradingPosts.id, id)).returning();\n    return post;\n  }\n\n  // NFT Minting operations\n  async checkNftEligibility(walletAddress: string): Promise<{ eligible: boolean; reason?: string }> {\n    // Check if wallet already has an NFT\n    const existingMint = await db.select().from(nftMints).where(eq(nftMints.walletAddress, walletAddress));\n    \n    if (existingMint.length > 0) {\n      return { eligible: false, reason: \"Wallet already owns an OCSH NFT. Only 1 NFT per wallet is allowed.\" };\n    }\n    \n    // Check if user already has NFT through user table\n    const existingUser = await db.select().from(users).where(and(\n      eq(users.address, walletAddress),\n      eq(users.hasNft, true)\n    ));\n    \n    if (existingUser.length > 0) {\n      return { eligible: false, reason: \"User already owns an OCSH NFT.\" };\n    }\n    \n    return { eligible: true };\n  }\n\n  async createNftMint(insertMint: InsertNftMint): Promise<NftMint> {\n    const [mint] = await db.insert(nftMints).values(insertMint).returning();\n    return mint;\n  }\n\n  async getNftMint(tokenId: string): Promise<NftMint | undefined> {\n    const [mint] = await db.select().from(nftMints).where(eq(nftMints.tokenId, tokenId));\n    return mint || undefined;\n  }\n\n  async getNftMintByWallet(walletAddress: string): Promise<NftMint | undefined> {\n    const [mint] = await db.select().from(nftMints).where(eq(nftMints.walletAddress, walletAddress));\n    return mint || undefined;\n  }\n\n  async updateNftMint(tokenId: string, updates: Partial<NftMint>): Promise<NftMint> {\n    const [mint] = await db.update(nftMints).set(updates).where(eq(nftMints.tokenId, tokenId)).returning();\n    return mint;\n  }\n\n  async confirmNftMint(tokenId: string, userId: string): Promise<User> {\n    // Get the mint record\n    const mint = await this.getNftMint(tokenId);\n    if (!mint) {\n      throw new Error(\"NFT mint not found\");\n    }\n\n    // Update user with NFT information\n    const [user] = await db.update(users).set({\n      tokenId: tokenId,\n      hasNft: true,\n      selectedTerritoryX: mint.selectedTerritoryX,\n      selectedTerritoryY: mint.selectedTerritoryY,\n      nftMintedAt: new Date()\n    }).where(eq(users.id, userId)).returning();\n\n    // Update mint status to confirmed\n    await this.updateNftMint(tokenId, { status: 'confirmed' });\n\n    // Auto-claim the selected territory if available\n    const existingTerritory = await this.getTerritory(mint.selectedTerritoryX, mint.selectedTerritoryY);\n    if (!existingTerritory || existingTerritory.ownerId === null) {\n      await this.claimTerritory({\n        x: mint.selectedTerritoryX,\n        y: mint.selectedTerritoryY,\n        ownerId: userId,\n        claimedAt: new Date(),\n        controlEndsAt: new Date(Date.now() + 24 * 60 * 60 * 1000), // 24 hours\n        status: \"claimed\"\n      });\n    }\n\n    return user;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":21005},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, timestamp, boolean, jsonb } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  address: text(\"address\").notNull().unique(),\n  callSign: text(\"call_sign\").notNull().unique(),\n  tokenId: text(\"token_id\").unique(), // NFT token ID (null if not minted)\n  hasNft: boolean(\"has_nft\").notNull().default(false),\n  selectedTerritoryX: integer(\"selected_territory_x\"), // Territory chosen during minting\n  selectedTerritoryY: integer(\"selected_territory_y\"),\n  nftMintedAt: timestamp(\"nft_minted_at\"), // When NFT was minted\n  level: integer(\"level\").notNull().default(1),\n  xp: integer(\"xp\").notNull().default(0),\n  reputation: integer(\"reputation\").notNull().default(0),\n  wins: integer(\"wins\").notNull().default(0),\n  losses: integer(\"losses\").notNull().default(0),\n  messageCount: integer(\"message_count\").notNull().default(0),\n  lastMessageTime: timestamp(\"last_message_time\"),\n  lastOnline: timestamp(\"last_online\").notNull().default(sql`now()`),\n  isOnline: boolean(\"is_online\").notNull().default(false),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\nexport const alliances = pgTable(\"alliances\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull().unique(),\n  tag: text(\"tag\").notNull().unique(),\n  leaderId: varchar(\"leader_id\").notNull().references(() => users.id),\n  memberCount: integer(\"member_count\").notNull().default(1),\n  territoryCount: integer(\"territory_count\").notNull().default(0),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\nexport const allianceMembers = pgTable(\"alliance_members\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  allianceId: varchar(\"alliance_id\").notNull().references(() => alliances.id),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  role: text(\"role\").notNull().default(\"member\"), // leader, member, invited\n  joinedAt: timestamp(\"joined_at\").notNull().default(sql`now()`),\n});\n\nexport const territories = pgTable(\"territories\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  x: integer(\"x\").notNull(),\n  y: integer(\"y\").notNull(),\n  ownerId: varchar(\"owner_id\").references(() => users.id),\n  allianceId: varchar(\"alliance_id\").references(() => alliances.id),\n  claimedAt: timestamp(\"claimed_at\"),\n  controlEndsAt: timestamp(\"control_ends_at\"),\n  status: text(\"status\").notNull().default(\"unclaimed\"), // unclaimed, claimed, contested\n});\n\nexport const battles = pgTable(\"battles\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  challengerId: varchar(\"challenger_id\").notNull().references(() => users.id),\n  defenderId: varchar(\"defender_id\").notNull().references(() => users.id),\n  winnerId: varchar(\"winner_id\").references(() => users.id),\n  territoryId: varchar(\"territory_id\").references(() => territories.id),\n  status: text(\"status\").notNull().default(\"pending\"), // pending, completed, cancelled\n  battleData: jsonb(\"battle_data\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  completedAt: timestamp(\"completed_at\"),\n});\n\nexport const messages = pgTable(\"messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  senderId: varchar(\"sender_id\").notNull().references(() => users.id),\n  content: text(\"content\").notNull(),\n  channel: text(\"channel\").notNull().default(\"global\"), // global, alliance\n  allianceId: varchar(\"alliance_id\").references(() => alliances.id),\n  txHash: text(\"tx_hash\"),\n  fee: text(\"fee\"), // in wei\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\nexport const courierTransactions = pgTable(\"courier_transactions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  txHex: text(\"tx_hex\").notNull(),\n  encodedFrames: text(\"encoded_frames\").notNull(),\n  status: text(\"status\").notNull().default(\"pending\"), // pending, encoded, transmitted, confirmed\n  channel: text(\"channel\"), // radio, sms, mesh\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  transmittedAt: timestamp(\"transmitted_at\"),\n  confirmedAt: timestamp(\"confirmed_at\"),\n});\n\n// Trading System Tables\nexport const items = pgTable(\"items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  tokenId: text(\"token_id\").notNull().unique(),\n  contractAddress: text(\"contract_address\").notNull(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  category: text(\"category\").notNull(), // weapon, armor, tool, consumable, blueprint, territory_deed\n  rarity: text(\"rarity\").notNull().default(\"common\"), // common, uncommon, rare, epic, legendary, artifact\n  attributes: jsonb(\"attributes\"), // item stats, abilities, etc.\n  imageUrl: text(\"image_url\"),\n  ownerId: varchar(\"owner_id\").notNull().references(() => users.id),\n  isListed: boolean(\"is_listed\").notNull().default(false),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\nexport const marketplaceListings = pgTable(\"marketplace_listings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  itemId: varchar(\"item_id\").notNull().references(() => items.id),\n  sellerId: varchar(\"seller_id\").notNull().references(() => users.id),\n  price: text(\"price\").notNull(), // in wei\n  currency: text(\"currency\").notNull().default(\"ETH\"), // ETH, USDC, etc.\n  listingType: text(\"listing_type\").notNull().default(\"fixed\"), // fixed, auction, bundle\n  status: text(\"status\").notNull().default(\"active\"), // active, sold, cancelled, expired\n  auctionEndTime: timestamp(\"auction_end_time\"),\n  reservePrice: text(\"reserve_price\"),\n  txHash: text(\"tx_hash\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  soldAt: timestamp(\"sold_at\"),\n});\n\n// Player Inventory System for Strategic Items\nexport const playerItems = pgTable(\"player_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  itemId: text(\"item_id\").notNull(), // References game-items.ts strategic items\n  quantity: integer(\"quantity\").notNull().default(1),\n  isActive: boolean(\"is_active\").notNull().default(false), // Whether item effects are currently applied\n  durability: integer(\"durability\"), // For depleting items\n  expiresAt: timestamp(\"expires_at\"), // For temporary items\n  acquiredAt: timestamp(\"acquired_at\").notNull().default(sql`now()`),\n});\n\n// Item Usage Tracking - Track when consumables/temporary items are used\nexport const itemUsageLog = pgTable(\"item_usage_log\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  itemId: text(\"item_id\").notNull(),\n  usageType: text(\"usage_type\").notNull(), // 'consumed', 'activated', 'expired', 'depleted'\n  effectsApplied: jsonb(\"effects_applied\"), // What effects were applied\n  usedAt: timestamp(\"used_at\").notNull().default(sql`now()`),\n});\n\n// Active Item Effects - Track currently active temporary effects\nexport const activeItemEffects = pgTable(\"active_item_effects\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  itemId: text(\"item_id\").notNull(),\n  effectType: text(\"effect_type\").notNull(),\n  effectValue: integer(\"effect_value\").notNull(),\n  expiresAt: timestamp(\"expires_at\"), // When effect ends\n  appliedAt: timestamp(\"applied_at\").notNull().default(sql`now()`),\n});\n\n// Strategic Item Marketplace (Base ETH + ARCx tokens)\nexport const strategicItemListings = pgTable(\"strategic_item_listings\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  sellerId: varchar(\"seller_id\").notNull().references(() => users.id),\n  itemId: text(\"item_id\").notNull(), // References strategic items from game-items.ts\n  quantity: integer(\"quantity\").notNull().default(1),\n  priceETH: text(\"price_eth\"), // Price in Base ETH (wei)\n  priceARCX: text(\"price_arcx\"), // Alternative price in ARCx tokens\n  currency: text(\"currency\").notNull().default(\"ETH\"), // ETH or ARCX\n  status: text(\"status\").notNull().default(\"active\"), // active, sold, cancelled\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  expiresAt: timestamp(\"expires_at\"),\n});\n\n// Strategic Item Purchase Transactions\nexport const strategicItemTransactions = pgTable(\"strategic_item_transactions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  buyerId: varchar(\"buyer_id\").notNull().references(() => users.id),\n  sellerId: varchar(\"seller_id\").notNull().references(() => users.id),\n  listingId: varchar(\"listing_id\").notNull().references(() => strategicItemListings.id),\n  itemId: text(\"item_id\").notNull(),\n  quantity: integer(\"quantity\").notNull(),\n  price: text(\"price\").notNull(), // Amount paid (in wei for ETH or tokens for ARCx)\n  currency: text(\"currency\").notNull(),\n  txHash: text(\"tx_hash\"), // Blockchain transaction hash\n  status: text(\"status\").notNull().default(\"pending\"), // pending, completed, failed\n  completedAt: timestamp(\"completed_at\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\nexport const tradeOffers = pgTable(\"trade_offers\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  fromUserId: varchar(\"from_user_id\").notNull().references(() => users.id),\n  toUserId: varchar(\"to_user_id\").notNull().references(() => users.id),\n  offeredItems: jsonb(\"offered_items\").notNull(), // array of item IDs\n  requestedItems: jsonb(\"requested_items\").notNull(), // array of item IDs or tokens\n  offeredTokens: text(\"offered_tokens\").default(\"0\"), // additional tokens in wei\n  requestedTokens: text(\"requested_tokens\").default(\"0\"),\n  message: text(\"message\"),\n  status: text(\"status\").notNull().default(\"pending\"), // pending, accepted, declined, cancelled, executed\n  expiresAt: timestamp(\"expires_at\"),\n  txHash: text(\"tx_hash\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  respondedAt: timestamp(\"responded_at\"),\n  executedAt: timestamp(\"executed_at\"),\n});\n\nexport const escrowContracts = pgTable(\"escrow_contracts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  contractAddress: text(\"contract_address\").notNull().unique(),\n  buyerId: varchar(\"buyer_id\").notNull().references(() => users.id),\n  sellerId: varchar(\"seller_id\").notNull().references(() => users.id),\n  itemId: varchar(\"item_id\").references(() => items.id),\n  tradeOfferId: varchar(\"trade_offer_id\").references(() => tradeOffers.id),\n  amount: text(\"amount\").notNull(), // in wei\n  status: text(\"status\").notNull().default(\"created\"), // created, funded, completed, disputed, cancelled\n  disputeReason: text(\"dispute_reason\"),\n  resolutionData: jsonb(\"resolution_data\"),\n  createdTxHash: text(\"created_tx_hash\"),\n  completedTxHash: text(\"completed_tx_hash\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  completedAt: timestamp(\"completed_at\"),\n});\n\nexport const tradingPosts = pgTable(\"trading_posts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  territoryId: varchar(\"territory_id\").notNull().references(() => territories.id),\n  ownerId: varchar(\"owner_id\").notNull().references(() => users.id),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  taxRate: integer(\"tax_rate\").notNull().default(0), // percentage * 100 (e.g., 250 = 2.5%)\n  specializations: jsonb(\"specializations\"), // array of item categories this post specializes in\n  volume24h: text(\"volume_24h\").default(\"0\"), // trading volume in wei\n  status: text(\"status\").notNull().default(\"active\"), // active, inactive, destroyed\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ one, many }) => ({\n  alliance: one(allianceMembers, {\n    fields: [users.id],\n    references: [allianceMembers.userId],\n  }),\n  ownedTerritories: many(territories, { relationName: \"territoryOwner\" }),\n  sentBattles: many(battles, { relationName: \"battleChallenger\" }),\n  receivedBattles: many(battles, { relationName: \"battleDefender\" }),\n  wonBattles: many(battles, { relationName: \"battleWinner\" }),\n  sentMessages: many(messages),\n  courierTransactions: many(courierTransactions),\n  ownedItems: many(items),\n  listings: many(marketplaceListings),\n  sentTradeOffers: many(tradeOffers, { relationName: \"tradeOfferFrom\" }),\n  receivedTradeOffers: many(tradeOffers, { relationName: \"tradeOfferTo\" }),\n  buyerEscrows: many(escrowContracts, { relationName: \"escrowBuyer\" }),\n  sellerEscrows: many(escrowContracts, { relationName: \"escrowSeller\" }),\n  tradingPosts: many(tradingPosts),\n}));\n\nexport const alliancesRelations = relations(alliances, ({ one, many }) => ({\n  leader: one(users, {\n    fields: [alliances.leaderId],\n    references: [users.id],\n  }),\n  members: many(allianceMembers),\n  territories: many(territories),\n  messages: many(messages),\n}));\n\nexport const allianceMembersRelations = relations(allianceMembers, ({ one }) => ({\n  alliance: one(alliances, {\n    fields: [allianceMembers.allianceId],\n    references: [alliances.id],\n  }),\n  user: one(users, {\n    fields: [allianceMembers.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const territoriesRelations = relations(territories, ({ one, many }) => ({\n  owner: one(users, {\n    fields: [territories.ownerId],\n    references: [users.id],\n    relationName: \"territoryOwner\",\n  }),\n  alliance: one(alliances, {\n    fields: [territories.allianceId],\n    references: [alliances.id],\n  }),\n  battles: many(battles),\n}));\n\nexport const battlesRelations = relations(battles, ({ one }) => ({\n  challenger: one(users, {\n    fields: [battles.challengerId],\n    references: [users.id],\n    relationName: \"battleChallenger\",\n  }),\n  defender: one(users, {\n    fields: [battles.defenderId],\n    references: [users.id],\n    relationName: \"battleDefender\",\n  }),\n  winner: one(users, {\n    fields: [battles.winnerId],\n    references: [users.id],\n    relationName: \"battleWinner\",\n  }),\n  territory: one(territories, {\n    fields: [battles.territoryId],\n    references: [territories.id],\n  }),\n}));\n\nexport const messagesRelations = relations(messages, ({ one }) => ({\n  sender: one(users, {\n    fields: [messages.senderId],\n    references: [users.id],\n  }),\n  alliance: one(alliances, {\n    fields: [messages.allianceId],\n    references: [alliances.id],\n  }),\n}));\n\nexport const courierTransactionsRelations = relations(courierTransactions, ({ one }) => ({\n  user: one(users, {\n    fields: [courierTransactions.userId],\n    references: [users.id],\n  }),\n}));\n\n// Trading Relations\nexport const itemsRelations = relations(items, ({ one, many }) => ({\n  owner: one(users, {\n    fields: [items.ownerId],\n    references: [users.id],\n  }),\n  listing: one(marketplaceListings),\n  escrowContracts: many(escrowContracts),\n}));\n\nexport const marketplaceListingsRelations = relations(marketplaceListings, ({ one }) => ({\n  item: one(items, {\n    fields: [marketplaceListings.itemId],\n    references: [items.id],\n  }),\n  seller: one(users, {\n    fields: [marketplaceListings.sellerId],\n    references: [users.id],\n  }),\n}));\n\nexport const tradeOffersRelations = relations(tradeOffers, ({ one, many }) => ({\n  fromUser: one(users, {\n    fields: [tradeOffers.fromUserId],\n    references: [users.id],\n    relationName: \"tradeOfferFrom\",\n  }),\n  toUser: one(users, {\n    fields: [tradeOffers.toUserId],\n    references: [users.id],\n    relationName: \"tradeOfferTo\",\n  }),\n  escrowContracts: many(escrowContracts),\n}));\n\nexport const escrowContractsRelations = relations(escrowContracts, ({ one }) => ({\n  buyer: one(users, {\n    fields: [escrowContracts.buyerId],\n    references: [users.id],\n    relationName: \"escrowBuyer\",\n  }),\n  seller: one(users, {\n    fields: [escrowContracts.sellerId],\n    references: [users.id],\n    relationName: \"escrowSeller\",\n  }),\n  item: one(items, {\n    fields: [escrowContracts.itemId],\n    references: [items.id],\n  }),\n  tradeOffer: one(tradeOffers, {\n    fields: [escrowContracts.tradeOfferId],\n    references: [tradeOffers.id],\n  }),\n}));\n\nexport const tradingPostsRelations = relations(tradingPosts, ({ one }) => ({\n  territory: one(territories, {\n    fields: [tradingPosts.territoryId],\n    references: [territories.id],\n  }),\n  owner: one(users, {\n    fields: [tradingPosts.ownerId],\n    references: [users.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertAllianceSchema = createInsertSchema(alliances).omit({\n  id: true,\n  memberCount: true,\n  territoryCount: true,\n  createdAt: true,\n});\n\nexport const insertAllianceMemberSchema = createInsertSchema(allianceMembers).omit({\n  id: true,\n  joinedAt: true,\n});\n\nexport const insertTerritorySchema = createInsertSchema(territories).omit({\n  id: true,\n});\n\nexport const insertBattleSchema = createInsertSchema(battles).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertMessageSchema = createInsertSchema(messages).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCourierTransactionSchema = createInsertSchema(courierTransactions).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Trading Insert Schemas\nexport const insertItemSchema = createInsertSchema(items).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertMarketplaceListingSchema = createInsertSchema(marketplaceListings).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertTradeOfferSchema = createInsertSchema(tradeOffers).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertEscrowContractSchema = createInsertSchema(escrowContracts).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertTradingPostSchema = createInsertSchema(tradingPosts).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Alliance = typeof alliances.$inferSelect;\nexport type InsertAlliance = z.infer<typeof insertAllianceSchema>;\nexport type AllianceMember = typeof allianceMembers.$inferSelect;\nexport type InsertAllianceMember = z.infer<typeof insertAllianceMemberSchema>;\nexport type Territory = typeof territories.$inferSelect;\nexport type InsertTerritory = z.infer<typeof insertTerritorySchema>;\nexport type Battle = typeof battles.$inferSelect;\nexport type InsertBattle = z.infer<typeof insertBattleSchema>;\nexport type Message = typeof messages.$inferSelect;\nexport type InsertMessage = z.infer<typeof insertMessageSchema>;\nexport type CourierTransaction = typeof courierTransactions.$inferSelect;\nexport type InsertCourierTransaction = z.infer<typeof insertCourierTransactionSchema>;\n\n// Trading Types\nexport type Item = typeof items.$inferSelect;\nexport type InsertItem = z.infer<typeof insertItemSchema>;\nexport type MarketplaceListing = typeof marketplaceListings.$inferSelect;\nexport type InsertMarketplaceListing = z.infer<typeof insertMarketplaceListingSchema>;\nexport type TradeOffer = typeof tradeOffers.$inferSelect;\nexport type InsertTradeOffer = z.infer<typeof insertTradeOfferSchema>;\nexport type EscrowContract = typeof escrowContracts.$inferSelect;\nexport type InsertEscrowContract = z.infer<typeof insertEscrowContractSchema>;\nexport type TradingPost = typeof tradingPosts.$inferSelect;\nexport type InsertTradingPost = z.infer<typeof insertTradingPostSchema>;\n\n// NFT Minting Table\nexport const nftMints = pgTable(\"nft_mints\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  tokenId: text(\"token_id\").notNull().unique(),\n  walletAddress: text(\"wallet_address\").notNull().unique(), // Enforce 1 NFT per wallet\n  userId: varchar(\"user_id\").notNull().references(() => users.id),\n  selectedTerritoryX: integer(\"selected_territory_x\").notNull(),\n  selectedTerritoryY: integer(\"selected_territory_y\").notNull(),\n  mintTxHash: text(\"mint_tx_hash\").notNull(),\n  status: text(\"status\").notNull().default(\"pending\"), // pending, confirmed, failed\n  metadata: jsonb(\"metadata\"), // NFT attributes and traits\n  mintedAt: timestamp(\"minted_at\").notNull().default(sql`now()`),\n});\n\nexport const insertNftMintSchema = createInsertSchema(nftMints).omit({\n  id: true,\n  mintedAt: true,\n});\n\n// NFT Minting Types\nexport type NftMint = typeof nftMints.$inferSelect;\nexport type InsertNftMint = z.infer<typeof insertNftMintSchema>;\n","size_bytes":20708},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\n// Removed screen-glow component import\nimport NotFound from \"@/pages/not-found\";\nimport Dashboard from \"@/pages/dashboard-realistic\";\nimport Handheld from \"@/pages/handheld-realistic\";\nimport PWAInterface from \"@/pages/pwa-interface\";\nimport { NftMintingInterface } from \"@/components/nft-minting-interface\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/mint\" component={NftMintingInterface} />\n      <Route path=\"/handheld\" component={Handheld} />\n      <Route path=\"/pwa\" component={PWAInterface} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div className=\"min-h-screen relative\">\n          <Router />\n          <Toaster />\n        </div>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;","size_bytes":1173},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Share+Tech+Mono:wght@400&family=Rajdhani:wght@300;400;500;600;700&family=Bebas+Neue&family=Russo+One&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  /* Fallout-inspired desolate color palette */\n  --background: hsl(18 12% 5%);\n  --foreground: hsl(35 25% 85%);\n  --card: hsl(20 15% 8%);\n  --card-foreground: hsl(35 25% 85%);\n  --popover: hsl(18 12% 5%);\n  --popover-foreground: hsl(35 25% 85%);\n  --primary: hsl(28 85% 55%);\n  --primary-foreground: hsl(18 12% 5%);\n  --secondary: hsl(20 15% 12%);\n  --secondary-foreground: hsl(35 25% 85%);\n  --muted: hsl(20 15% 12%);\n  --muted-foreground: hsl(35 15% 55%);\n  --accent: hsl(20 15% 12%);\n  --accent-foreground: hsl(35 25% 85%);\n  --destructive: hsl(0 75% 45%);\n  --destructive-foreground: hsl(35 25% 85%);\n  --border: hsl(20 25% 18%);\n  --input: hsl(20 15% 12%);\n  --ring: hsl(220 8% 35%);\n  --chart-1: hsl(28 85% 55%);\n  --chart-2: hsl(35 75% 45%);\n  --chart-3: hsl(15 85% 50%);\n  --chart-4: hsl(45 65% 45%);\n  --chart-5: hsl(0 75% 45%);\n  --radius: 0.5rem;\n  \n  /* Post-apocalyptic wasteland colors */\n  --wasteland-orange: hsl(28 85% 55%);\n  --rust-red: hsl(15 85% 45%);\n  --burnt-amber: hsl(35 75% 45%);\n  --ash-gray: hsl(35 15% 35%);\n  --blood-maroon: hsl(0 75% 35%);\n  --toxic-yellow: hsl(45 95% 55%);\n  --radiation-green: hsl(85 65% 45%);\n  --steel-blue: hsl(200 35% 45%);\n  \n  /* Atmospheric backgrounds */\n  --dark-wasteland: hsl(18 12% 5%);\n  --deeper-void: hsl(18 15% 3%);\n  --rusted-metal: hsl(20 15% 8%);\n  --corroded-steel: hsl(20 25% 12%);\n  --charred-earth: hsl(25 20% 10%);\n  \n  /* Typography */\n  --font-mono: 'Share Tech Mono', 'Courier New', monospace;\n  --font-display: 'Bebas Neue', 'Impact', sans-serif;\n  --font-title: 'Russo One', 'Impact', sans-serif;\n  --font-body: 'Rajdhani', 'Arial', sans-serif;\n}\n\n.dark {\n  --background: hsl(18 12% 5%);\n  --foreground: hsl(35 25% 85%);\n  --card: hsl(20 15% 8%);\n  --card-foreground: hsl(35 25% 85%);\n  --popover: hsl(18 12% 5%);\n  --popover-foreground: hsl(35 25% 85%);\n  --primary: hsl(28 85% 55%);\n  --primary-foreground: hsl(18 12% 5%);\n  --secondary: hsl(20 15% 12%);\n  --secondary-foreground: hsl(35 25% 85%);\n  --muted: hsl(20 15% 12%);\n  --muted-foreground: hsl(35 15% 55%);\n  --accent: hsl(20 15% 12%);\n  --accent-foreground: hsl(35 25% 85%);\n  --destructive: hsl(0 75% 45%);\n  --destructive-foreground: hsl(35 25% 85%);\n  --border: hsl(20 25% 18%);\n  --input: hsl(20 15% 12%);\n  --ring: hsl(220 8% 35%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n    box-sizing: border-box;\n  }\n  \n  html {\n    scroll-behavior: smooth;\n  }\n  \n  body {\n    @apply bg-background text-foreground font-body antialiased;\n    background: \n      radial-gradient(ellipse at 20% 30%, hsl(28 85% 15% / 0.3) 0%, transparent 70%),\n      radial-gradient(ellipse at 80% 70%, hsl(15 75% 20% / 0.2) 0%, transparent 70%),\n      radial-gradient(ellipse at 40% 10%, hsl(45 60% 25% / 0.1) 0%, transparent 80%),\n      linear-gradient(135deg, \n        var(--dark-wasteland) 0%, \n        var(--deeper-void) 25%,\n        var(--charred-earth) 50%,\n        var(--deeper-void) 75%,\n        var(--dark-wasteland) 100%\n      );\n    min-height: 100vh;\n    overflow-x: hidden;\n    position: relative;\n  }\n  \n  body::before {\n    content: '';\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background: \n      repeating-linear-gradient(\n        0deg,\n        transparent,\n        transparent 2px,\n        hsl(28 85% 55% / 0.02) 2px,\n        hsl(28 85% 55% / 0.02) 4px\n      ),\n      repeating-linear-gradient(\n        90deg,\n        transparent,\n        transparent 2px,\n        hsl(15 85% 45% / 0.01) 2px,\n        hsl(15 85% 45% / 0.01) 4px\n      );\n    pointer-events: none;\n    z-index: 1;\n  }\n  \n  h1, h2, h3, h4, h5, h6 {\n    font-family: var(--font-title);\n    text-shadow: 0 0 20px hsl(28 85% 55% / 0.5);\n    letter-spacing: 0.05em;\n  }\n  \n  .font-display {\n    font-family: var(--font-display);\n  }\n  \n  /* Minimal input focus styles */\n  input:focus,\n  textarea:focus,\n  input:focus-visible,\n  textarea:focus-visible {\n    outline: none !important;\n    box-shadow: 0 0 0 1px hsl(220 8% 35%) !important;\n    border-color: hsl(220 8% 35%) !important;\n  }\n}\n\n@layer components {\n  .text-shadow-wasteland {\n    text-shadow: \n      0 0 10px hsl(28 85% 55% / 0.8),\n      0 0 20px hsl(28 85% 55% / 0.6),\n      0 0 40px hsl(28 85% 55% / 0.4);\n  }\n  \n  .bg-wasteland-atmosphere {\n    background: \n      radial-gradient(ellipse at 30% 20%, hsl(28 85% 25% / 0.3) 0%, transparent 60%),\n      radial-gradient(ellipse at 70% 80%, hsl(15 85% 20% / 0.2) 0%, transparent 70%),\n      radial-gradient(ellipse at 10% 60%, hsl(45 75% 30% / 0.15) 0%, transparent 80%),\n      linear-gradient(180deg, \n        transparent 0%,\n        hsl(28 85% 15% / 0.1) 20%,\n        hsl(15 75% 20% / 0.2) 40%,\n        hsl(28 85% 15% / 0.1) 60%,\n        transparent 100%\n      );\n  }\n  \n  .wasteland-border {\n    @apply border-2 relative;\n    border-color: var(--wasteland-orange);\n    box-shadow: \n      0 0 0 1px var(--rusted-metal),\n      inset 0 0 20px hsl(28 85% 55% / 0.1),\n      0 0 30px hsl(28 85% 55% / 0.3);\n  }\n  \n  .wasteland-border::before {\n    content: '';\n    position: absolute;\n    top: -3px;\n    left: -3px;\n    right: -3px;\n    bottom: -3px;\n    background: linear-gradient(\n      45deg, \n      var(--wasteland-orange), \n      var(--rust-red), \n      var(--burnt-amber),\n      var(--wasteland-orange)\n    );\n    z-index: -1;\n    border-radius: inherit;\n    opacity: 0.6;\n    filter: blur(1px);\n  }\n  \n  .glitch-wasteland {\n    position: relative;\n    display: inline-block;\n  }\n  \n  .glitch-wasteland::before,\n  .glitch-wasteland::after {\n    content: attr(data-text);\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n  }\n  \n  .glitch-wasteland::before {\n    animation: wasteland-glitch 0.4s infinite;\n    color: var(--rust-red);\n    z-index: -1;\n    text-shadow: -2px 0 var(--rust-red);\n  }\n  \n  .glitch-wasteland::after {\n    animation: wasteland-glitch 0.4s infinite reverse;\n    color: var(--burnt-amber);\n    z-index: -2;\n    text-shadow: 2px 0 var(--burnt-amber);\n  }\n  \n  .parallax-layer {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    will-change: transform;\n  }\n  \n  .debris-field {\n    position: fixed;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    pointer-events: none;\n    z-index: 0;\n    background: \n      radial-gradient(1px 1px at 20px 30px, var(--ash-gray), transparent),\n      radial-gradient(1px 1px at 40px 70px, var(--rust-red), transparent),\n      radial-gradient(1px 1px at 90px 40px, var(--burnt-amber), transparent),\n      radial-gradient(1px 1px at 130px 80px, var(--ash-gray), transparent),\n      radial-gradient(1px 1px at 160px 30px, var(--rust-red), transparent);\n    background-repeat: repeat;\n    background-size: 200px 100px;\n    opacity: 0.3;\n    animation: drift 60s linear infinite;\n  }\n  \n  .atmospheric-haze {\n    position: fixed;\n    top: -100%;\n    left: -100%;\n    width: 300%;\n    height: 300%;\n    background: \n      radial-gradient(circle at 30% 40%, hsl(28 85% 25% / 0.1) 0%, transparent 50%),\n      radial-gradient(circle at 70% 60%, hsl(15 85% 20% / 0.08) 0%, transparent 60%);\n    pointer-events: none;\n    z-index: 1;\n    animation: atmospheric-drift 90s ease-in-out infinite;\n  }\n  \n  .rust-texture {\n    background: \n      repeating-linear-gradient(\n        45deg,\n        var(--rusted-metal) 0px,\n        var(--corroded-steel) 1px,\n        var(--rusted-metal) 2px,\n        var(--charred-earth) 3px\n      ),\n      repeating-linear-gradient(\n        -45deg,\n        transparent 0px,\n        var(--rust-red) 0.5px,\n        transparent 1px\n      );\n    background-blend-mode: multiply;\n  }\n  \n  .hologram-flicker {\n    animation: hologram-flicker 2s ease-in-out infinite alternate;\n    text-shadow: \n      0 0 5px currentColor,\n      0 0 10px currentColor,\n      0 0 15px currentColor;\n  }\n  \n  .radiation-glow {\n    box-shadow: \n      0 0 20px var(--toxic-yellow),\n      0 0 40px var(--radiation-green),\n      inset 0 0 20px hsl(85 65% 45% / 0.1);\n  }\n  \n  .pip-boy-screen {\n    background: \n      linear-gradient(\n        135deg,\n        var(--rusted-metal) 0%,\n        var(--corroded-steel) 100%\n      );\n    border: 2px solid var(--ash-gray);\n    box-shadow: \n      inset 0 0 20px hsl(28 85% 55% / 0.1),\n      0 0 15px hsl(28 85% 55% / 0.2);\n    position: relative;\n    overflow: hidden;\n  }\n  \n  .pip-boy-screen::before {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: -100%;\n    width: 100%;\n    height: 100%;\n    background: linear-gradient(\n      90deg,\n      transparent 0%,\n      hsl(28 85% 55% / 0.3) 50%,\n      transparent 100%\n    );\n    animation: pip-boy-scan 3s ease-in-out infinite;\n  }\n}\n\n@layer utilities {\n  .bg-wasteland-orange { background-color: var(--wasteland-orange); }\n  .bg-rust-red { background-color: var(--rust-red); }\n  .bg-burnt-amber { background-color: var(--burnt-amber); }\n  .bg-ash-gray { background-color: var(--ash-gray); }\n  .bg-blood-maroon { background-color: var(--blood-maroon); }\n  .bg-toxic-yellow { background-color: var(--toxic-yellow); }\n  .bg-radiation-green { background-color: var(--radiation-green); }\n  .bg-steel-blue { background-color: var(--steel-blue); }\n  .bg-dark-wasteland { background-color: var(--dark-wasteland); }\n  .bg-deeper-void { background-color: var(--deeper-void); }\n  .bg-rusted-metal { background-color: var(--rusted-metal); }\n  .bg-corroded-steel { background-color: var(--corroded-steel); }\n  .bg-charred-earth { background-color: var(--charred-earth); }\n  \n  .text-wasteland-orange { color: var(--wasteland-orange); }\n  .text-rust-red { color: var(--rust-red); }\n  .text-burnt-amber { color: var(--burnt-amber); }\n  .text-ash-gray { color: var(--ash-gray); }\n  .text-blood-maroon { color: var(--blood-maroon); }\n  .text-toxic-yellow { color: var(--toxic-yellow); }\n  .text-radiation-green { color: var(--radiation-green); }\n  .text-steel-blue { color: var(--steel-blue); }\n  \n  .border-wasteland-orange { border-color: var(--wasteland-orange); }\n  .border-rust-red { border-color: var(--rust-red); }\n  .border-burnt-amber { border-color: var(--burnt-amber); }\n  .border-ash-gray { border-color: var(--ash-gray); }\n  .border-blood-maroon { border-color: var(--blood-maroon); }\n  .border-toxic-yellow { border-color: var(--toxic-yellow); }\n  .border-radiation-green { border-color: var(--radiation-green); }\n  .border-steel-blue { border-color: var(--steel-blue); }\n  \n  .shadow-wasteland { box-shadow: 0 0 30px hsl(28 85% 55% / 0.6); }\n  .shadow-rust { box-shadow: 0 0 25px hsl(15 85% 45% / 0.5); }\n  .shadow-amber { box-shadow: 0 0 20px hsl(35 75% 45% / 0.4); }\n  .shadow-toxic { box-shadow: 0 0 35px hsl(45 95% 55% / 0.7); }\n  .shadow-radiation { box-shadow: 0 0 40px hsl(85 65% 45% / 0.6); }\n  \n  .font-display { font-family: var(--font-display); }\n  .font-title { font-family: var(--font-title); }\n  .font-body { font-family: var(--font-body); }\n  .font-mono { font-family: var(--font-mono); }\n}\n\n@keyframes wasteland-glitch {\n  0% { transform: translate(0); }\n  10% { transform: translate(-3px, 1px) skew(1deg); }\n  20% { transform: translate(2px, -2px) skew(-1deg); }\n  30% { transform: translate(-1px, 3px) skew(0.5deg); }\n  40% { transform: translate(3px, -1px) skew(-0.5deg); }\n  50% { transform: translate(-2px, 2px) skew(1deg); }\n  60% { transform: translate(1px, -3px) skew(-1deg); }\n  70% { transform: translate(-3px, 1px) skew(0.5deg); }\n  80% { transform: translate(2px, -2px) skew(-0.5deg); }\n  90% { transform: translate(-1px, 1px) skew(1deg); }\n  100% { transform: translate(0); }\n}\n\n@keyframes radiation-pulse {\n  0%, 100% { \n    opacity: 0.8; \n  }\n  50% { \n    opacity: 0.6; \n  }\n}\n\n@keyframes drift {\n  0% { transform: translateX(0) translateY(0); }\n  25% { transform: translateX(-10px) translateY(-5px); }\n  50% { transform: translateX(0) translateY(-10px); }\n  75% { transform: translateX(10px) translateY(-5px); }\n  100% { transform: translateX(0) translateY(0); }\n}\n\n@keyframes atmospheric-drift {\n  0% { transform: translateX(0) translateY(0) rotate(0deg); }\n  25% { transform: translateX(-20px) translateY(-10px) rotate(1deg); }\n  50% { transform: translateX(10px) translateY(-20px) rotate(-0.5deg); }\n  75% { transform: translateX(20px) translateY(-10px) rotate(1deg); }\n  100% { transform: translateX(0) translateY(0) rotate(0deg); }\n}\n\n@keyframes hologram-flicker {\n  0%, 100% { \n    opacity: 0.9; \n  }\n  50% { \n    opacity: 0.7; \n  }\n}\n\n@keyframes pip-boy-scan {\n  0% { left: -100%; }\n  50% { left: 100%; }\n  100% { left: 100%; }\n}\n\n@keyframes debris-fall {\n  0% { \n    transform: translateY(-100vh) translateX(0px) rotate(0deg);\n    opacity: 0;\n  }\n  10% { opacity: 1; }\n  90% { opacity: 1; }\n  100% { \n    transform: translateY(100vh) translateX(-50px) rotate(180deg);\n    opacity: 0;\n  }\n}\n\n@keyframes static-interference {\n  0%, 100% { \n    background-position: 0% 0%;\n    opacity: 0.1;\n  }\n  25% { \n    background-position: 100% 25%;\n    opacity: 0.2;\n  }\n  50% { \n    background-position: 0% 50%;\n    opacity: 0.05;\n  }\n  75% { \n    background-position: 100% 75%;\n    opacity: 0.15;\n  }\n}\n\n.animate-wasteland-glitch {\n  animation: wasteland-glitch 0.4s infinite;\n}\n\n.animate-radiation-pulse {\n  animation: radiation-pulse 3s ease-in-out infinite;\n}\n\n.animate-drift {\n  animation: drift 60s linear infinite;\n}\n\n.animate-atmospheric-drift {\n  animation: atmospheric-drift 90s ease-in-out infinite;\n}\n\n.animate-hologram-flicker {\n  animation: hologram-flicker 2s ease-in-out infinite alternate;\n}\n\n.animate-debris-fall {\n  animation: debris-fall 15s linear infinite;\n}\n\n.animate-static-interference {\n  animation: static-interference 8s ease-in-out infinite;\n}\n","size_bytes":13818},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/courier.ts":{"content":"import { spawn } from \"child_process\";\nimport { randomUUID } from \"crypto\";\nimport path from \"path\";\n\nexport interface EncodeResult {\n  frames: string;\n  frameCount: number;\n  crc32: string;\n  success: boolean;\n  error?: string;\n}\n\nexport interface DecodeResult {\n  txHex: string;\n  isValid: boolean;\n  crc32: string;\n  success: boolean;\n  error?: string;\n}\n\nexport interface BroadcastResult {\n  txHash: string;\n  success: boolean;\n  network: string;\n  error?: string;\n}\n\nexport class CourierService {\n  private pythonPath: string;\n  private courierCliPath: string;\n\n  constructor() {\n    // In production, these paths should be configurable via environment variables\n    this.pythonPath = process.env.PYTHON_PATH || \"python3\";\n    this.courierCliPath = process.env.COURIER_CLI_PATH || \"courier_cli.py\";\n  }\n\n  async encodeTx(txHex: string): Promise<EncodeResult> {\n    return new Promise((resolve) => {\n      const outputFile = `/tmp/frames_${randomUUID()}.txt`;\n      \n      const args = [\n        this.courierCliPath,\n        \"encode-tx\",\n        \"--hex\", txHex,\n        \"--output\", outputFile\n      ];\n\n      const process = spawn(this.pythonPath, args);\n      let stdout = \"\";\n      let stderr = \"\";\n\n      process.stdout.on(\"data\", (data) => {\n        stdout += data.toString();\n      });\n\n      process.stderr.on(\"data\", (data) => {\n        stderr += data.toString();\n      });\n\n      process.on(\"close\", async (code) => {\n        if (code !== 0) {\n          resolve({\n            frames: \"\",\n            frameCount: 0,\n            crc32: \"\",\n            success: false,\n            error: stderr || \"Failed to encode transaction\"\n          });\n          return;\n        }\n\n        try {\n          // Read the encoded frames from the output file\n          const fs = await import(\"fs\");\n          const frames = await fs.promises.readFile(outputFile, \"utf-8\");\n          \n          // Clean up temp file\n          await fs.promises.unlink(outputFile).catch(() => {});\n          \n          // Parse frame count and CRC32 from stdout\n          const frameCount = this.extractFrameCount(stdout);\n          const crc32 = this.extractCRC32(stdout);\n\n          resolve({\n            frames: frames.trim(),\n            frameCount,\n            crc32,\n            success: true\n          });\n        } catch (error) {\n          resolve({\n            frames: \"\",\n            frameCount: 0,\n            crc32: \"\",\n            success: false,\n            error: \"Failed to read encoded frames\"\n          });\n        }\n      });\n    });\n  }\n\n  async decodeFrames(frames: string): Promise<DecodeResult> {\n    return new Promise(async (resolve) => {\n      const inputFile = `/tmp/input_frames_${randomUUID()}.txt`;\n      const outputFile = `/tmp/recovered_${randomUUID()}.hex`;\n\n      try {\n        // Write frames to temporary input file\n        const fs = await import(\"fs\");\n        await fs.promises.writeFile(inputFile, frames);\n\n        const args = [\n          this.courierCliPath,\n          \"decode-frames\",\n          \"--input\", inputFile,\n          \"--output\", outputFile\n        ];\n\n        const process = spawn(this.pythonPath, args);\n        let stdout = \"\";\n        let stderr = \"\";\n\n        process.stdout.on(\"data\", (data) => {\n          stdout += data.toString();\n        });\n\n        process.stderr.on(\"data\", (data) => {\n          stderr += data.toString();\n        });\n\n        process.on(\"close\", async (code) => {\n          try {\n            // Clean up input file\n            await fs.promises.unlink(inputFile).catch(() => {});\n\n            if (code !== 0) {\n              resolve({\n                txHex: \"\",\n                isValid: false,\n                crc32: \"\",\n                success: false,\n                error: stderr || \"Failed to decode frames\"\n              });\n              return;\n            }\n\n            // Read the recovered transaction\n            const txHex = await fs.promises.readFile(outputFile, \"utf-8\");\n            \n            // Clean up output file\n            await fs.promises.unlink(outputFile).catch(() => {});\n\n            // Parse validation status and CRC32 from stdout\n            const isValid = this.extractValidationStatus(stdout);\n            const crc32 = this.extractCRC32(stdout);\n\n            resolve({\n              txHex: txHex.trim(),\n              isValid,\n              crc32,\n              success: true\n            });\n          } catch (error) {\n            resolve({\n              txHex: \"\",\n              isValid: false,\n              crc32: \"\",\n              success: false,\n              error: \"Failed to read decoded transaction\"\n            });\n          }\n        });\n      } catch (error) {\n        resolve({\n          txHex: \"\",\n          isValid: false,\n          crc32: \"\",\n          success: false,\n          error: \"Failed to write input frames\"\n        });\n      }\n    });\n  }\n\n  async broadcastTx(txHex: string, network: string = \"ethereum\"): Promise<BroadcastResult> {\n    return new Promise((resolve) => {\n      const rpcUrl = this.getRPCUrl(network);\n      if (!rpcUrl) {\n        resolve({\n          txHash: \"\",\n          success: false,\n          network,\n          error: `Unsupported network: ${network}`\n        });\n        return;\n      }\n\n      const toolName = network === \"bitcoin\" ? \"push-btc\" : \"push-eth\";\n      const args = [\n        this.courierCliPath,\n        toolName,\n        \"--hex\", txHex,\n        \"--rpc-url\", rpcUrl\n      ];\n\n      // Add Bitcoin-specific auth if needed\n      if (network === \"bitcoin\") {\n        const btcUser = process.env.BTC_RPC_USER;\n        const btcPassword = process.env.BTC_RPC_PASSWORD;\n        if (btcUser && btcPassword) {\n          args.push(\"--user\", btcUser, \"--password\", btcPassword);\n        }\n      }\n\n      const process = spawn(this.pythonPath, args);\n      let stdout = \"\";\n      let stderr = \"\";\n\n      process.stdout.on(\"data\", (data) => {\n        stdout += data.toString();\n      });\n\n      process.stderr.on(\"data\", (data) => {\n        stderr += data.toString();\n      });\n\n      process.on(\"close\", (code) => {\n        if (code !== 0) {\n          resolve({\n            txHash: \"\",\n            success: false,\n            network,\n            error: stderr || \"Failed to broadcast transaction\"\n          });\n          return;\n        }\n\n        // Extract transaction hash from stdout\n        const txHash = this.extractTxHash(stdout);\n\n        resolve({\n          txHash,\n          success: true,\n          network\n        });\n      });\n    });\n  }\n\n  async getStatus(): Promise<{ online: boolean; services: string[]; error?: string }> {\n    return new Promise((resolve) => {\n      const args = [this.courierCliPath, \"list-services\"];\n      const process = spawn(this.pythonPath, args);\n      let stdout = \"\";\n      let stderr = \"\";\n\n      process.stdout.on(\"data\", (data) => {\n        stdout += data.toString();\n      });\n\n      process.stderr.on(\"data\", (data) => {\n        stderr += data.toString();\n      });\n\n      process.on(\"close\", (code) => {\n        if (code !== 0) {\n          resolve({\n            online: false,\n            services: [],\n            error: stderr || \"Courier service unavailable\"\n          });\n          return;\n        }\n\n        const services = this.parseServices(stdout);\n        resolve({\n          online: true,\n          services\n        });\n      });\n    });\n  }\n\n  private getRPCUrl(network: string): string | null {\n    switch (network) {\n      case \"ethereum\":\n        return process.env.ETH_RPC_URL || \"https://mainnet.infura.io/v3/YOUR_PROJECT_ID\";\n      case \"base\":\n        return process.env.BASE_RPC_URL || \"https://mainnet.base.org\";\n      case \"bitcoin\":\n        return process.env.BTC_RPC_URL || \"https://bitcoin-rpc.example.com\";\n      default:\n        return null;\n    }\n  }\n\n  private extractFrameCount(output: string): number {\n    const match = output.match(/(\\d+)\\s+frames?/i);\n    return match ? parseInt(match[1]) : 0;\n  }\n\n  private extractCRC32(output: string): string {\n    const match = output.match(/CRC32[:\\s]+([a-fA-F0-9]{8})/i);\n    return match ? match[1] : \"\";\n  }\n\n  private extractValidationStatus(output: string): boolean {\n    return output.toLowerCase().includes(\"valid\") || output.toLowerCase().includes(\"success\");\n  }\n\n  private extractTxHash(output: string): string {\n    // Look for transaction hash patterns (0x followed by 64 hex characters)\n    const match = output.match(/(?:hash|txid)[:\\s]*(0x[a-fA-F0-9]{64})/i);\n    return match ? match[1] : \"\";\n  }\n\n  private parseServices(output: string): string[] {\n    const lines = output.split('\\n').filter(line => line.trim());\n    return lines.filter(line => \n      line.toLowerCase().includes('service') || \n      line.toLowerCase().includes('available') ||\n      line.toLowerCase().includes('online')\n    );\n  }\n}\n","size_bytes":8803},"server/services/websocket.ts":{"content":"import { WebSocketServer, WebSocket } from \"ws\";\nimport { storage } from \"../storage\";\n\ninterface WSMessage {\n  type: string;\n  data: any;\n  timestamp: number;\n}\n\ninterface ConnectedClient {\n  socket: WebSocket;\n  userId?: string;\n  allianceId?: string;\n  lastPing: number;\n}\n\nexport class WebSocketService {\n  private clients: Map<string, ConnectedClient> = new Map();\n  private pingInterval: NodeJS.Timeout;\n\n  constructor(private wss: WebSocketServer) {\n    this.setupEventHandlers();\n    this.startPingInterval();\n  }\n\n  private setupEventHandlers() {\n    this.wss.on(\"connection\", (socket: WebSocket) => {\n      const clientId = this.generateClientId();\n      \n      this.clients.set(clientId, {\n        socket,\n        lastPing: Date.now()\n      });\n\n      console.log(`WebSocket client connected: ${clientId}`);\n\n      socket.on(\"message\", (data) => {\n        this.handleMessage(clientId, data);\n      });\n\n      socket.on(\"close\", () => {\n        this.clients.delete(clientId);\n        console.log(`WebSocket client disconnected: ${clientId}`);\n      });\n\n      socket.on(\"error\", (error) => {\n        console.error(`WebSocket error for client ${clientId}:`, error);\n        this.clients.delete(clientId);\n      });\n\n      // Send welcome message\n      this.sendToClient(clientId, {\n        type: \"connected\",\n        data: { clientId },\n        timestamp: Date.now()\n      });\n    });\n  }\n\n  private startPingInterval() {\n    this.pingInterval = setInterval(() => {\n      const now = Date.now();\n      const timeout = 30000; // 30 seconds\n\n      for (const [clientId, client] of this.clients.entries()) {\n        if (now - client.lastPing > timeout) {\n          client.socket.terminate();\n          this.clients.delete(clientId);\n          console.log(`Client ${clientId} timed out`);\n        } else if (client.socket.readyState === WebSocket.OPEN) {\n          client.socket.ping();\n        }\n      }\n    }, 15000); // Check every 15 seconds\n  }\n\n  private handleMessage(clientId: string, data: any) {\n    try {\n      const message = JSON.parse(data.toString());\n      const client = this.clients.get(clientId);\n      \n      if (!client) return;\n\n      switch (message.type) {\n        case \"authenticate\":\n          this.handleAuthentication(clientId, message.data);\n          break;\n        case \"join_alliance\":\n          this.handleJoinAlliance(clientId, message.data);\n          break;\n        case \"ping\":\n          client.lastPing = Date.now();\n          this.sendToClient(clientId, {\n            type: \"pong\",\n            data: {},\n            timestamp: Date.now()\n          });\n          break;\n        default:\n          console.log(`Unknown message type: ${message.type}`);\n      }\n    } catch (error) {\n      console.error(`Error handling message from ${clientId}:`, error);\n    }\n  }\n\n  private handleAuthentication(clientId: string, data: { userId: string }) {\n    const client = this.clients.get(clientId);\n    if (!client) return;\n\n    client.userId = data.userId;\n    \n    // Get user's alliance if any\n    storage.getUserAlliance(data.userId).then(userAlliance => {\n      if (userAlliance && client) {\n        client.allianceId = userAlliance.alliance.id;\n      }\n    });\n\n    this.sendToClient(clientId, {\n      type: \"authenticated\",\n      data: { userId: data.userId },\n      timestamp: Date.now()\n    });\n  }\n\n  private handleJoinAlliance(clientId: string, data: { allianceId: string }) {\n    const client = this.clients.get(clientId);\n    if (!client) return;\n\n    client.allianceId = data.allianceId;\n    \n    this.sendToClient(clientId, {\n      type: \"alliance_joined\",\n      data: { allianceId: data.allianceId },\n      timestamp: Date.now()\n    });\n  }\n\n  private sendToClient(clientId: string, message: WSMessage) {\n    const client = this.clients.get(clientId);\n    if (client && client.socket.readyState === WebSocket.OPEN) {\n      client.socket.send(JSON.stringify(message));\n    }\n  }\n\n  private generateClientId(): string {\n    return `client_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  // Public methods for broadcasting game events\n  public broadcastMessage(message: any, senderId: string) {\n    const wsMessage: WSMessage = {\n      type: \"new_message\",\n      data: message,\n      timestamp: Date.now()\n    };\n\n    // Send to all clients in the same channel\n    for (const [clientId, client] of this.clients.entries()) {\n      if (client.socket.readyState === WebSocket.OPEN) {\n        // For global messages, send to everyone\n        if (message.channel === \"global\") {\n          client.socket.send(JSON.stringify(wsMessage));\n        }\n        // For alliance messages, send only to alliance members\n        else if (message.channel === \"alliance\" && client.allianceId === message.allianceId) {\n          client.socket.send(JSON.stringify(wsMessage));\n        }\n      }\n    }\n  }\n\n  public broadcastBattleUpdate(battle: any) {\n    const wsMessage: WSMessage = {\n      type: \"battle_update\",\n      data: battle,\n      timestamp: Date.now()\n    };\n\n    // Send to all authenticated clients\n    for (const [clientId, client] of this.clients.entries()) {\n      if (client.userId && client.socket.readyState === WebSocket.OPEN) {\n        client.socket.send(JSON.stringify(wsMessage));\n      }\n    }\n  }\n\n  public broadcastTerritoryUpdate(territory: any) {\n    const wsMessage: WSMessage = {\n      type: \"territory_update\",\n      data: territory,\n      timestamp: Date.now()\n    };\n\n    // Send to all authenticated clients\n    for (const [clientId, client] of this.clients.entries()) {\n      if (client.userId && client.socket.readyState === WebSocket.OPEN) {\n        client.socket.send(JSON.stringify(wsMessage));\n      }\n    }\n  }\n\n  public broadcastAllianceUpdate(alliance: any) {\n    const wsMessage: WSMessage = {\n      type: \"alliance_update\",\n      data: alliance,\n      timestamp: Date.now()\n    };\n\n    // Send to alliance members\n    for (const [clientId, client] of this.clients.entries()) {\n      if (client.allianceId === alliance.id && client.socket.readyState === WebSocket.OPEN) {\n        client.socket.send(JSON.stringify(wsMessage));\n      }\n    }\n  }\n\n  public notifyUserLevelUp(userId: string, newLevel: number) {\n    const wsMessage: WSMessage = {\n      type: \"level_up\",\n      data: { userId, newLevel },\n      timestamp: Date.now()\n    };\n\n    // Send to the specific user\n    for (const [clientId, client] of this.clients.entries()) {\n      if (client.userId === userId && client.socket.readyState === WebSocket.OPEN) {\n        client.socket.send(JSON.stringify(wsMessage));\n        break;\n      }\n    }\n  }\n\n  public getConnectedUsersCount(): number {\n    return Array.from(this.clients.values()).filter(client => client.userId).length;\n  }\n\n  public getAllianceMembers(allianceId: string): string[] {\n    return Array.from(this.clients.values())\n      .filter(client => client.allianceId === allianceId && client.userId)\n      .map(client => client.userId!);\n  }\n\n  public shutdown() {\n    if (this.pingInterval) {\n      clearInterval(this.pingInterval);\n    }\n\n    for (const [clientId, client] of this.clients.entries()) {\n      if (client.socket.readyState === WebSocket.OPEN) {\n        client.socket.close();\n      }\n    }\n\n    this.clients.clear();\n  }\n}\n\nexport function setupWebSocket(wss: WebSocketServer): WebSocketService {\n  return new WebSocketService(wss);\n}\n","size_bytes":7361},"client/src/components/alliance-card.tsx":{"content":"import { Users, MessageSquare } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\n\nexport default function AllianceCard() {\n  // Mock alliance data\n  const allianceData = {\n    name: \"WASTELAND\",\n    tag: \"WL\",\n    memberCount: 47,\n    userRole: \"MEMBER\",\n    territoryCount: 23,\n    rank: 3,\n  };\n\n  const handleAllianceComms = () => {\n    // TODO: Implement alliance communication interface\n    console.log(\"Opening alliance communications...\");\n  };\n\n  return (\n    <Card className=\"bg-card-bg border-border-gray terminal-border\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between text-xl text-cyber-blue\">\n          <span>ALLIANCE</span>\n          <Users className=\"w-5 h-5 text-toxic-green\" />\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"text-center mb-4\">\n          <div className=\"w-16 h-16 bg-toxic-green/20 border-2 border-toxic-green rounded-full mx-auto mb-3 flex items-center justify-center\">\n            <span className=\"text-2xl font-bold text-toxic-green\" data-testid=\"text-alliance-tag\">\n              {allianceData.tag}\n            </span>\n          </div>\n          <h4 className=\"text-lg font-bold text-toxic-green\" data-testid=\"text-alliance-name\">\n            {allianceData.name}\n          </h4>\n          <p className=\"text-sm text-gray-400\" data-testid=\"text-alliance-members\">\n            {allianceData.memberCount} survivors\n          </p>\n        </div>\n        \n        <div className=\"space-y-2 mb-4\">\n          <div className=\"flex justify-between text-sm\">\n            <span className=\"text-gray-400\">Your Role:</span>\n            <Badge className=\"bg-warning-orange/20 text-warning-orange border-warning-orange\" data-testid=\"text-user-role\">\n              {allianceData.userRole}\n            </Badge>\n          </div>\n          <div className=\"flex justify-between text-sm\">\n            <span className=\"text-gray-400\">Territory Control:</span>\n            <span className=\"text-cyber-blue\" data-testid=\"text-alliance-territories\">\n              {allianceData.territoryCount}\n            </span>\n          </div>\n          <div className=\"flex justify-between text-sm\">\n            <span className=\"text-gray-400\">Alliance Rank:</span>\n            <span className=\"text-toxic-green\" data-testid=\"text-alliance-rank\">\n              #{allianceData.rank}\n            </span>\n          </div>\n        </div>\n        \n        <Button \n          onClick={handleAllianceComms}\n          className=\"w-full px-4 py-2 bg-toxic-green/20 border border-toxic-green text-toxic-green hover:bg-toxic-green hover:text-black transition-all rounded font-semibold\"\n          data-testid=\"button-alliance-comms\"\n        >\n          <MessageSquare className=\"w-4 h-4 mr-2\" />\n          ALLIANCE COMMS\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2990},"client/src/components/atmospheric-effects.tsx":{"content":"import { useEffect, useState } from 'react';\n\nexport const AtmosphericEffects = () => {\n  return (\n    <>\n      {/* Debris field with floating particles */}\n      <div className=\"debris-field\" />\n      \n      {/* Atmospheric haze for depth */}\n      <div className=\"atmospheric-haze\" />\n      \n      {/* Dynamic dust storm effect */}\n      <DustStorm />\n      \n      {/* Radiation interference static */}\n      <RadiationStatic />\n    </>\n  );\n};\n\nconst DustStorm = () => {\n  const [particles, setParticles] = useState<Array<{\n    id: number;\n    x: number;\n    y: number;\n    size: number;\n    speed: number;\n    opacity: number;\n  }>>([]);\n\n  useEffect(() => {\n    const generateParticles = () => {\n      const newParticles = Array.from({ length: 15 }, (_, i) => ({\n        id: i,\n        x: Math.random() * 100,\n        y: Math.random() * 100,\n        size: Math.random() * 3 + 1,\n        speed: Math.random() * 2 + 1,\n        opacity: Math.random() * 0.3 + 0.1,\n      }));\n      setParticles(newParticles);\n    };\n\n    generateParticles();\n    const interval = setInterval(generateParticles, 30000);\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div className=\"fixed inset-0 pointer-events-none z-0\">\n      {particles.map((particle) => (\n        <div\n          key={particle.id}\n          className=\"absolute rounded-full bg-ash-gray animate-drift\"\n          style={{\n            left: `${particle.x}%`,\n            top: `${particle.y}%`,\n            width: `${particle.size}px`,\n            height: `${particle.size}px`,\n            opacity: particle.opacity,\n            animationDuration: `${particle.speed * 30}s`,\n            animationDelay: `${particle.id * 2}s`,\n          }}\n        />\n      ))}\n    </div>\n  );\n};\n\nconst RadiationStatic = () => {\n  return (\n    <div \n      className=\"fixed inset-0 pointer-events-none z-1 opacity-20\"\n      style={{\n        background: `\n          repeating-linear-gradient(\n            0deg,\n            transparent 0px,\n            transparent 1px,\n            hsl(28 85% 55% / 0.01) 1px,\n            hsl(28 85% 55% / 0.01) 2px\n          ),\n          repeating-linear-gradient(\n            90deg,\n            transparent 0px,\n            transparent 1px,\n            hsl(15 85% 45% / 0.005) 1px,\n            hsl(15 85% 45% / 0.005) 2px\n          )\n        `,\n        backgroundSize: '100px 100px, 50px 50px',\n        animation: 'static-interference 8s ease-in-out infinite'\n      }}\n    />\n  );\n};\n\n// Parallax background layers component\nexport const ParallaxBackground = () => {\n  const [scrollY, setScrollY] = useState(0);\n\n  useEffect(() => {\n    const handleScroll = () => setScrollY(window.scrollY);\n    window.addEventListener('scroll', handleScroll, { passive: true });\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []);\n\n  return (\n    <div className=\"fixed inset-0 pointer-events-none\">\n      {/* Far background - slow moving */}\n      <div\n        className=\"parallax-layer bg-wasteland-atmosphere opacity-30\"\n        style={{\n          transform: `translateY(${scrollY * 0.1}px) scale(1.1)`,\n        }}\n      />\n      \n      {/* Mid background - medium speed */}\n      <div\n        className=\"parallax-layer\"\n        style={{\n          background: `\n            radial-gradient(ellipse at 60% 30%, hsl(28 85% 20% / 0.2) 0%, transparent 60%),\n            radial-gradient(ellipse at 20% 80%, hsl(15 85% 25% / 0.15) 0%, transparent 70%)\n          `,\n          transform: `translateY(${scrollY * 0.3}px)`,\n        }}\n      />\n      \n      {/* Near foreground - faster */}\n      <div\n        className=\"parallax-layer opacity-20\"\n        style={{\n          background: `\n            radial-gradient(ellipse at 40% 60%, hsl(45 75% 30% / 0.1) 0%, transparent 50%)\n          `,\n          transform: `translateY(${scrollY * 0.6}px)`,\n        }}\n      />\n    </div>\n  );\n};\n\n// Terminal scan lines effect\nexport const ScanLines = () => {\n  return (\n    <div className=\"fixed inset-0 pointer-events-none z-10\">\n      <div\n        className=\"absolute inset-0\"\n        style={{\n          background: `\n            repeating-linear-gradient(\n              0deg,\n              transparent 0px,\n              transparent 2px,\n              hsl(28 85% 55% / 0.03) 2px,\n              hsl(28 85% 55% / 0.03) 4px\n            )\n          `,\n          backgroundSize: '100% 4px',\n          animation: 'drift 120s linear infinite'\n        }}\n      />\n    </div>\n  );\n};","size_bytes":4458},"client/src/components/battle-interface.tsx":{"content":"import { Trophy, X, Sword } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface Battle {\n  id: string;\n  opponent: string;\n  result: \"victory\" | \"defeat\";\n  xpGained: number;\n  timestamp: string;\n}\n\nexport default function BattleInterface() {\n  // Mock battle data\n  const recentBattles: Battle[] = [\n    {\n      id: \"1\",\n      opponent: \"GHOST-3301\",\n      result: \"victory\",\n      xpGained: 100,\n      timestamp: \"2 hours ago\"\n    },\n    {\n      id: \"2\", \n      opponent: \"VIPER-1337\",\n      result: \"defeat\",\n      xpGained: 25,\n      timestamp: \"5 hours ago\"\n    },\n    {\n      id: \"3\",\n      opponent: \"SHADOW-9999\",\n      result: \"victory\", \n      xpGained: 100,\n      timestamp: \"1 day ago\"\n    }\n  ];\n\n  const handleInitiateBattle = () => {\n    // TODO: Implement battle initiation logic\n    console.log(\"Initiating battle...\");\n  };\n\n  return (\n    <Card className=\"bg-card-bg border-border-gray terminal-border\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between text-xl text-cyber-blue\">\n          <div className=\"flex items-center\">\n            <Sword className=\"w-5 h-5 mr-2\" />\n            COMBAT PROTOCOL\n          </div>\n          <Button \n            onClick={handleInitiateBattle}\n            className=\"px-4 py-2 bg-danger-red/20 border border-danger-red text-danger-red hover:bg-danger-red hover:text-white transition-all rounded font-semibold\"\n            data-testid=\"button-initiate-battle\"\n          >\n            INITIATE BATTLE\n          </Button>\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        {/* Recent battles */}\n        <div className=\"space-y-3\">\n          {recentBattles.map((battle) => (\n            <div \n              key={battle.id}\n              className=\"flex items-center justify-between p-3 bg-darker-bg border border-border-gray rounded\"\n              data-testid={`battle-${battle.id}`}\n            >\n              <div className=\"flex items-center space-x-3\">\n                <div className={`w-8 h-8 border rounded flex items-center justify-center ${\n                  battle.result === 'victory' \n                    ? 'bg-toxic-green/20 border-toxic-green' \n                    : 'bg-danger-red/20 border-danger-red'\n                }`}>\n                  {battle.result === 'victory' ? (\n                    <Trophy className=\"w-4 h-4 text-toxic-green\" />\n                  ) : (\n                    <X className=\"w-4 h-4 text-danger-red\" />\n                  )}\n                </div>\n                <div>\n                  <div className=\"font-semibold text-sm\" data-testid={`battle-opponent-${battle.id}`}>\n                    vs {battle.opponent}\n                  </div>\n                  <div className=\"text-xs text-gray-400\" data-testid={`battle-timestamp-${battle.id}`}>\n                    {battle.timestamp}\n                  </div>\n                </div>\n              </div>\n              <div className=\"text-right\">\n                <Badge \n                  className={`text-sm font-semibold mb-1 ${\n                    battle.result === 'victory' \n                      ? 'bg-toxic-green/20 text-toxic-green border-toxic-green' \n                      : 'bg-danger-red/20 text-danger-red border-danger-red'\n                  }`}\n                  data-testid={`battle-result-${battle.id}`}\n                >\n                  {battle.result.toUpperCase()}\n                </Badge>\n                <div className=\"text-xs text-gray-400\" data-testid={`battle-xp-${battle.id}`}>\n                  +{battle.xpGained} XP\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {/* Battle stats summary */}\n        <div className=\"mt-6 p-3 bg-darker-bg border border-border-gray rounded\">\n          <h4 className=\"font-semibold text-sm text-cyber-blue mb-2\">COMBAT STATISTICS</h4>\n          <div className=\"grid grid-cols-3 gap-4 text-center text-xs\">\n            <div>\n              <div className=\"text-toxic-green font-bold\">24</div>\n              <div className=\"text-gray-400\">Victories</div>\n            </div>\n            <div>\n              <div className=\"text-danger-red font-bold\">7</div>\n              <div className=\"text-gray-400\">Defeats</div>\n            </div>\n            <div>\n              <div className=\"text-warning-orange font-bold\">2,650</div>\n              <div className=\"text-gray-400\">Total XP</div>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4637},"client/src/components/courier-interface.tsx":{"content":"import { Radio, Zap, Shield } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\n\nexport default function CourierInterface() {\n  return (\n    <Card className=\"bg-card-bg border-border-gray terminal-border\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between text-xl text-cyber-blue\">\n          <span>COURIER</span>\n          <div className=\"flex items-center space-x-2 text-sm text-warning-orange\">\n            <Radio className=\"w-4 h-4\" />\n            <span>Offline Ready</span>\n          </div>\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          <div className=\"p-3 bg-darker-bg border border-border-gray rounded\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <span className=\"text-sm font-semibold\">Handheld Terminal</span>\n              <div className=\"w-2 h-2 bg-toxic-green rounded-full animate-pulse\" />\n            </div>\n            <p className=\"text-xs text-gray-400 mb-3\">\n              Foundry Courier backend active. Ready for offline transactions.\n            </p>\n            <div className=\"grid grid-cols-2 gap-2\">\n              <Button \n                size=\"sm\"\n                className=\"px-3 py-2 bg-warning-orange/20 border border-warning-orange text-warning-orange text-xs rounded hover:bg-warning-orange hover:text-black transition-all\"\n                data-testid=\"button-encode-tx-quick\"\n              >\n                <Zap className=\"w-3 h-3 mr-1\" />\n                ENCODE TX\n              </Button>\n              <Button \n                size=\"sm\"\n                className=\"px-3 py-2 bg-toxic-green/20 border border-toxic-green text-toxic-green text-xs rounded hover:bg-toxic-green hover:text-black transition-all\"\n                data-testid=\"button-decode-frames-quick\"\n              >\n                <Shield className=\"w-3 h-3 mr-1\" />\n                DECODE FRAMES\n              </Button>\n            </div>\n          </div>\n          \n          <div className=\"text-xs text-gray-500 space-y-1\">\n            <div className=\"flex justify-between\">\n              <span>Supported channels:</span>\n              <span className=\"text-cyber-blue\">Radio, SMS, Mesh</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>Error correction:</span>\n              <span className=\"text-toxic-green\">CRC32 + Parity</span>\n            </div>\n            <div className=\"flex justify-between\">\n              <span>Status:</span>\n              <Badge className=\"bg-toxic-green/20 text-toxic-green border-toxic-green text-xs\">\n                OPERATIONAL\n              </Badge>\n            </div>\n          </div>\n          \n          <Link href=\"/handheld\">\n            <Button \n              className=\"w-full px-4 py-2 bg-cyber-blue/20 border border-cyber-blue text-cyber-blue hover:bg-cyber-blue hover:text-black transition-all rounded font-semibold text-sm\"\n              data-testid=\"button-launch-handheld-full\"\n            >\n              <Radio className=\"w-4 h-4 mr-2\" />\n              LAUNCH HANDHELD\n            </Button>\n          </Link>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3374},"client/src/components/darknet-continuum.tsx":{"content":"import { useState } from \"react\";\nimport { WastelandText, WastelandCard, WastelandButton } from \"./wasteland-ui\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Badge } from \"@/components/ui/badge\";\n\nconst CONTINUUM_DATA = {\n  title: \"ON-CHAIN RESILIENCE FIELD MANUAL\",\n  subtitle: \"DARKNET CONTINUUM PROTOCOLS\",\n  protocols: [\n    {\n      id: \"PRTCL1\",\n      name: \"BONE NET (BONET)\",\n      category: \"Mesh Networking\",\n      description: \"Create a decentralized, peer-to-peer network where devices connect directly to each other. Transactions are passed from device to device like whispers through a crowd. This method is slower but highly effective for moving signed transactions without a central internet connection.\"\n    },\n    {\n      id: \"PRTCL2\", \n      name: \"SIGNAL SCRIPT\",\n      category: \"SMS Transactions\",\n      description: \"Utilize existing cellular towers for basic communication. Transactions can be sent via plain-text SMS, containing a simple command, wallet address, and signature. This method requires no apps or browsers, relying only on a cell signal and a keypad.\"\n    },\n    {\n      id: \"PRTCL3\",\n      name: \"PHYSICAL HANDSHAKE (LEDGER)\",\n      category: \"Offline Hardware Transfer\", \n      description: \"Employ a physical-delivery method for transactions. One person signs a transaction, and another person physically carries the data to a location with an internet connection to broadcast it. This method turns transaction delivery into a form of spycraft.\"\n    },\n    {\n      id: \"PRTCL4\",\n      name: \"DATA RELIC\",\n      category: \"USB Sneakernet\",\n      description: \"Use a portable storage device as the data carrier. A signed transaction file is saved to a USB stick, physically moved to a device that has network access, and then broadcast to the blockchain.\"\n    },\n    {\n      id: \"PRTCL5\",\n      name: \"STATIC HAUL (LONG & SHORT)\",\n      category: \"Ham Radio Blockchain\",\n      description: \"Harness the power of amateur radio. If ham radio can transmit emails over long distances, it can transmit blockchain data, offering a resilient, cross-border method of communication that is immune to physical infrastructure cuts.\"\n    },\n    {\n      id: \"PRTCL6\",\n      name: \"GHOST MODE\", \n      category: \"Radio Broadcast\",\n      description: \"Leverage radio broadcasts to transmit transactions. A signed, compressed data packet is converted into radio waves and broadcast over the air. Anyone with the right receiver can capture, decode, and inject the transaction into the network, bypassing routers and DNS entirely.\"\n    },\n    {\n      id: \"PRTCL7\",\n      name: \"SKYCHAIN RELAY\",\n      category: \"Satellite Link\",\n      description: \"Broadcast transactions directly into space using a satellite dish. The satellite then relays the data back down to a receiving station connected to the blockchain network, completely bypassing all terrestrial infrastructure.\"\n    }\n  ],\n  coreDoctrine: \"The true essence of blockchain is independent of the internet; instead, the internet serves as a useful transport layer. If one route fails, a resilient network seeks another path. As long as data can be transferred, value can be transferred.\"\n};\n\nexport const DarknetContinuumRelic = () => {\n  const [selectedProtocol, setSelectedProtocol] = useState<number | null>(null);\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Relic Header */}\n      <WastelandCard variant=\"terminal\" className=\"p-6 relative overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-ash-gray/10 to-charred-earth/15\" />\n        <div className=\"relative\">\n          <div className=\"flex items-center gap-4 mb-4\">\n            <div className=\"w-16 h-16 bg-ash-gray/30 border-2 border-ash-gray rounded flex items-center justify-center\">\n              <span className=\"text-2xl opacity-70\">📡</span>\n            </div>\n            <div>\n              <WastelandText variant=\"title\" className=\"text-2xl text-ash-gray\">\n                DIGITAL RELIC RECOVERED\n              </WastelandText>\n              <WastelandText variant=\"terminal\" className=\"text-ash-gray/70\">\n                CLEARANCE LEVEL: OMEGA\n              </WastelandText>\n            </div>\n          </div>\n          \n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-xs font-mono\">\n            <div className=\"bg-charred-earth border border-ash-gray p-3\">\n              <div className=\"text-burnt-amber font-bold\">ORIGIN</div>\n              <div className=\"text-ash-gray\">PRE-COLLAPSE ARCHIVES</div>\n            </div>\n            <div className=\"bg-charred-earth border border-ash-gray p-3\">\n              <div className=\"text-burnt-amber font-bold\">STATUS</div>\n              <div className=\"text-ash-gray\">DECLASSIFIED</div>\n            </div>\n            <div className=\"bg-charred-earth border border-ash-gray p-3\">\n              <div className=\"text-burnt-amber font-bold\">PROTOCOLS</div>\n              <div className=\"text-ash-gray\">7 ACTIVE</div>\n            </div>\n          </div>\n        </div>\n      </WastelandCard>\n\n      {/* Manual Content */}\n      <WastelandCard variant=\"default\" className=\"p-6\">\n        <WastelandText variant=\"title\" className=\"text-3xl mb-2 text-center border-b-2 border-ash-gray pb-4\">\n          {CONTINUUM_DATA.title}\n        </WastelandText>\n        <WastelandText variant=\"subtitle\" className=\"text-lg text-center text-ash-gray/70 mb-6\">\n          {CONTINUUM_DATA.subtitle}\n        </WastelandText>\n\n        <WastelandText variant=\"body\" className=\"mb-8 text-ash-gray leading-relaxed\">\n          In the evolving digital economy, reliance on the traditional internet infrastructure poses risks. \n          In cases of power outages, cable damage, or grid failures, blockchain networks can endure by finding \n          alternative data transmission routes. This guide provides protocols to maintain transaction flow, \n          even when conventional networks fail.\n        </WastelandText>\n\n        {/* Protocol Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-8\">\n          {CONTINUUM_DATA.protocols.map((protocol, index) => (\n            <div\n              key={protocol.id}\n              className={`p-4 border-2 cursor-pointer transition-all duration-300 ${\n                selectedProtocol === index\n                  ? 'border-burnt-amber bg-charred-earth border-opacity-80'\n                  : 'border-ash-gray bg-charred-earth hover:border-ash-gray hover:border-opacity-80'\n              }`}\n              onClick={() => setSelectedProtocol(selectedProtocol === index ? null : index)}\n            >\n              <div className=\"flex items-center gap-3 mb-2\">\n                <Badge className=\"bg-wasteland-orange text-dark-wasteland font-mono text-xs\">\n                  {protocol.id}\n                </Badge>\n                <WastelandText variant=\"subtitle\" className=\"text-sm\">\n                  {protocol.name}\n                </WastelandText>\n              </div>\n              \n              <WastelandText variant=\"terminal\" className=\"text-xs text-steel-blue mb-2\">\n                {protocol.category}\n              </WastelandText>\n              \n              {selectedProtocol === index && (\n                <WastelandText variant=\"body\" className=\"text-sm text-ash-gray leading-relaxed\">\n                  {protocol.description}\n                </WastelandText>\n              )}\n            </div>\n          ))}\n        </div>\n\n        {/* Core Doctrine */}\n        <WastelandCard variant=\"default\" className=\"p-6 border-2 border-ash-gray bg-charred-earth\">\n          <WastelandText variant=\"subtitle\" className=\"mb-4 text-burnt-amber border-b border-ash-gray pb-2\">\n            CORE DOCTRINE\n          </WastelandText>\n          <WastelandText variant=\"body\" className=\"text-ash-gray leading-relaxed\">\n            {CONTINUUM_DATA.coreDoctrine}\n          </WastelandText>\n        </WastelandCard>\n      </WastelandCard>\n    </div>\n  );\n};\n\n// Terminal typewriter effect for PWA\nexport const useTypewriter = (text: string, speed: number = 50) => {\n  const [displayedText, setDisplayedText] = useState('');\n  const [isTyping, setIsTyping] = useState(false);\n\n  const startTyping = () => {\n    setIsTyping(true);\n    setDisplayedText('');\n    \n    let index = 0;\n    const timer = setInterval(() => {\n      if (index < text.length) {\n        setDisplayedText(text.slice(0, index + 1));\n        index++;\n      } else {\n        setIsTyping(false);\n        clearInterval(timer);\n      }\n    }, speed);\n    \n    return () => clearInterval(timer);\n  };\n\n  return { displayedText, isTyping, startTyping };\n};\n\nexport const getContinuumText = () => {\n  return `\n╔══════════════════════════════════════════════════════════════════╗\n║                  ON-CHAIN RESILIENCE FIELD MANUAL               ║\n║                     DARKNET CONTINUUM PROTOCOLS                 ║\n╚══════════════════════════════════════════════════════════════════╝\n\nCLASSIFICATION: OMEGA CLEARANCE\nSTATUS: DECLASSIFIED FOR FIELD OPERATIONS\n\nIn the evolving digital economy, reliance on traditional internet \ninfrastructure poses critical risks. When power grids fail, cables \nare severed, or networks are compromised, blockchain networks must \nendure by finding alternative data transmission routes.\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\nPROTOCOL 1: BONE NET (BONET)\n└─ Mesh Networking\n   Create decentralized, peer-to-peer networks where devices connect\n   directly. Transactions pass device-to-device like whispers through\n   a crowd. Slower but highly effective for moving signed transactions\n   without central internet infrastructure.\n\nPROTOCOL 2: SIGNAL SCRIPT  \n└─ SMS Transactions\n   Utilize cellular towers for basic communication. Transactions sent\n   via plain-text SMS containing simple commands, wallet addresses,\n   and signatures. Requires only cell signal and keypad - no apps.\n\nPROTOCOL 3: PHYSICAL HANDSHAKE (LEDGER)\n└─ Offline Hardware Transfer\n   Physical-delivery method for transactions. One person signs, another\n   physically carries data to internet-connected location for broadcast.\n   Transforms transaction delivery into digital spycraft.\n\nPROTOCOL 4: DATA RELIC\n└─ USB Sneakernet  \n   Portable storage as data carrier. Signed transaction files saved to\n   USB stick, physically moved to networked device, then broadcast to\n   blockchain. Ancient but effective.\n\nPROTOCOL 5: STATIC HAUL (LONG & SHORT)\n└─ Ham Radio Blockchain\n   Harness amateur radio power. If ham radio transmits emails across\n   vast distances, it can transmit blockchain data - resilient, \n   cross-border, immune to physical infrastructure cuts.\n\nPROTOCOL 6: GHOST MODE\n└─ Radio Broadcast\n   Leverage radio broadcasts to transmit transactions. Signed, compressed\n   data packets converted to radio waves and broadcast over air. Any\n   receiver can capture, decode, and inject into network.\n\nPROTOCOL 7: SKYCHAIN RELAY  \n└─ Satellite Link\n   Broadcast transactions directly into space using satellite dish.\n   Satellite relays data back to receiving station connected to blockchain\n   network, completely bypassing terrestrial infrastructure.\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\nCORE DOCTRINE:\nThe true essence of blockchain is independent of the internet.\nThe internet serves merely as a useful transport layer.\nIf one route fails, a resilient network seeks another path.\nAs long as data can be transferred, value can be transferred.\n\n━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\nREMEMBER: In the wasteland, adaptation is survival.\nThe blockchain endures. The network finds a way.\n\nEND TRANSMISSION\n`;\n};","size_bytes":12429},"client/src/components/leaderboard.tsx":{"content":"import { Crown } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface LeaderboardEntry {\n  rank: number;\n  callSign: string;\n  score: number;\n  isCurrentPlayer?: boolean;\n}\n\nexport default function Leaderboard() {\n  // Mock leaderboard data\n  const leaderboard: LeaderboardEntry[] = [\n    { rank: 1, callSign: \"APEX-0001\", score: 47291 },\n    { rank: 2, callSign: \"NOVA-2112\", score: 41867 },\n    { rank: 3, callSign: \"ZERO-7777\", score: 38203 },\n    { rank: 4, callSign: \"CYBER-KNIGHT\", score: 35420 },\n    { rank: 5, callSign: \"QUANTUM-X\", score: 32891 },\n  ];\n\n  const currentPlayer: LeaderboardEntry = {\n    rank: 47,\n    callSign: \"RUNNER-7749\",\n    score: 14750,\n    isCurrentPlayer: true\n  };\n\n  const getRankColor = (rank: number): string => {\n    if (rank === 1) return \"text-warning-orange\";\n    if (rank === 2) return \"text-gray-400\";\n    if (rank === 3) return \"text-orange-600\";\n    return \"text-gray-500\";\n  };\n\n  return (\n    <Card className=\"bg-card-bg border-border-gray terminal-border\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between text-xl text-cyber-blue\">\n          <span>LEADERBOARD</span>\n          <Crown className=\"w-5 h-5 text-warning-orange\" />\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-2\">\n          {leaderboard.map((player) => (\n            <div \n              key={player.rank}\n              className=\"flex items-center justify-between p-2 bg-darker-bg border border-border-gray rounded text-sm\"\n              data-testid={`leaderboard-rank-${player.rank}`}\n            >\n              <div className=\"flex items-center space-x-3\">\n                <span \n                  className={`font-bold w-6 ${getRankColor(player.rank)}`}\n                  data-testid={`rank-${player.rank}`}\n                >\n                  {player.rank}\n                </span>\n                <span \n                  className=\"text-gray-300\"\n                  data-testid={`callsign-${player.rank}`}\n                >\n                  {player.callSign}\n                </span>\n              </div>\n              <span \n                className=\"text-toxic-green font-semibold\"\n                data-testid={`score-${player.rank}`}\n              >\n                {player.score.toLocaleString()}\n              </span>\n            </div>\n          ))}\n          \n          <div className=\"border-t border-border-gray pt-2\">\n            <div className=\"flex items-center justify-between p-2 bg-cyber-blue/10 border border-cyber-blue rounded text-sm\">\n              <div className=\"flex items-center space-x-3\">\n                <span \n                  className=\"text-cyber-blue font-bold w-6\"\n                  data-testid=\"current-player-rank\"\n                >\n                  {currentPlayer.rank}\n                </span>\n                <span \n                  className=\"text-cyber-blue\"\n                  data-testid=\"current-player-callsign\"\n                >\n                  {currentPlayer.callSign}\n                </span>\n                <Badge className=\"bg-cyber-blue/20 text-cyber-blue border-cyber-blue text-xs\">\n                  YOU\n                </Badge>\n              </div>\n              <span \n                className=\"text-cyber-blue font-semibold\"\n                data-testid=\"current-player-score\"\n              >\n                {currentPlayer.score.toLocaleString()}\n              </span>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3623},"client/src/components/messaging-interface.tsx":{"content":"import { useState } from \"react\";\nimport { Wifi, Send } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\n\ninterface Message {\n  id: string;\n  sender: string;\n  content: string;\n  timestamp: string;\n  channel: \"global\" | \"alliance\";\n}\n\nexport default function MessagingInterface() {\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [isOnCooldown, setIsOnCooldown] = useState(false);\n  \n  // Mock messaging data\n  const [messages] = useState<Message[]>([\n    {\n      id: \"1\",\n      sender: \"GHOST-3301\",\n      content: \"Enemy alliance spotted in sector 7. Moving to intercept.\",\n      timestamp: \"3m ago\",\n      channel: \"global\"\n    },\n    {\n      id: \"2\", \n      sender: \"VIPER-1337\",\n      content: \"Territory claim successful. Coordinates locked in.\",\n      timestamp: \"7m ago\",\n      channel: \"global\"\n    },\n    {\n      id: \"3\",\n      sender: \"SHADOW-9999\", \n      content: \"Need backup at waypoint Alpha. Under heavy fire.\",\n      timestamp: \"12m ago\",\n      channel: \"alliance\"\n    }\n  ]);\n\n  const messagingStats = {\n    nextCost: \"0.0011 ETH\",\n    cooldown: \"45s\",\n    messageCount: 12\n  };\n\n  const handleSendMessage = () => {\n    if (!newMessage.trim() || isOnCooldown) return;\n    \n    // TODO: Implement on-chain messaging with anti-spam logic\n    console.log(\"Sending message:\", newMessage);\n    setNewMessage(\"\");\n    setIsOnCooldown(true);\n    \n    // Simulate cooldown\n    setTimeout(() => setIsOnCooldown(false), 60000);\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  return (\n    <Card className=\"bg-card-bg border-border-gray terminal-border\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between text-xl text-cyber-blue\">\n          <span>COMMS</span>\n          <div className=\"flex items-center space-x-2 text-sm text-gray-400\">\n            <Wifi className=\"w-4 h-4\" />\n            <span>On-Chain</span>\n          </div>\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        {/* Message history */}\n        <ScrollArea className=\"h-48 mb-4\" data-testid=\"message-history\">\n          <div className=\"space-y-3\">\n            {messages.map((message) => (\n              <div \n                key={message.id}\n                className=\"p-3 bg-darker-bg border border-border-gray rounded text-sm\"\n                data-testid={`message-${message.id}`}\n              >\n                <div className=\"flex items-center justify-between mb-1\">\n                  <span \n                    className={`font-semibold ${\n                      message.channel === 'alliance' ? 'text-toxic-green' : 'text-cyber-blue'\n                    }`}\n                    data-testid={`message-sender-${message.id}`}\n                  >\n                    {message.sender}\n                  </span>\n                  <span className=\"text-xs text-gray-500\" data-testid={`message-timestamp-${message.id}`}>\n                    {message.timestamp}\n                  </span>\n                </div>\n                <p className=\"text-gray-300\" data-testid={`message-content-${message.id}`}>\n                  {message.content}\n                </p>\n              </div>\n            ))}\n          </div>\n        </ScrollArea>\n        \n        {/* Message input */}\n        <div className=\"space-y-3\">\n          <div className=\"flex items-center justify-between text-xs text-gray-400\">\n            <span>\n              Next msg cost: <span className=\"text-warning-orange\" data-testid=\"text-next-cost\">\n                {messagingStats.nextCost}\n              </span>\n            </span>\n            <span>\n              Cooldown: <span className={`${isOnCooldown ? 'text-danger-red' : 'text-gray-400'}`} data-testid=\"text-cooldown\">\n                {isOnCooldown ? messagingStats.cooldown : \"Ready\"}\n              </span>\n            </span>\n          </div>\n          <div className=\"flex space-x-2\">\n            <Input \n              type=\"text\" \n              placeholder=\"Enter message...\" \n              value={newMessage}\n              onChange={(e) => setNewMessage(e.target.value)}\n              onKeyPress={handleKeyPress}\n              className=\"flex-1 bg-darker-bg border-border-gray text-white placeholder-gray-500 focus:border-cyber-blue\"\n              disabled={isOnCooldown}\n              data-testid=\"input-message\"\n            />\n            <Button \n              onClick={handleSendMessage}\n              disabled={!newMessage.trim() || isOnCooldown}\n              className=\"px-4 py-2 bg-cyber-blue/20 border border-cyber-blue text-cyber-blue hover:bg-cyber-blue hover:text-black transition-all rounded font-semibold\"\n              data-testid=\"button-send-message\"\n            >\n              <Send className=\"w-4 h-4\" />\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5113},"client/src/components/player-status.tsx":{"content":"import { User } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\n\nexport default function PlayerStatus() {\n  // Mock player data - in real app, this would come from game state\n  const playerData = {\n    callSign: \"RUNNER-7749\",\n    level: 12,\n    xp: 14750,\n    xpToNext: 1250,\n    xpForNextLevel: 16000,\n    winRate: 78,\n    reputation: 2847,\n  };\n\n  const xpProgress = ((playerData.xpToNext / (playerData.xpForNextLevel - playerData.xp + playerData.xpToNext)) * 100);\n\n  return (\n    <Card className=\"bg-card-bg border-border-gray terminal-border\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between text-xl text-cyber-blue\">\n          <span>SURVIVOR STATUS</span>\n          <div className=\"flex items-center space-x-2\">\n            <User className=\"w-5 h-5 text-toxic-green\" />\n            <span className=\"text-toxic-green font-semibold\" data-testid=\"text-call-sign\">\n              {playerData.callSign}\n            </span>\n          </div>\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 mb-6\">\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-warning-orange\" data-testid=\"text-player-level\">\n              {playerData.level}\n            </div>\n            <div className=\"text-xs text-gray-400\">LEVEL</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-cyber-blue\" data-testid=\"text-player-xp\">\n              {playerData.xp.toLocaleString()}\n            </div>\n            <div className=\"text-xs text-gray-400\">XP</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-toxic-green\" data-testid=\"text-player-winrate\">\n              {playerData.winRate}%\n            </div>\n            <div className=\"text-xs text-gray-400\">WIN RATE</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-2xl font-bold text-danger-red\" data-testid=\"text-player-reputation\">\n              {playerData.reputation.toLocaleString()}\n            </div>\n            <div className=\"text-xs text-gray-400\">REPUTATION</div>\n          </div>\n        </div>\n        \n        {/* XP Progress bar */}\n        <div className=\"mb-4\">\n          <div className=\"flex justify-between text-sm mb-2\">\n            <span className=\"text-gray-400\">XP TO NEXT LEVEL</span>\n            <span className=\"text-cyber-blue\" data-testid=\"text-xp-to-next\">\n              {playerData.xpToNext.toLocaleString()} XP\n            </span>\n          </div>\n          <Progress \n            value={xpProgress} \n            className=\"w-full bg-border-gray h-2 rounded-full\"\n            data-testid=\"progress-xp\"\n          />\n          <div className=\"flex justify-between text-xs text-gray-500 mt-1\">\n            <span>Level {playerData.level}</span>\n            <span>Level {playerData.level + 1}</span>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3148},"client/src/components/realistic-wasteland.tsx":{"content":"import { useState } from \"react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card } from \"@/components/ui/card\";\n\n// Realistic Wasteland Components - No cartoon aesthetics\nexport const RealisticWastelandCard = ({ children, className = \"\", variant = \"default\" }: {\n  children: React.ReactNode;\n  className?: string;\n  variant?: \"default\" | \"dark\" | \"metal\";\n}) => {\n  const baseClasses = \"border border-neutral-600 bg-neutral-900/95 backdrop-blur-sm\";\n  const variants = {\n    default: \"border-neutral-700 bg-neutral-800/90\",\n    dark: \"border-neutral-800 bg-black/95\",\n    metal: \"border-neutral-600 bg-neutral-900/95 shadow-lg\"\n  };\n  \n  return (\n    <Card className={`${baseClasses} ${variants[variant]} ${className}`}>\n      {children}\n    </Card>\n  );\n};\n\nexport const RealisticText = ({ children, className = \"\", variant = \"body\" }: {\n  children: React.ReactNode;\n  className?: string;\n  variant?: \"title\" | \"subtitle\" | \"body\" | \"terminal\" | \"caption\";\n}) => {\n  const variants = {\n    title: \"text-2xl font-bold text-neutral-100 tracking-tight\",\n    subtitle: \"text-lg font-semibold text-neutral-200\",\n    body: \"text-sm text-neutral-300\",\n    terminal: \"text-xs font-mono text-neutral-400 uppercase tracking-wider\",\n    caption: \"text-xs text-neutral-500\"\n  };\n  \n  return <div className={`${variants[variant]} ${className}`}>{children}</div>;\n};\n\nexport const RealisticButton = ({ children, className = \"\", variant = \"primary\", size = \"md\", ...props }: {\n  children: React.ReactNode;\n  className?: string;\n  variant?: \"primary\" | \"secondary\" | \"danger\" | \"ghost\";\n  size?: \"sm\" | \"md\" | \"lg\";\n} & React.ButtonHTMLAttributes<HTMLButtonElement>) => {\n  const variants = {\n    primary: \"bg-neutral-700 hover:bg-neutral-600 text-neutral-100 border-neutral-600\",\n    secondary: \"bg-neutral-800 hover:bg-neutral-700 text-neutral-200 border-neutral-700\",\n    danger: \"bg-red-900/80 hover:bg-red-800/80 text-red-100 border-red-800\",\n    ghost: \"bg-transparent hover:bg-neutral-800/50 text-neutral-300 border-neutral-700\"\n  };\n  \n  const sizes = {\n    sm: \"px-3 py-1.5 text-xs\",\n    md: \"px-4 py-2 text-sm\",\n    lg: \"px-6 py-3 text-base\"\n  };\n  \n  return (\n    <Button \n      className={`border transition-colors duration-200 ${variants[variant]} ${sizes[size]} ${className}`} \n      {...props}\n    >\n      {children}\n    </Button>\n  );\n};\n\n// Realistic Territory Map\nexport const RealisticTerritoryMap = () => {\n  const territories = Array.from({ length: 64 }, (_, i) => {\n    const x = i % 8;\n    const y = Math.floor(i / 8);\n    const isEmpty = Math.random() > 0.6;\n    const isOwned = !isEmpty && Math.random() > 0.7;\n    const isAlliance = !isEmpty && !isOwned && Math.random() > 0.8;\n    const isEnemy = !isEmpty && !isOwned && !isAlliance && Math.random() > 0.5;\n    \n    return { x, y, isEmpty, isOwned, isAlliance, isEnemy };\n  });\n\n  return (\n    <RealisticWastelandCard variant=\"dark\" className=\"p-6\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <RealisticText variant=\"subtitle\">Territory Control</RealisticText>\n        <div className=\"flex gap-4 text-xs\">\n          <div className=\"flex items-center gap-1\">\n            <div className=\"w-3 h-3 bg-emerald-700 border border-emerald-600\"></div>\n            <span className=\"text-neutral-400\">Controlled</span>\n          </div>\n          <div className=\"flex items-center gap-1\">\n            <div className=\"w-3 h-3 bg-blue-700 border border-blue-600\"></div>\n            <span className=\"text-neutral-400\">Allied</span>\n          </div>\n          <div className=\"flex items-center gap-1\">\n            <div className=\"w-3 h-3 bg-red-700 border border-red-600\"></div>\n            <span className=\"text-neutral-400\">Hostile</span>\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"grid grid-cols-8 gap-1 mb-4\">\n        {territories.map((territory, i) => (\n          <button\n            key={i}\n            onClick={() => console.log('Territory action:', territory)}\n            className={`\n              aspect-square text-xs border transition-colors duration-200 relative\n              ${territory.isEmpty ? 'bg-neutral-800 border-neutral-700 hover:border-neutral-600' :\n                territory.isOwned ? 'bg-emerald-800 border-emerald-600' :\n                territory.isAlliance ? 'bg-blue-800 border-blue-600' :\n                territory.isEnemy ? 'bg-red-800 border-red-600' :\n                'bg-amber-800 border-amber-600'}\n            `}\n          >\n            {!territory.isEmpty && (\n              <div className=\"absolute inset-0 flex items-center justify-center text-[8px] font-mono text-neutral-200\">\n                {territory.isOwned ? '●' : territory.isAlliance ? '◆' : territory.isEnemy ? '▲' : '◇'}\n              </div>\n            )}\n          </button>\n        ))}\n      </div>\n      \n      <div className=\"grid grid-cols-2 gap-3\">\n        <RealisticButton variant=\"primary\" size=\"sm\">\n          Claim Territory\n        </RealisticButton>\n        <RealisticButton variant=\"secondary\" size=\"sm\">\n          View Details\n        </RealisticButton>\n      </div>\n    </RealisticWastelandCard>\n  );\n};\n\n// Realistic Player Status\nexport const RealisticPlayerStatus = () => {\n  return (\n    <RealisticWastelandCard variant=\"default\" className=\"p-6\">\n      <RealisticText variant=\"subtitle\" className=\"mb-4\">Survivor Status</RealisticText>\n      \n      <div className=\"space-y-4\">\n        <div className=\"flex justify-between items-center\">\n          <RealisticText variant=\"body\">CallSign</RealisticText>\n          <RealisticText variant=\"body\" className=\"font-mono text-neutral-100\">GHOST_PROTOCOL</RealisticText>\n        </div>\n        \n        <div className=\"space-y-2\">\n          <div className=\"flex justify-between\">\n            <RealisticText variant=\"caption\">Experience</RealisticText>\n            <RealisticText variant=\"caption\">2,847 XP</RealisticText>\n          </div>\n          <div className=\"w-full bg-neutral-800 h-2 rounded-none\">\n            <div className=\"bg-neutral-500 h-2 rounded-none\" style={{width: '68%'}}></div>\n          </div>\n        </div>\n        \n        <div className=\"grid grid-cols-3 gap-4 pt-2 border-t border-neutral-700\">\n          <div className=\"text-center\">\n            <RealisticText variant=\"body\" className=\"text-neutral-100\">12</RealisticText>\n            <RealisticText variant=\"caption\">Territories</RealisticText>\n          </div>\n          <div className=\"text-center\">\n            <RealisticText variant=\"body\" className=\"text-neutral-100\">8</RealisticText>\n            <RealisticText variant=\"caption\">Victories</RealisticText>\n          </div>\n          <div className=\"text-center\">\n            <RealisticText variant=\"body\" className=\"text-neutral-100\">45</RealisticText>\n            <RealisticText variant=\"caption\">Rank</RealisticText>\n          </div>\n        </div>\n      </div>\n    </RealisticWastelandCard>\n  );\n};\n\n// Realistic Battle Interface with Aggregate Power System\nexport const RealisticBattleInterface = () => {\n  const [selectedOpponent, setSelectedOpponent] = useState<string | null>(null);\n  const [battlePowerData, setBattlePowerData] = useState<any>(null);\n\n  const activeBattles = [\n    { \n      id: \"battle_001\", \n      opponent: \"WastelandKing\", \n      status: \"ENGAGING\",\n      playerPower: 2450,\n      opponentPower: 2380,\n      allianceBonus: 450,\n      territoryBonus: 120,\n      powerDiff: 70\n    },\n    { \n      id: \"battle_002\", \n      opponent: \"Raider_X\", \n      status: \"VICTORY\",\n      playerPower: 1980,\n      opponentPower: 1650,\n      allianceBonus: 320,\n      territoryBonus: 80,\n      powerDiff: 330\n    },\n    { \n      id: \"battle_003\", \n      opponent: \"Enclave_Unit\", \n      status: \"PENDING\",\n      playerPower: 2100,\n      opponentPower: 2850,\n      allianceBonus: 200,\n      territoryBonus: 60,\n      powerDiff: -750\n    }\n  ];\n\n  const initiateBattle = async (targetId: string) => {\n    try {\n      console.log(`Initiating strategic battle against ${targetId}`);\n      // This would normally call the new /api/battles/:id/resolve endpoint\n    } catch (error) {\n      console.error(\"Battle initiation failed:\", error);\n    }\n  };\n\n  return (\n    <RealisticWastelandCard variant=\"default\" className=\"p-6\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <RealisticText variant=\"subtitle\">Combat Operations</RealisticText>\n        <Badge className=\"bg-red-900 text-red-100 border-red-800\">\n          {activeBattles.filter(b => b.status !== \"VICTORY\").length} Active\n        </Badge>\n      </div>\n      \n      <div className=\"space-y-4\">\n        {/* Power Calculation Info */}\n        <div className=\"bg-neutral-900/50 border border-neutral-700 p-3 rounded\">\n          <RealisticText variant=\"caption\" className=\"text-amber-400 mb-2\">\n            DETERMINISTIC COMBAT SYSTEM\n          </RealisticText>\n          <RealisticText variant=\"caption\" className=\"text-neutral-400 leading-relaxed\">\n            Higher aggregate power always wins. No randomness. Victory = Individual (40%) + Alliance Sum (35%) + Territory Holdings (15%) + Strategic Position (10%)\n          </RealisticText>\n        </div>\n\n        <div className=\"grid grid-cols-2 gap-3\">\n          <RealisticButton \n            variant=\"danger\" \n            size=\"sm\"\n            onClick={() => initiateBattle(\"random_target\")}\n            data-testid=\"button-initiate-attack\"\n          >\n            Initiate Attack\n          </RealisticButton>\n          <RealisticButton variant=\"secondary\" size=\"sm\">\n            Defensive Position\n          </RealisticButton>\n        </div>\n        \n        <div className=\"space-y-2\">\n          {activeBattles.map((battle) => (\n            <div \n              key={battle.id}\n              className={`p-3 border rounded cursor-pointer transition-all ${\n                battle.status === \"ENGAGING\" ? \"bg-red-900/20 border-red-800/50\" :\n                battle.status === \"VICTORY\" ? \"bg-emerald-900/20 border-emerald-800/50\" :\n                \"bg-neutral-800 border-neutral-700\"\n              }`}\n              onClick={() => setSelectedOpponent(selectedOpponent === battle.id ? null : battle.id)}\n              data-testid={`battle-${battle.id}`}\n            >\n              <div className=\"flex justify-between items-center\">\n                <div>\n                  <RealisticText \n                    variant=\"body\" \n                    className={\n                      battle.status === \"ENGAGING\" ? \"text-red-200\" :\n                      battle.status === \"VICTORY\" ? \"text-emerald-200\" :\n                      \"text-neutral-200\"\n                    }\n                  >\n                    vs {battle.opponent}\n                  </RealisticText>\n                  <div className=\"flex items-center gap-3 mt-1\">\n                    <RealisticText variant=\"caption\" className=\"text-neutral-400\">\n                      Power: {battle.playerPower} vs {battle.opponentPower}\n                    </RealisticText>\n                    <RealisticText \n                      variant=\"caption\" \n                      className={battle.powerDiff > 0 ? \"text-emerald-400\" : \"text-red-400\"}\n                    >\n                      ({battle.powerDiff > 0 ? \"+\" : \"\"}{battle.powerDiff})\n                    </RealisticText>\n                  </div>\n                </div>\n                <div className=\"text-right\">\n                  <RealisticText \n                    variant=\"caption\" \n                    className={\n                      battle.status === \"ENGAGING\" ? \"text-amber-300\" :\n                      battle.status === \"VICTORY\" ? \"text-emerald-300\" :\n                      \"text-neutral-300\"\n                    }\n                  >\n                    {battle.status}\n                  </RealisticText>\n                </div>\n              </div>\n              \n              {selectedOpponent === battle.id && (\n                <div className=\"mt-3 pt-3 border-t border-neutral-600 space-y-2\">\n                  <RealisticText variant=\"caption\" className=\"text-amber-400\">\n                    POWER BREAKDOWN:\n                  </RealisticText>\n                  <div className=\"grid grid-cols-2 gap-2 text-xs\">\n                    <div>\n                      <RealisticText variant=\"caption\" className=\"text-neutral-500\">\n                        Individual: {battle.playerPower - battle.allianceBonus - battle.territoryBonus}\n                      </RealisticText>\n                      <RealisticText variant=\"caption\" className=\"text-neutral-500\">\n                        Alliance: +{battle.allianceBonus}\n                      </RealisticText>\n                    </div>\n                    <div>\n                      <RealisticText variant=\"caption\" className=\"text-neutral-500\">\n                        Territory: +{battle.territoryBonus}\n                      </RealisticText>\n                      <RealisticText variant=\"caption\" className=\"text-neutral-500\">\n                        Strategic: +{battle.playerPower - (battle.playerPower - battle.allianceBonus - battle.territoryBonus) - battle.allianceBonus - battle.territoryBonus}\n                      </RealisticText>\n                    </div>\n                  </div>\n                  {battle.status === \"PENDING\" && (\n                    <RealisticButton \n                      variant=\"danger\" \n                      size=\"sm\" \n                      className=\"w-full mt-2\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        initiateBattle(battle.opponent);\n                      }}\n                    >\n                      Resolve Battle\n                    </RealisticButton>\n                  )}\n                </div>\n              )}\n            </div>\n          ))}\n        </div>\n      </div>\n    </RealisticWastelandCard>\n  );\n};\n\n// Realistic Communications\nexport const RealisticCommunications = () => {\n  return (\n    <RealisticWastelandCard variant=\"dark\" className=\"p-6\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <RealisticText variant=\"subtitle\">Communications</RealisticText>\n        <div className=\"w-2 h-2 bg-emerald-500 rounded-full animate-pulse\"></div>\n      </div>\n      \n      <div className=\"space-y-3\">\n        <div className=\"h-32 bg-black border border-neutral-700 p-3 overflow-y-auto font-mono text-xs text-neutral-300 space-y-1\">\n          <div><span className=\"text-blue-400\">[Brotherhood]</span> Patrol route delta secured</div>\n          <div><span className=\"text-red-400\">[Raider_Gang]</span> Under heavy fire, need backup</div>\n          <div><span className=\"text-amber-400\">[Merchant_Guild]</span> Trade convoy departing 0800</div>\n          <div><span className=\"text-emerald-400\">[System]</span> Network status: OPERATIONAL</div>\n        </div>\n        \n        <div className=\"grid grid-cols-2 gap-3\">\n          <RealisticButton variant=\"primary\" size=\"sm\">\n            Send Message\n          </RealisticButton>\n          <RealisticButton variant=\"ghost\" size=\"sm\">\n            Scan Frequencies\n          </RealisticButton>\n        </div>\n      </div>\n    </RealisticWastelandCard>\n  );\n};\n\n// Realistic Leaderboard\nexport const RealisticLeaderboard = () => {\n  const leaders = [\n    { callsign: 'APEX_PREDATOR', power: 3847, territories: 8, status: 'online' },\n    { callsign: 'GHOST_PROTOCOL', power: 3692, territories: 12, status: 'active' },\n    { callsign: 'IRON_MAIDEN', power: 3534, territories: 6, status: 'away' },\n    { callsign: 'VOID_HUNTER', power: 3421, territories: 15, status: 'online' },\n    { callsign: 'STEEL_PHANTOM', power: 3298, territories: 4, status: 'offline' }\n  ];\n\n  return (\n    <RealisticWastelandCard variant=\"default\" className=\"p-6\">\n      <RealisticText variant=\"subtitle\" className=\"mb-4\">Regional Leaders</RealisticText>\n      \n      <div className=\"space-y-2\">\n        {leaders.map((leader, index) => (\n          <div key={leader.callsign} className=\"flex items-center justify-between p-3 bg-neutral-800/50 border border-neutral-700\">\n            <div className=\"flex items-center gap-3\">\n              <div className={`w-6 h-6 flex items-center justify-center text-xs font-bold border ${\n                index === 0 ? 'bg-amber-800 border-amber-600 text-amber-100' :\n                index === 1 ? 'bg-neutral-600 border-neutral-500 text-neutral-100' :\n                index === 2 ? 'bg-orange-800 border-orange-600 text-orange-100' :\n                'bg-neutral-700 border-neutral-600 text-neutral-200'\n              }`}>\n                {index + 1}\n              </div>\n              <div>\n                <RealisticText variant=\"body\" className=\"text-neutral-100 font-mono\">{leader.callsign}</RealisticText>\n                <div className=\"flex items-center gap-2\">\n                  <div className={`w-2 h-2 rounded-full ${\n                    leader.status === 'online' ? 'bg-emerald-500' :\n                    leader.status === 'active' ? 'bg-amber-500' :\n                    leader.status === 'away' ? 'bg-orange-500' : 'bg-neutral-600'\n                  }`}></div>\n                  <RealisticText variant=\"caption\">{leader.status}</RealisticText>\n                </div>\n              </div>\n            </div>\n            <div className=\"text-right\">\n              <RealisticText variant=\"body\" className=\"text-neutral-200\">{leader.power.toLocaleString()}</RealisticText>\n              <RealisticText variant=\"caption\">{leader.territories} zones</RealisticText>\n            </div>\n          </div>\n        ))}\n      </div>\n    </RealisticWastelandCard>\n  );\n};","size_bytes":17640},"client/src/components/scan-line.tsx":{"content":"export default function ScanLine() {\n  return (\n    <div className=\"fixed top-0 left-0 w-full h-0.5 bg-gradient-to-r from-transparent via-cyber-blue to-transparent animate-scan z-50 pointer-events-none\" />\n  );\n}\n","size_bytes":213},"client/src/components/simple-wasteland.tsx":{"content":"import { Link } from \"wouter\";\nimport { WastelandText, WastelandButton, WastelandCard, WastelandProgress } from \"./wasteland-ui\";\nimport { Badge } from \"@/components/ui/badge\";\n\n// Simplified components with mock data for visual demonstration\n\nexport const SimpleWastelandMap = () => {\n  return (\n    <WastelandCard variant=\"terminal\" className=\"p-4\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <WastelandText variant=\"subtitle\" className=\"text-lg\">\n          TERRITORY MAP\n        </WastelandText>\n        <WastelandButton variant=\"primary\" size=\"sm\">\n          CLAIM ZONE\n        </WastelandButton>\n      </div>\n      \n      <div className=\"grid grid-cols-10 gap-1 aspect-square max-w-md mx-auto mb-4\">\n        {Array.from({ length: 100 }, (_, i) => {\n          const x = i % 10;\n          const y = Math.floor(i / 10);\n          const random = Math.random();\n          const isEmpty = random > 0.4;\n          const isOwned = !isEmpty && random > 0.75;\n          const isAlliance = !isEmpty && !isOwned && random > 0.55;\n          const isEnemy = !isEmpty && !isOwned && !isAlliance && random > 0.35;\n          const isContested = !isEmpty && !isOwned && !isAlliance && !isEnemy;\n          \n          return (\n            <button\n              key={i}\n              onClick={() => console.log('Territory action:', { x, y })}\n              className={`\n                aspect-square text-xs border transition-all duration-200 hover:z-10 relative\n                ${isEmpty ? 'bg-gray-800 border-gray-700 hover:border-wasteland-orange' :\n                  isOwned ? 'bg-green-600 border-green-400 animate-pulse' :\n                  isAlliance ? 'bg-blue-600 border-blue-400' :\n                  isEnemy ? 'bg-red-600 border-red-400' :\n                  'bg-yellow-600 border-yellow-400 animate-pulse'}\n              `}\n            >\n              {!isEmpty && (\n                <span className=\"absolute inset-0 flex items-center justify-center\">\n                  {isOwned ? '👑' : isAlliance ? '🤝' : isEnemy ? '💀' : '⚔️'}\n                </span>\n              )}\n            </button>\n          );\n        })}\n      </div>\n      \n      <div className=\"grid grid-cols-2 gap-2 text-xs\">\n        <div className=\"flex items-center gap-1\">\n          <div className=\"w-2 h-2 bg-green-600\"></div>\n          <span className=\"text-green-400\">YOURS</span>\n        </div>\n        <div className=\"flex items-center gap-1\">\n          <div className=\"w-2 h-2 bg-blue-600\"></div>\n          <span className=\"text-blue-400\">ALLIES</span>\n        </div>\n        <div className=\"flex items-center gap-1\">\n          <div className=\"w-2 h-2 bg-red-600\"></div>\n          <span className=\"text-red-400\">ENEMIES</span>\n        </div>\n        <div className=\"flex items-center gap-1\">\n          <div className=\"w-2 h-2 bg-yellow-600\"></div>\n          <span className=\"text-yellow-400\">WAR ZONES</span>\n        </div>\n      </div>\n    </WastelandCard>\n  );\n};\n\nexport const SimpleSurvivorStatus = () => {\n  return (\n    <WastelandCard variant=\"default\" className=\"p-4\">\n      <div className=\"flex items-center gap-3 mb-4\">\n        <div className=\"w-12 h-12 bg-green-600 rounded border-2 border-green-400 flex items-center justify-center\">\n          <span className=\"text-lg font-bold\">W</span>\n        </div>\n        <div>\n          <WastelandText variant=\"subtitle\" className=\"text-lg\">\n            WastelandSurvivor\n          </WastelandText>\n          <div className=\"flex gap-4 text-sm\">\n            <span className=\"text-green-400\">LVL 12</span>\n            <span className=\"text-blue-400\">342 XP</span>\n            <span className=\"text-yellow-400\">8 WINS</span>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-2 gap-3 mb-4\">\n        <div className=\"pip-boy-screen p-2 text-center\">\n          <div className=\"text-green-400 font-mono\">85%</div>\n          <div className=\"text-xs\">HEALTH</div>\n        </div>\n        <div className=\"pip-boy-screen p-2 text-center\">\n          <div className=\"text-red-400 font-mono\">3</div>\n          <div className=\"text-xs\">TERRITORIES</div>\n        </div>\n      </div>\n\n      <WastelandButton\n        variant=\"secondary\"\n        size=\"sm\"\n        onClick={() => console.log('Connect wallet clicked')}\n        className=\"w-full\"\n      >\n        CONNECT WALLET\n      </WastelandButton>\n    </WastelandCard>\n  );\n};\n\nexport const SimpleAllianceControl = () => {\n  return (\n    <WastelandCard variant=\"rusted\" className=\"p-4\">\n      <div className=\"flex items-center justify-between mb-3\">\n        <WastelandText variant=\"subtitle\" className=\"text-lg\">\n          FACTION\n        </WastelandText>\n        <Badge className=\"bg-blue-600 text-white font-mono text-xs\">\n          LEADER\n        </Badge>\n      </div>\n      \n      <div className=\"space-y-3\">\n        <div className=\"flex items-center justify-between\">\n          <span className=\"text-blue-400 font-semibold\">Brotherhood of Steel</span>\n          <span className=\"text-sm text-gray-400\">3 members</span>\n        </div>\n        \n        <div className=\"grid grid-cols-2 gap-2 text-xs\">\n          <div className=\"pip-boy-screen p-2 text-center\">\n            <div className=\"text-blue-400 font-mono\">12</div>\n            <div className=\"text-gray-400\">TERRITORIES</div>\n          </div>\n          <div className=\"pip-boy-screen p-2 text-center\">\n            <div className=\"text-green-400 font-mono\">847</div>\n            <div className=\"text-gray-400\">POWER</div>\n          </div>\n        </div>\n        \n        <div className=\"flex gap-2\">\n          <WastelandButton variant=\"primary\" size=\"sm\" className=\"flex-1\">\n            INVITE\n          </WastelandButton>\n          <WastelandButton variant=\"secondary\" size=\"sm\" className=\"flex-1\">\n            ATTACK\n          </WastelandButton>\n        </div>\n      </div>\n    </WastelandCard>\n  );\n};\n\nexport const SimpleBattleInterface = () => {\n  return (\n    <WastelandCard variant=\"terminal\" className=\"p-4\">\n      <div className=\"flex items-center justify-between mb-3\">\n        <WastelandText variant=\"subtitle\" className=\"text-lg\">\n          COMBAT\n        </WastelandText>\n        <Badge className=\"bg-red-600 text-white font-mono text-xs animate-pulse\">\n          3 ACTIVE\n        </Badge>\n      </div>\n      \n      <div className=\"space-y-3\">\n        <div className=\"grid grid-cols-2 gap-2\">\n          <WastelandButton\n            variant=\"danger\"\n            size=\"sm\"\n            onClick={() => console.log('Attack clicked')}\n          >\n            ATTACK\n          </WastelandButton>\n          <WastelandButton\n            variant=\"secondary\"\n            size=\"sm\"\n            onClick={() => console.log('Defend clicked')}\n          >\n            DEFEND  \n          </WastelandButton>\n        </div>\n        \n        <div className=\"space-y-1\">\n          <div className=\"flex justify-between items-center p-2 bg-red-900/30 border border-red-600 text-xs\">\n            <span className=\"text-red-400\">vs VaultHunter</span>\n            <span className=\"text-yellow-400\">⚔️ FIGHTING</span>\n          </div>\n          <div className=\"flex justify-between items-center p-2 bg-orange-900/30 border border-orange-600 text-xs\">\n            <span className=\"text-orange-400\">vs Enclave</span>\n            <span className=\"text-green-400\">🏆 WON</span>\n          </div>\n          <div className=\"flex justify-between items-center p-2 bg-gray-800 border border-gray-600 text-xs\">\n            <span className=\"text-gray-400\">vs Raiders</span>\n            <span className=\"text-gray-400\">⏳ PENDING</span>\n          </div>\n        </div>\n      </div>\n    </WastelandCard>\n  );\n};\n\nexport const SimpleCommunicationsInterface = () => {\n  return (\n    <WastelandCard variant=\"terminal\" className=\"p-4\">\n      <div className=\"flex items-center justify-between mb-3\">\n        <WastelandText variant=\"subtitle\" className=\"text-lg\">\n          RADIO\n        </WastelandText>\n        <div className=\"w-2 h-2 bg-green-400 rounded-full animate-pulse\"></div>\n      </div>\n      \n      <div className=\"space-y-3\">\n        <div className=\"space-y-1 max-h-24 overflow-y-auto bg-gray-900 p-2 border border-green-600 text-xs\">\n          <div className=\"text-green-400 font-mono\">\n            <span className=\"text-yellow-400\">Brotherhood:</span> Moving to sector 7\n          </div>\n          <div className=\"text-green-400 font-mono\">\n            <span className=\"text-red-400\">Enclave:</span> Under attack!\n          </div>\n          <div className=\"text-green-400 font-mono\">\n            <span className=\"text-blue-400\">VaultTec:</span> Emergency broadcast\n          </div>\n        </div>\n        \n        <div className=\"grid grid-cols-2 gap-2\">\n          <WastelandButton\n            variant=\"radiation\"\n            size=\"sm\"\n            onClick={() => console.log('Send message clicked')}\n          >\n            SEND\n          </WastelandButton>\n          <WastelandButton\n            variant=\"secondary\"\n            size=\"sm\"\n            onClick={() => console.log('Scan clicked')}\n          >\n            SCAN\n          </WastelandButton>\n        </div>\n      </div>\n    </WastelandCard>\n  );\n};\n\nexport const SimpleWastelandLeaderboard = () => {\n  const topUsers = [\n    { id: 1, username: 'WastelandSurvivor', power: 847, territories: 3, color: 'text-yellow-400' },\n    { id: 2, username: 'VaultHunter', power: 692, territories: 5, color: 'text-blue-400' },\n    { id: 3, username: 'RadscorpionSlayer', power: 534, territories: 2, color: 'text-red-400' },\n    { id: 4, username: 'Brotherhood', power: 421, territories: 8, color: 'text-green-400' },\n    { id: 5, username: 'Enclave', power: 298, territories: 1, color: 'text-purple-400' }\n  ];\n\n  return (\n    <WastelandCard variant=\"default\" className=\"p-4\">\n      <WastelandText variant=\"subtitle\" className=\"mb-3 text-lg\">\n        TOP PLAYERS\n      </WastelandText>\n      \n      <div className=\"space-y-1\">\n        {topUsers.map((user, index) => (\n          <div key={user.id} className=\"flex items-center justify-between p-2 bg-gray-800 border border-gray-700 text-xs\">\n            <div className=\"flex items-center gap-2\">\n              <span className={`w-4 h-4 flex items-center justify-center font-bold ${\n                index === 0 ? 'bg-yellow-600 text-black' :\n                index === 1 ? 'bg-gray-600 text-white' :\n                index === 2 ? 'bg-orange-600 text-black' :\n                'bg-gray-700 text-white'\n              }`}>\n                {index + 1}\n              </span>\n              <span className={`font-mono ${user.color}`}>{user.username}</span>\n            </div>\n            <div className=\"flex items-center gap-3 text-gray-400\">\n              <span>{user.power}💪</span>\n              <span>{user.territories}🏁</span>\n            </div>\n          </div>\n        ))}\n      </div>\n    </WastelandCard>\n  );\n};","size_bytes":10888},"client/src/components/territory-map.tsx":{"content":"import { useState } from \"react\";\nimport { Map, MapPin } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\n\ntype TerritoryStatus = \"yours\" | \"alliance\" | \"neutral\" | \"enemy\" | \"unclaimed\";\n\ninterface Territory {\n  x: number;\n  y: number;\n  status: TerritoryStatus;\n  owner?: string;\n  controlledUntil?: Date;\n}\n\nconst getStatusColor = (status: TerritoryStatus): string => {\n  switch (status) {\n    case \"yours\": return \"bg-cyber-blue/20 border-cyber-blue hover:bg-cyber-blue/40\";\n    case \"alliance\": return \"bg-toxic-green/20 border-toxic-green hover:bg-toxic-green/40\";\n    case \"neutral\": return \"bg-warning-orange/20 border-warning-orange hover:bg-warning-orange/40\";\n    case \"enemy\": return \"bg-danger-red/20 border-danger-red hover:bg-danger-red/40\";\n    case \"unclaimed\": return \"bg-border-gray border-gray-600 hover:bg-gray-600/40\";\n  }\n};\n\nexport default function TerritoryMap() {\n  const [selectedTerritory, setSelectedTerritory] = useState<Territory | null>(null);\n\n  // Generate a mock 8x6 grid\n  const territories: Territory[] = [];\n  for (let y = 0; y < 6; y++) {\n    for (let x = 0; x < 8; x++) {\n      const statuses: TerritoryStatus[] = [\"yours\", \"alliance\", \"neutral\", \"enemy\", \"unclaimed\"];\n      const status = statuses[Math.floor(Math.random() * statuses.length)];\n      territories.push({ x, y, status });\n    }\n  }\n\n  const handleTerritoryClick = (territory: Territory) => {\n    setSelectedTerritory(territory);\n  };\n\n  const handleClaimTerritory = () => {\n    // TODO: Implement territory claiming logic\n    console.log(\"Claiming territory:\", selectedTerritory);\n  };\n\n  return (\n    <Card className=\"bg-card-bg border-border-gray terminal-border\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between text-xl text-cyber-blue\">\n          <div className=\"flex items-center\">\n            <Map className=\"w-5 h-5 mr-2\" />\n            TERRITORY CONTROL\n          </div>\n          <Button \n            className=\"px-3 py-1 bg-toxic-green/20 border border-toxic-green text-toxic-green text-sm rounded hover:bg-toxic-green hover:text-black transition-all\"\n            data-testid=\"button-claim-territory\"\n            onClick={handleClaimTerritory}\n          >\n            CLAIM TERRITORY\n          </Button>\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        {/* Territory grid */}\n        <div className=\"grid grid-cols-8 gap-1 mb-4\" data-testid=\"territory-grid\">\n          {territories.map((territory, index) => (\n            <div\n              key={index}\n              className={`aspect-square ${getStatusColor(territory.status)} border rounded cursor-pointer transition-all`}\n              onClick={() => handleTerritoryClick(territory)}\n              data-testid={`territory-${territory.x}-${territory.y}`}\n              title={`Territory (${territory.x}, ${territory.y}) - ${territory.status}`}\n            />\n          ))}\n        </div>\n        \n        {/* Legend */}\n        <div className=\"flex flex-wrap gap-4 text-sm mb-4\">\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-3 h-3 bg-cyber-blue rounded\" />\n            <span>Your Territory</span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-3 h-3 bg-toxic-green rounded\" />\n            <span>Alliance</span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-3 h-3 bg-warning-orange rounded\" />\n            <span>Neutral</span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-3 h-3 bg-danger-red rounded\" />\n            <span>Enemy</span>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-3 h-3 bg-border-gray rounded\" />\n            <span>Unclaimed</span>\n          </div>\n        </div>\n\n        {/* Selected territory info */}\n        {selectedTerritory && (\n          <div className=\"p-3 bg-darker-bg border border-border-gray rounded\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <h4 className=\"font-semibold text-cyber-blue\">\n                Territory ({selectedTerritory.x}, {selectedTerritory.y})\n              </h4>\n              <Badge \n                className={`${\n                  selectedTerritory.status === 'yours' ? 'bg-cyber-blue/20 text-cyber-blue border-cyber-blue' :\n                  selectedTerritory.status === 'alliance' ? 'bg-toxic-green/20 text-toxic-green border-toxic-green' :\n                  selectedTerritory.status === 'neutral' ? 'bg-warning-orange/20 text-warning-orange border-warning-orange' :\n                  selectedTerritory.status === 'enemy' ? 'bg-danger-red/20 text-danger-red border-danger-red' :\n                  'bg-gray-600/20 text-gray-400 border-gray-600'\n                }`}\n              >\n                {selectedTerritory.status.toUpperCase()}\n              </Badge>\n            </div>\n            <div className=\"text-sm text-gray-400\">\n              {selectedTerritory.status === 'unclaimed' ? (\n                <p>This territory is available for claiming. Control lasts 24 hours.</p>\n              ) : (\n                <p>Status: {selectedTerritory.status} • Click to view details</p>\n              )}\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5527},"client/src/components/wasteland-dashboard.tsx":{"content":"// TODO: Import hooks when implemented\n// import { useGameState } from '@/hooks/use-game-state';\n// import { useWeb3 } from '@/hooks/use-web3';\nimport { WastelandCard, WastelandButton, WastelandText, WastelandProgress } from './wasteland-ui';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Badge } from '@/components/ui/badge';\n\n// Wasteland Territory Map Component\nexport const WastelandMap = () => {\n  // Mock data for now\n  const territories = [];\n  const user = { id: 1 };\n  \n  const handleClaimTerritory = (x: number, y: number) => {\n    console.log('Claiming territory:', { x, y });\n  };\n\n  return (\n    <WastelandCard variant=\"terminal\" className=\"p-6\">\n      <WastelandText variant=\"subtitle\" className=\"mb-4 border-b border-rust-red pb-2\">\n        TERRITORIAL CONTROL\n      </WastelandText>\n      \n      {/* Map Grid */}\n      <div className=\"grid grid-cols-10 gap-1 aspect-square max-w-lg mx-auto mb-6\">\n        {Array.from({ length: 100 }, (_, i) => {\n          const x = i % 10;\n          const y = Math.floor(i / 10);\n          const territory = territories?.find(t => t.x === x && t.y === y);\n          const isOwned = territory?.userId === user?.id;\n          const hasAlliance = territory?.status === 'alliance';\n          const isContested = territory?.status === 'contested';\n          \n          return (\n            <button\n              key={i}\n              onClick={() => handleClaimTerritory(x, y)}\n              data-testid={`territory-${x}-${y}`}\n              className={`\n                aspect-square text-xs font-mono border relative overflow-hidden transition-all duration-300 hover:scale-110 hover:z-10\n                ${!territory ? 'bg-charred-earth border-ash-gray hover:bg-rusted-metal hover:border-wasteland-orange' :\n                  isOwned ? 'bg-wasteland-orange border-burnt-amber shadow-amber animate-radiation-pulse' :\n                  hasAlliance ? 'bg-steel-blue border-radiation-green' :\n                  isContested ? 'bg-blood-maroon border-rust-red animate-wasteland-glitch' :\n                  'bg-corroded-steel border-ash-gray'}\n              `}\n            >\n              {territory && (\n                <span className=\"absolute inset-0 flex items-center justify-center text-shadow-wasteland\">\n                  {isOwned ? '⚡' : hasAlliance ? '🤝' : isContested ? '⚔️' : '🏴'}\n                </span>\n              )}\n            </button>\n          );\n        })}\n      </div>\n      \n      {/* Territory Legend */}\n      <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3 text-xs font-mono\">\n        <div className=\"flex items-center gap-2\">\n          <div className=\"w-3 h-3 bg-charred-earth border border-ash-gray\"></div>\n          <span className=\"text-ash-gray\">UNCLAIMED</span>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <div className=\"w-3 h-3 bg-wasteland-orange border border-burnt-amber\"></div>\n          <span className=\"text-wasteland-orange\">YOUR TERRITORY</span>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <div className=\"w-3 h-3 bg-steel-blue border border-radiation-green\"></div>\n          <span className=\"text-steel-blue\">ALLIANCE</span>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <div className=\"w-3 h-3 bg-blood-maroon border border-rust-red\"></div>\n          <span className=\"text-rust-red\">CONTESTED</span>\n        </div>\n      </div>\n    </WastelandCard>\n  );\n};\n\n// Survivor Status Component\nexport const SurvivorStatus = () => {\n  // Mock data for now\n  const user = { \n    id: 1, \n    username: 'WastelandSurvivor', \n    xp: 342, \n    wins: 8 \n  };\n  const account = null;\n  const isConnected = false;\n  \n  const connectWallet = () => {\n    console.log('Connect wallet clicked');\n  };\n\n  if (!user) {\n    return (\n      <WastelandCard variant=\"radiation\" className=\"p-6 text-center\">\n        <WastelandText variant=\"warning\" className=\"mb-4\">\n          VAULT-TEC AUTHENTICATION REQUIRED\n        </WastelandText>\n        <WastelandButton\n          variant=\"radiation\"\n          onClick={connectWallet}\n          disabled={!isConnected}\n          glitch\n          data-testid=\"button-connect-wallet\"\n        >\n          {isConnected ? 'CONNECT WALLET' : 'ENABLE WEB3'}\n        </WastelandButton>\n      </WastelandCard>\n    );\n  }\n\n  return (\n    <WastelandCard variant=\"default\" className=\"p-6\">\n      <div className=\"flex items-center gap-4 mb-6\">\n        <div className=\"w-16 h-16 bg-wasteland-orange rounded-full border-2 border-rust-red flex items-center justify-center animate-hologram-flicker\">\n          <span className=\"text-2xl font-title text-dark-wasteland\">\n            {user.username.charAt(0).toUpperCase()}\n          </span>\n        </div>\n        <div>\n          <WastelandText variant=\"subtitle\" glow>\n            {user.username}\n          </WastelandText>\n          <WastelandText variant=\"terminal\" className=\"mt-1\">\n            VAULT DWELLER #{user.id.toString().padStart(4, '0')}\n          </WastelandText>\n        </div>\n      </div>\n\n      {/* Survivor Stats */}\n      <div className=\"space-y-4\">\n        <WastelandProgress \n          value={user.xp} \n          max={1000} \n          label=\"EXPERIENCE\" \n          variant=\"xp\" \n        />\n        <WastelandProgress \n          value={user.wins} \n          max={Math.max(user.wins + 5, 20)} \n          label=\"VICTORIES\" \n          variant=\"health\" \n        />\n        <WastelandProgress \n          value={85} \n          max={100} \n          label=\"HEALTH\" \n          variant=\"health\" \n        />\n        <WastelandProgress \n          value={15} \n          max={100} \n          label=\"RADIATION\" \n          variant=\"radiation\" \n        />\n      </div>\n\n      {/* Wallet Connection */}\n      <div className=\"mt-6 pt-4 border-t border-rust-red\">\n        <WastelandText variant=\"terminal\" className=\"mb-2\">\n          WALLET: {account ? \n            `${account.slice(0, 6)}...${account.slice(-4)}` : \n            'DISCONNECTED'\n          }\n        </WastelandText>\n        {!account && (\n          <WastelandButton\n            variant=\"secondary\"\n            size=\"sm\"\n            onClick={connectWallet}\n            className=\"w-full\"\n            data-testid=\"button-connect-wallet\"\n          >\n            CONNECT WALLET\n          </WastelandButton>\n        )}\n      </div>\n    </WastelandCard>\n  );\n};\n\n// Alliance System Component\nexport const AllianceControl = () => {\n  // Mock data for now\n  const alliances = [\n    { \n      id: 1, \n      name: 'Brotherhood of Steel', \n      members: [\n        { userId: 1, user: { username: 'WastelandSurvivor' }, role: 'leader' }\n      ] \n    }\n  ];\n  const user = { id: 1 };\n  \n  const createAlliance = {\n    mutate: (data: any) => console.log('Creating alliance:', data),\n    isPending: false\n  };\n  \n  const joinAlliance = {\n    mutate: (data: any) => console.log('Joining alliance:', data)\n  };\n  \n  const userAlliance = alliances.find(a => a.members.some(m => m.userId === user.id));\n\n  return (\n    <WastelandCard variant=\"rusted\" className=\"p-6\">\n      <WastelandText variant=\"subtitle\" className=\"mb-4 border-b border-burnt-amber pb-2\">\n        FACTION ALLIANCES\n      </WastelandText>\n      \n      {userAlliance ? (\n        <div className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <WastelandText variant=\"body\" className=\"text-burnt-amber font-semibold\">\n              {userAlliance.name}\n            </WastelandText>\n            <Badge className=\"bg-steel-blue text-dark-wasteland font-mono text-xs\">\n              {userAlliance.members?.length || 0} MEMBERS\n            </Badge>\n          </div>\n          \n          <WastelandText variant=\"terminal\">\n            STATUS: ACTIVE MEMBER\n          </WastelandText>\n          \n          <div className=\"space-y-2\">\n            <WastelandText variant=\"body\" className=\"text-sm text-ash-gray\">\n              FACTION MEMBERS:\n            </WastelandText>\n            {userAlliance.members?.map((member) => (\n              <div key={member.userId} className=\"flex justify-between text-sm font-mono\">\n                <span className=\"text-foreground\">{member.user.username}</span>\n                <span className=\"text-steel-blue\">{member.role.toUpperCase()}</span>\n              </div>\n            ))}\n          </div>\n        </div>\n      ) : (\n        <div className=\"space-y-4\">\n          <WastelandText variant=\"body\" className=\"text-ash-gray\">\n            You are not part of any faction. Form alliances to control more territory.\n          </WastelandText>\n          \n          <div className=\"grid gap-2\">\n            <WastelandButton\n              variant=\"primary\"\n              onClick={() => createAlliance.mutate({ name: `Faction-${Date.now()}` })}\n              disabled={createAlliance.isPending}\n              data-testid=\"button-create-alliance\"\n            >\n              CREATE FACTION\n            </WastelandButton>\n            <WastelandButton\n              variant=\"secondary\"\n              disabled\n              data-testid=\"button-join-alliance\"\n            >\n              JOIN FACTION\n            </WastelandButton>\n          </div>\n        </div>\n      )}\n      \n      {/* Available Alliances */}\n      {alliances && alliances.length > 0 && (\n        <div className=\"mt-6 pt-4 border-t border-burnt-amber\">\n          <WastelandText variant=\"body\" className=\"text-sm text-ash-gray mb-3\">\n            ACTIVE FACTIONS:\n          </WastelandText>\n          <div className=\"space-y-2 max-h-40 overflow-y-auto\">\n            {alliances.slice(0, 5).map((alliance) => (\n              <div key={alliance.id} className=\"flex justify-between items-center p-2 bg-charred-earth border border-ash-gray\">\n                <span className=\"text-sm font-mono text-foreground\">{alliance.name}</span>\n                <span className=\"text-xs text-steel-blue\">{alliance.members?.length || 0} members</span>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n    </WastelandCard>\n  );\n};\n\n// Battle Interface Component\nexport const BattleInterface = () => {\n  // Mock data for now\n  const battles = [\n    { \n      id: 1, \n      challengerId: 1, \n      challengedId: 2, \n      status: 'active' \n    }\n  ];\n  const user = { id: 1 };\n  \n  const createBattle = {\n    mutate: (data: any) => console.log('Creating battle:', data),\n    isPending: false\n  };\n  \n  const userBattles = battles.filter(b => \n    b.challengerId === user.id || b.challengedId === user.id\n  );\n\n  return (\n    <WastelandCard variant=\"terminal\" className=\"p-6\">\n      <WastelandText variant=\"subtitle\" className=\"mb-4 border-b border-rust-red pb-2\">\n        COMBAT OPERATIONS\n      </WastelandText>\n      \n      <div className=\"space-y-4\">\n        <WastelandButton\n          variant=\"danger\"\n          onClick={() => createBattle.mutate({ challengedId: 1 })}\n          disabled={createBattle.isPending}\n          glitch\n          data-testid=\"button-create-battle\"\n        >\n          INITIATE COMBAT\n        </WastelandButton>\n        \n        {userBattles.length > 0 && (\n          <div className=\"space-y-2\">\n            <WastelandText variant=\"body\" className=\"text-sm text-ash-gray\">\n              ACTIVE CONFLICTS:\n            </WastelandText>\n            {userBattles.slice(0, 3).map((battle) => (\n              <div key={battle.id} className=\"p-3 bg-blood-maroon/20 border border-rust-red\">\n                <div className=\"flex justify-between items-center text-sm font-mono\">\n                  <span className=\"text-foreground\">\n                    Battle #{battle.id}\n                  </span>\n                  <Badge className={`text-xs ${\n                    battle.status === 'active' ? 'bg-rust-red' :\n                    battle.status === 'completed' ? 'bg-wasteland-orange' :\n                    'bg-ash-gray'\n                  }`}>\n                    {battle.status.toUpperCase()}\n                  </Badge>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </WastelandCard>\n  );\n};\n\n// Communications Interface Component\nexport const CommunicationsInterface = () => {\n  // Mock data for now\n  const messages = [\n    {\n      id: 1,\n      content: 'Emergency broadcast system test',\n      sender: { username: 'VaultTec' },\n      createdAt: new Date().toISOString()\n    }\n  ];\n  const user = { id: 1 };\n  \n  const sendMessage = {\n    mutate: (data: any) => console.log('Sending message:', data),\n    isPending: false\n  };\n  \n  const recentMessages = messages.slice(0, 5);\n\n  return (\n    <WastelandCard variant=\"terminal\" className=\"p-6\">\n      <WastelandText variant=\"subtitle\" className=\"mb-4 border-b border-radiation-green pb-2\">\n        RADIO COMMUNICATIONS\n      </WastelandText>\n      \n      <div className=\"space-y-4\">\n        {/* Message Feed */}\n        <div className=\"space-y-2 max-h-40 overflow-y-auto bg-charred-earth/50 p-3 border border-radiation-green\">\n          {recentMessages.length > 0 ? recentMessages.map((message) => (\n            <div key={message.id} className=\"text-sm font-mono\">\n              <span className=\"text-radiation-green\">\n                [{new Date(message.createdAt).toLocaleTimeString()}]\n              </span>\n              <span className=\"text-burnt-amber ml-2\">{message.sender.username}:</span>\n              <span className=\"text-foreground ml-2\">{message.content}</span>\n            </div>\n          )) : (\n            <WastelandText variant=\"terminal\" className=\"text-center text-ash-gray\">\n              NO ACTIVE TRANSMISSIONS\n            </WastelandText>\n          )}\n        </div>\n        \n        <WastelandButton\n          variant=\"radiation\"\n          onClick={() => sendMessage.mutate({ \n            content: \"Testing emergency broadcast system...\",\n            recipientId: null \n          })}\n          disabled={sendMessage.isPending}\n          data-testid=\"button-send-message\"\n        >\n          BROADCAST MESSAGE\n        </WastelandButton>\n      </div>\n    </WastelandCard>\n  );\n};\n\n// Leaderboard Component\nexport const WastelandLeaderboard = () => {\n  // Mock data for now\n  const users = [\n    { id: 1, username: 'WastelandSurvivor', xp: 342, wins: 8 },\n    { id: 2, username: 'VaultHunter', xp: 289, wins: 12 },\n    { id: 3, username: 'RadscorpionSlayer', xp: 245, wins: 6 },\n    { id: 4, username: 'Brotherhood', xp: 198, wins: 15 },\n    { id: 5, username: 'Enclave', xp: 167, wins: 4 }\n  ];\n  \n  const topUsers = users.sort((a, b) => b.xp - a.xp).slice(0, 10);\n\n  return (\n    <WastelandCard variant=\"default\" className=\"p-6\">\n      <WastelandText variant=\"subtitle\" className=\"mb-4 border-b border-wasteland-orange pb-2\">\n        SURVIVOR RANKINGS\n      </WastelandText>\n      \n      <div className=\"space-y-2\">\n        {topUsers.map((user, index) => (\n          <div key={user.id} className=\"flex items-center justify-between p-2 bg-rusted-metal border border-ash-gray\">\n            <div className=\"flex items-center gap-3\">\n              <span className={`w-6 h-6 flex items-center justify-center text-xs font-bold ${\n                index === 0 ? 'bg-wasteland-orange text-dark-wasteland' :\n                index === 1 ? 'bg-burnt-amber text-dark-wasteland' :\n                index === 2 ? 'bg-rust-red text-foreground' :\n                'bg-ash-gray text-foreground'\n              }`}>\n                {index + 1}\n              </span>\n              <span className=\"font-mono text-foreground\">{user.username}</span>\n            </div>\n            <div className=\"flex items-center gap-4 text-sm font-mono\">\n              <span className=\"text-burnt-amber\">{user.xp} XP</span>\n              <span className=\"text-radiation-green\">{user.wins} WINS</span>\n            </div>\n          </div>\n        ))}\n      </div>\n    </WastelandCard>\n  );\n};","size_bytes":15965},"client/src/components/wasteland-ui.tsx":{"content":"import { ReactNode } from 'react';\nimport { cn } from '@/lib/utils';\n\ninterface WastelandCardProps {\n  children: ReactNode;\n  className?: string;\n  variant?: 'default' | 'terminal' | 'rusted' | 'radiation';\n  glow?: boolean;\n  animated?: boolean;\n}\n\nexport const WastelandCard = ({ \n  children, \n  className, \n  variant = 'default',\n  glow = false,\n  animated = false\n}: WastelandCardProps) => {\n  const baseClasses = \"relative overflow-hidden\";\n  \n  const variantClasses = {\n    default: \"bg-rusted-metal border-2 border-wasteland-orange shadow-wasteland\",\n    terminal: \"bg-charred-earth border-2 border-rust-red pip-boy-screen\",\n    rusted: \"bg-corroded-steel border-2 border-burnt-amber rust-texture\",\n    radiation: \"bg-deeper-void border-2 border-radiation-green radiation-glow animate-radiation-pulse\"\n  };\n\n  const glowClass = glow ? \"shadow-2xl shadow-wasteland-orange/50\" : \"\";\n  const animatedClass = animated ? \"animate-hologram-flicker\" : \"\";\n\n  return (\n    <div className={cn(\n      baseClasses,\n      variantClasses[variant],\n      glowClass,\n      animatedClass,\n      className\n    )}>\n      {/* Card background texture overlay */}\n      <div className=\"absolute inset-0 bg-gradient-to-br from-transparent via-wasteland-orange/5 to-rust-red/10 pointer-events-none\" />\n      \n      {/* Content */}\n      <div className=\"relative z-10\">\n        {children}\n      </div>\n    </div>\n  );\n};\n\ninterface WastelandButtonProps {\n  children: ReactNode;\n  variant?: 'primary' | 'secondary' | 'danger' | 'radiation';\n  size?: 'sm' | 'md' | 'lg';\n  className?: string;\n  onClick?: () => void;\n  disabled?: boolean;\n  glitch?: boolean;\n}\n\nexport const WastelandButton = ({\n  children,\n  variant = 'primary',\n  size = 'md',\n  className,\n  onClick,\n  disabled = false,\n  glitch = false\n}: WastelandButtonProps) => {\n  const baseClasses = \"relative font-title uppercase tracking-wider transition-all duration-300 border-2 overflow-hidden\";\n  \n  const variantClasses = {\n    primary: \"bg-wasteland-orange text-dark-wasteland border-wasteland-orange hover:bg-rust-red hover:border-rust-red\",\n    secondary: \"bg-transparent text-wasteland-orange border-wasteland-orange hover:bg-wasteland-orange hover:text-dark-wasteland\",\n    danger: \"bg-rust-red text-foreground border-rust-red hover:bg-blood-maroon hover:border-blood-maroon\",\n    radiation: \"bg-radiation-green text-dark-wasteland border-radiation-green hover:bg-toxic-yellow hover:border-toxic-yellow animate-radiation-pulse\"\n  };\n\n  const sizeClasses = {\n    sm: \"px-3 py-1.5 text-sm\",\n    md: \"px-6 py-3 text-base\",\n    lg: \"px-8 py-4 text-lg\"\n  };\n\n  const disabledClasses = disabled ? \"opacity-50 cursor-not-allowed\" : \"cursor-pointer\";\n  const glitchClass = glitch ? \"animate-wasteland-glitch\" : \"\";\n\n  return (\n    <button\n      className={cn(\n        baseClasses,\n        variantClasses[variant],\n        sizeClasses[size],\n        disabledClasses,\n        glitchClass,\n        className\n      )}\n      onClick={disabled ? undefined : onClick}\n      data-testid={`button-${children?.toString().toLowerCase().replace(/\\s+/g, '-')}`}\n    >\n      {/* Button glow effect */}\n      <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-current to-transparent opacity-20 transform -skew-x-12 -translate-x-full group-hover:translate-x-full transition-transform duration-1000\" />\n      \n      {/* Content */}\n      <span className=\"relative z-10 text-shadow-wasteland\">\n        {children}\n      </span>\n    </button>\n  );\n};\n\ninterface WastelandTextProps {\n  children: ReactNode;\n  variant?: 'title' | 'subtitle' | 'body' | 'terminal' | 'warning';\n  glow?: boolean;\n  glitch?: boolean;\n  className?: string;\n}\n\nexport const WastelandText = ({\n  children,\n  variant = 'body',\n  glow = false,\n  glitch = false,\n  className\n}: WastelandTextProps) => {\n  const variantClasses = {\n    title: \"font-title text-4xl md:text-6xl text-wasteland-orange font-bold uppercase tracking-widest\",\n    subtitle: \"font-title text-2xl md:text-3xl text-burnt-amber font-semibold uppercase tracking-wide\",\n    body: \"font-body text-base text-foreground\",\n    terminal: \"font-mono text-sm text-radiation-green bg-charred-earth/20 px-2 py-1 border border-radiation-green/30\",\n    warning: \"font-title text-lg text-toxic-yellow font-bold uppercase tracking-wide\"\n  };\n\n  const glowClass = glow ? \"text-shadow-wasteland\" : \"\";\n  const glitchClass = glitch ? \"glitch-wasteland animate-wasteland-glitch\" : \"\";\n\n  const Component = variant === 'title' ? 'h1' : \n                  variant === 'subtitle' ? 'h2' : \n                  variant === 'terminal' ? 'code' :\n                  'p';\n\n  return (\n    <Component \n      className={cn(\n        variantClasses[variant],\n        glowClass,\n        glitchClass,\n        className\n      )}\n      data-text={glitch ? children?.toString() : undefined}\n    >\n      {children}\n    </Component>\n  );\n};\n\ninterface WastelandProgressProps {\n  value: number;\n  max: number;\n  label?: string;\n  variant?: 'health' | 'radiation' | 'xp' | 'ammo';\n  className?: string;\n}\n\nexport const WastelandProgress = ({\n  value,\n  max,\n  label,\n  variant = 'health',\n  className\n}: WastelandProgressProps) => {\n  const percentage = (value / max) * 100;\n  \n  const variantClasses = {\n    health: \"bg-rust-red\",\n    radiation: \"bg-radiation-green animate-radiation-pulse\",\n    xp: \"bg-burnt-amber\",\n    ammo: \"bg-steel-blue\"\n  };\n\n  return (\n    <div className={cn(\"w-full\", className)}>\n      {label && (\n        <div className=\"flex justify-between text-sm font-mono text-ash-gray mb-1\">\n          <span>{label}</span>\n          <span>{value}/{max}</span>\n        </div>\n      )}\n      <div className=\"relative h-3 bg-charred-earth border border-ash-gray overflow-hidden\">\n        {/* Background pattern */}\n        <div className=\"absolute inset-0 rust-texture opacity-30\" />\n        \n        {/* Progress bar */}\n        <div\n          className={cn(\n            \"relative h-full transition-all duration-500 border-r border-current/50\",\n            variantClasses[variant]\n          )}\n          style={{ width: `${percentage}%` }}\n        >\n          {/* Inner glow */}\n          <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-current to-transparent opacity-50\" />\n          \n          {/* Animated fill effect */}\n          <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent transform -skew-x-12 animate-[pip-boy-scan_2s_ease-in-out_infinite]\" />\n        </div>\n        \n        {/* Terminal-style overlay */}\n        <div className=\"absolute inset-0 bg-gradient-to-b from-transparent via-current/5 to-transparent pointer-events-none\" />\n      </div>\n    </div>\n  );\n};","size_bytes":6706},"client/src/hooks/use-game-state.ts":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\n\ninterface GameState {\n  isConnected: boolean;\n  userAddress?: string;\n  player?: any;\n  alliance?: any;\n  territories: any[];\n  battles: any[];\n  messages: any[];\n}\n\nexport function useGameState() {\n  const [gameState, setGameState] = useState<GameState>({\n    isConnected: false,\n    territories: [],\n    battles: [],\n    messages: [],\n  });\n\n  const queryClient = useQueryClient();\n\n  // WebSocket connection for real-time updates\n  useEffect(() => {\n    const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n    const wsUrl = `${protocol}//${window.location.host}/ws`;\n    const socket = new WebSocket(wsUrl);\n\n    socket.onopen = () => {\n      console.log(\"WebSocket connected\");\n    };\n\n    socket.onmessage = (event) => {\n      const data = JSON.parse(event.data);\n      \n      if (data.type === 'new_message') {\n        queryClient.invalidateQueries({ queryKey: ['/api/messages'] });\n      }\n      \n      if (data.type === 'battle_update') {\n        queryClient.invalidateQueries({ queryKey: ['/api/battles'] });\n      }\n      \n      if (data.type === 'territory_update') {\n        queryClient.invalidateQueries({ queryKey: ['/api/territories'] });\n      }\n    };\n\n    socket.onclose = () => {\n      console.log(\"WebSocket disconnected\");\n    };\n\n    return () => {\n      socket.close();\n    };\n  }, [queryClient]);\n\n  // Player data query\n  const { data: player } = useQuery({\n    queryKey: ['/api/users', gameState.userAddress],\n    enabled: !!gameState.userAddress,\n  });\n\n  // Alliance data query\n  const { data: alliance } = useQuery({\n    queryKey: ['/api/users', player?.id, 'alliance'],\n    enabled: !!player?.id,\n  });\n\n  // Territories query\n  const { data: territories = [] } = useQuery({\n    queryKey: ['/api/territories'],\n  });\n\n  // Battles query\n  const { data: battles = [] } = useQuery({\n    queryKey: ['/api/battles/user', player?.id],\n    enabled: !!player?.id,\n  });\n\n  // Messages query\n  const { data: messages = [] } = useQuery({\n    queryKey: ['/api/messages/global'],\n  });\n\n  // Leaderboard query\n  const { data: leaderboard = [] } = useQuery({\n    queryKey: ['/api/leaderboard'],\n  });\n\n  return {\n    gameState: {\n      ...gameState,\n      player,\n      alliance,\n      territories,\n      battles,\n      messages,\n      leaderboard,\n    },\n    setGameState,\n  };\n}\n","size_bytes":2445},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/use-web3.ts":{"content":"import { useState, useEffect } from 'react';\n\ninterface Web3State {\n  account: string | null;\n  chainId: number | null;\n  isConnected: boolean;\n  isLoading: boolean;\n  error: string | null;\n}\n\ninterface ContractState {\n  marketplaceContract: any;\n  nftContract: any;\n  escrowContract: any;\n  isLoading: boolean;\n  error: string | null;\n}\n\ndeclare global {\n  interface Window {\n    ethereum?: any;\n  }\n}\n\nexport function useWeb3() {\n  // DEVELOPMENT MODE: Return mock values when Web3 is disabled\n  const DEVELOPMENT_MODE = true; // Set to false when ready for Web3 testing\n  \n  const [web3State, setWeb3State] = useState<Web3State>({\n    account: DEVELOPMENT_MODE ? '0xDEV_MODE' : null,\n    chainId: DEVELOPMENT_MODE ? 1 : null,\n    isConnected: DEVELOPMENT_MODE ? true : false,\n    isLoading: false,\n    error: null,\n  });\n\n  const connectWallet = async () => {\n    // Skip wallet connection in development mode\n    if (DEVELOPMENT_MODE) {\n      console.log('Development mode: Wallet connection disabled');\n      return;\n    }\n    \n    if (!window.ethereum) {\n      setWeb3State(prev => ({\n        ...prev,\n        error: 'MetaMask not installed. Please install MetaMask to continue.'\n      }));\n      return;\n    }\n\n    try {\n      setWeb3State(prev => ({ ...prev, isLoading: true, error: null }));\n      \n      const accounts = await window.ethereum.request({\n        method: 'eth_requestAccounts',\n      });\n      \n      const chainId = await window.ethereum.request({\n        method: 'eth_chainId',\n      });\n\n      setWeb3State({\n        account: accounts[0],\n        chainId: parseInt(chainId, 16),\n        isConnected: true,\n        isLoading: false,\n        error: null,\n      });\n    } catch (error: any) {\n      setWeb3State(prev => ({\n        ...prev,\n        isLoading: false,\n        error: error.message || 'Failed to connect wallet'\n      }));\n    }\n  };\n\n  const disconnectWallet = () => {\n    setWeb3State({\n      account: null,\n      chainId: null,\n      isConnected: false,\n      isLoading: false,\n      error: null,\n    });\n  };\n\n  const switchToBaseNetwork = async () => {\n    try {\n      await window.ethereum.request({\n        method: 'wallet_switchEthereumChain',\n        params: [{ chainId: '0x2105' }], // Base Mainnet\n      });\n    } catch (error: any) {\n      if (error.code === 4902) {\n        // Network not added to MetaMask\n        await window.ethereum.request({\n          method: 'wallet_addEthereumChain',\n          params: [\n            {\n              chainId: '0x2105',\n              chainName: 'Base',\n              nativeCurrency: {\n                name: 'Ethereum',\n                symbol: 'ETH',\n                decimals: 18,\n              },\n              rpcUrls: ['https://mainnet.base.org'],\n              blockExplorerUrls: ['https://basescan.org'],\n            },\n          ],\n        });\n      }\n    }\n  };\n\n  useEffect(() => {\n    if (window.ethereum) {\n      // Check if already connected\n      window.ethereum.request({ method: 'eth_accounts' })\n        .then((accounts: string[]) => {\n          if (accounts.length > 0) {\n            setWeb3State(prev => ({\n              ...prev,\n              account: accounts[0],\n              isConnected: true\n            }));\n          }\n        });\n\n      // Listen for account changes\n      window.ethereum.on('accountsChanged', (accounts: string[]) => {\n        if (accounts.length === 0) {\n          disconnectWallet();\n        } else {\n          setWeb3State(prev => ({\n            ...prev,\n            account: accounts[0]\n          }));\n        }\n      });\n\n      // Listen for chain changes\n      window.ethereum.on('chainChanged', (chainId: string) => {\n        setWeb3State(prev => ({\n          ...prev,\n          chainId: parseInt(chainId, 16)\n        }));\n      });\n    }\n\n    return () => {\n      if (window.ethereum) {\n        window.ethereum.removeAllListeners('accountsChanged');\n        window.ethereum.removeAllListeners('chainChanged');\n      }\n    };\n  }, []);\n\n  return {\n    ...web3State,\n    connectWallet,\n    disconnectWallet,\n    switchToBaseNetwork,\n  };\n}\n\nexport function useContracts() {\n  const [contractState, setContractState] = useState<ContractState>({\n    marketplaceContract: null,\n    nftContract: null,\n    escrowContract: null,\n    isLoading: false,\n    error: null,\n  });\n\n  const initializeContracts = async (web3Provider: any) => {\n    try {\n      setContractState(prev => ({ ...prev, isLoading: true, error: null }));\n      \n      // Contract addresses for Base Network (these would be actual deployed contracts)\n      const MARKETPLACE_ADDRESS = process.env.VITE_MARKETPLACE_CONTRACT_ADDRESS || '0x...';\n      const NFT_ADDRESS = process.env.VITE_NFT_CONTRACT_ADDRESS || '0x...';\n      const ESCROW_ADDRESS = process.env.VITE_ESCROW_CONTRACT_ADDRESS || '0x...';\n\n      // ABI definitions (simplified for demonstration)\n      const MARKETPLACE_ABI = [\n        'function listItem(uint256 tokenId, uint256 price, address nftContract) external',\n        'function buyItem(uint256 listingId) external payable',\n        'function cancelListing(uint256 listingId) external',\n        'function createAuction(uint256 tokenId, uint256 startPrice, uint256 duration) external',\n        'function placeBid(uint256 auctionId) external payable',\n        'event ItemListed(uint256 indexed listingId, address indexed seller, uint256 tokenId, uint256 price)',\n        'event ItemSold(uint256 indexed listingId, address indexed buyer, uint256 price)',\n      ];\n\n      const NFT_ABI = [\n        'function ownerOf(uint256 tokenId) external view returns (address)',\n        'function approve(address to, uint256 tokenId) external',\n        'function transferFrom(address from, address to, uint256 tokenId) external',\n        'function tokenURI(uint256 tokenId) external view returns (string)',\n        'function balanceOf(address owner) external view returns (uint256)',\n        'function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256)',\n        'event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)',\n      ];\n\n      const ESCROW_ABI = [\n        'function createEscrow(address buyer, address seller, uint256 amount, bytes32 itemHash) external payable returns (uint256)',\n        'function completeEscrow(uint256 escrowId) external',\n        'function disputeEscrow(uint256 escrowId, string reason) external',\n        'function resolveDispute(uint256 escrowId, bool favorBuyer) external',\n        'function getEscrow(uint256 escrowId) external view returns (tuple(address buyer, address seller, uint256 amount, uint8 status))',\n        'event EscrowCreated(uint256 indexed escrowId, address indexed buyer, address indexed seller, uint256 amount)',\n        'event EscrowCompleted(uint256 indexed escrowId)',\n        'event EscrowDisputed(uint256 indexed escrowId, string reason)',\n      ];\n\n      // Initialize contracts (would use actual web3 provider)\n      const mockContract = {\n        // Mock contract methods for development\n        listItem: async (tokenId: string, price: string) => {\n          console.log(`Listing item ${tokenId} for ${price} ETH`);\n          return { hash: '0x...' };\n        },\n        buyItem: async (listingId: string) => {\n          console.log(`Buying item listing ${listingId}`);\n          return { hash: '0x...' };\n        },\n        createEscrow: async (buyer: string, seller: string, amount: string) => {\n          console.log(`Creating escrow: ${buyer} -> ${seller}, amount: ${amount}`);\n          return { hash: '0x...' };\n        },\n        completeEscrow: async (escrowId: string) => {\n          console.log(`Completing escrow ${escrowId}`);\n          return { hash: '0x...' };\n        },\n        transfer: async (to: string, tokenId: string) => {\n          console.log(`Transferring token ${tokenId} to ${to}`);\n          return { hash: '0x...' };\n        },\n        approve: async (spender: string, tokenId: string) => {\n          console.log(`Approving ${spender} for token ${tokenId}`);\n          return { hash: '0x...' };\n        },\n      };\n\n      setContractState({\n        marketplaceContract: mockContract,\n        nftContract: mockContract,\n        escrowContract: mockContract,\n        isLoading: false,\n        error: null,\n      });\n    } catch (error: any) {\n      setContractState(prev => ({\n        ...prev,\n        isLoading: false,\n        error: error.message || 'Failed to initialize contracts'\n      }));\n    }\n  };\n\n  return {\n    ...contractState,\n    initializeContracts,\n  };\n}\n\n// NFT minting contract interactions\nexport function useNftMinting() {\n  const { nftContract } = useContracts();\n\n  const mintNft = async (to: string, territoryX: number, territoryY: number, metadata: any) => {\n    try {\n      // Generate unique token ID\n      const tokenId = Date.now().toString();\n      \n      // Encode metadata for NFT\n      const nftMetadata = {\n        name: `OCSH #${tokenId}`,\n        description: \"On-Chain Survival Handbook - Your gateway to the wasteland\",\n        image: `https://ocsh-game.replit.app/api/nft/${tokenId}/image`,\n        attributes: [\n          { trait_type: \"Territory X\", value: territoryX },\n          { trait_type: \"Territory Y\", value: territoryY },\n          { trait_type: \"Strategic Value\", value: metadata.strategicValue },\n          { trait_type: \"Resources\", value: metadata.resources },\n          { trait_type: \"Threat Level\", value: metadata.threatLevel },\n        ]\n      };\n\n      console.log(`Minting NFT for ${to} with territory (${territoryX}, ${territoryY})`);\n      \n      // Mock blockchain transaction (replace with actual smart contract call)\n      const tx = await nftContract?.mint(to, tokenId, JSON.stringify(nftMetadata));\n      \n      return { tokenId, txHash: tx?.hash || `0x${Math.random().toString(16).substring(2, 66)}` };\n    } catch (error) {\n      console.error('Failed to mint NFT:', error);\n      throw error;\n    }\n  };\n\n  const transferNft = async (from: string, to: string, tokenId: string) => {\n    try {\n      const tx = await nftContract?.transfer(from, to, tokenId);\n      return tx;\n    } catch (error) {\n      console.error('Failed to transfer NFT:', error);\n      throw error;\n    }\n  };\n\n  return {\n    mintNft,\n    transferNft,\n  };\n}\n\n// Trading contract interactions\nexport function useTradingContracts() {\n  const { marketplaceContract, nftContract, escrowContract } = useContracts();\n\n  const listItemForSale = async (tokenId: string, priceEth: string) => {\n    try {\n      // Convert ETH to wei\n      const priceWei = (parseFloat(priceEth) * 1e18).toString();\n      \n      // Approve marketplace to transfer NFT\n      await nftContract?.approve(process.env.VITE_MARKETPLACE_CONTRACT_ADDRESS, tokenId);\n      \n      // List item on marketplace\n      const tx = await marketplaceContract?.listItem(tokenId, priceWei, process.env.VITE_NFT_CONTRACT_ADDRESS);\n      \n      return tx;\n    } catch (error) {\n      console.error('Failed to list item:', error);\n      throw error;\n    }\n  };\n\n  const buyItem = async (listingId: string, priceWei: string) => {\n    try {\n      const tx = await marketplaceContract?.buyItem(listingId, { value: priceWei });\n      return tx;\n    } catch (error) {\n      console.error('Failed to buy item:', error);\n      throw error;\n    }\n  };\n\n  const createTradeEscrow = async (buyerId: string, sellerId: string, amountWei: string, itemData: any) => {\n    try {\n      const tx = await escrowContract?.createEscrow(buyerId, sellerId, amountWei, itemData.hash, { value: amountWei });\n      return tx;\n    } catch (error) {\n      console.error('Failed to create escrow:', error);\n      throw error;\n    }\n  };\n\n  const completeEscrow = async (escrowId: string) => {\n    try {\n      const tx = await escrowContract?.completeEscrow(escrowId);\n      return tx;\n    } catch (error) {\n      console.error('Failed to complete escrow:', error);\n      throw error;\n    }\n  };\n\n  const disputeEscrow = async (escrowId: string, reason: string) => {\n    try {\n      const tx = await escrowContract?.disputeEscrow(escrowId, reason);\n      return tx;\n    } catch (error) {\n      console.error('Failed to dispute escrow:', error);\n      throw error;\n    }\n  };\n\n  return {\n    listItemForSale,\n    buyItem,\n    createTradeEscrow,\n    completeEscrow,\n    disputeEscrow,\n  };\n}","size_bytes":12305},"client/src/lib/courier-api.ts":{"content":"import { apiRequest } from \"./queryClient\";\n\nexport interface EncodeResult {\n  frames: string;\n  transactionId: string;\n  frameCount: number;\n  crc32: string;\n}\n\nexport interface DecodeResult {\n  txHex: string;\n  isValid: boolean;\n  crc32: string;\n}\n\nexport interface BroadcastResult {\n  txHash: string;\n  success: boolean;\n  network: string;\n}\n\nexport class CourierAPI {\n  async encodeTx(txHex: string, userId: string): Promise<EncodeResult> {\n    const response = await apiRequest(\"POST\", \"/api/courier/encode\", {\n      txHex,\n      userId,\n    });\n    return await response.json();\n  }\n\n  async decodeFrames(frames: string): Promise<DecodeResult> {\n    const response = await apiRequest(\"POST\", \"/api/courier/decode\", {\n      frames,\n    });\n    return await response.json();\n  }\n\n  async broadcastTx(txHex: string, network = \"ethereum\"): Promise<BroadcastResult> {\n    const response = await apiRequest(\"POST\", \"/api/courier/broadcast\", {\n      txHex,\n      network,\n    });\n    return await response.json();\n  }\n\n  async getUserTransactions(userId: string): Promise<any[]> {\n    const response = await apiRequest(\"GET\", `/api/courier/transactions/${userId}`);\n    return await response.json();\n  }\n}\n\nexport const courierApi = new CourierAPI();\n","size_bytes":1250},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard-old.tsx":{"content":"import { useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { WastelandText, WastelandButton } from \"@/components/wasteland-ui\";\nimport { \n  WastelandMap, \n  SurvivorStatus, \n  AllianceControl, \n  BattleInterface, \n  CommunicationsInterface, \n  WastelandLeaderboard \n} from \"@/components/wasteland-dashboard\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\n\nexport default function Dashboard() {\n  return (\n    <div className=\"min-h-screen pb-16\">\n      {/* Wasteland Welcome */}\n      <section className=\"relative py-16 overflow-hidden\">\n        <div className=\"absolute inset-0 bg-wasteland-atmosphere opacity-40\" />\n        <div className=\"relative container mx-auto px-6 text-center\">\n          <WastelandText \n            variant=\"title\" \n            glow \n            glitch \n            className=\"text-6xl md:text-8xl mb-4\"\n            data-text=\"WELCOME TO THE WASTELAND\"\n          >\n            WELCOME TO THE WASTELAND\n          </WastelandText>\n          <WastelandText variant=\"body\" className=\"text-xl md:text-2xl text-ash-gray max-w-3xl mx-auto\">\n            Survive. Adapt. Conquer. The old world is gone. Build your legacy in the ashes.\n          </WastelandText>\n          <div className=\"mt-8 flex gap-4 justify-center\">\n            <div className=\"flex items-center gap-2 text-radiation-green animate-pulse\">\n              <div className=\"w-2 h-2 bg-radiation-green rounded-full\" />\n              <WastelandText variant=\"terminal\">SYSTEMS ONLINE</WastelandText>\n            </div>\n            <div className=\"flex items-center gap-2 text-wasteland-orange\">\n              <div className=\"w-2 h-2 bg-wasteland-orange rounded-full animate-radiation-pulse\" />\n              <WastelandText variant=\"terminal\">BASE NETWORK</WastelandText>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Main content */}\n      <main className=\"container mx-auto px-4 py-8\">\n        \n        {/* Hero section */}\n        <section className=\"mb-12 text-center\">\n          <div className=\"mb-8\">\n            <h2 className=\"text-5xl md:text-7xl font-cyber font-black mb-4 text-transparent bg-clip-text bg-gradient-to-r from-cyber-blue via-toxic-green to-warning-orange animate-flicker\">\n              SURVIVAL PROTOCOL\n            </h2>\n            <p className=\"text-xl text-gray-300 max-w-2xl mx-auto\">\n              Enter the post-apocalyptic world where only the strongest survive. Control territories, forge alliances, and dominate the wasteland.\n            </p>\n          </div>\n          \n          {/* Quick stats bar */}\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 max-w-4xl mx-auto\">\n            <div className=\"bg-card-bg border border-border-gray p-4 rounded-lg terminal-border\">\n              <div className=\"text-2xl font-bold text-cyber-blue\" data-testid=\"text-total-survivors\">2,847</div>\n              <div className=\"text-sm text-gray-400\">SURVIVORS</div>\n            </div>\n            <div className=\"bg-card-bg border border-border-gray p-4 rounded-lg terminal-border\">\n              <div className=\"text-2xl font-bold text-toxic-green\" data-testid=\"text-total-territories\">156</div>\n              <div className=\"text-sm text-gray-400\">TERRITORIES</div>\n            </div>\n            <div className=\"bg-card-bg border border-border-gray p-4 rounded-lg terminal-border\">\n              <div className=\"text-2xl font-bold text-warning-orange\" data-testid=\"text-total-alliances\">89</div>\n              <div className=\"text-sm text-gray-400\">ALLIANCES</div>\n            </div>\n            <div className=\"bg-card-bg border border-border-gray p-4 rounded-lg terminal-border\">\n              <div className=\"text-2xl font-bold text-danger-red\" data-testid=\"text-total-battles\">12,439</div>\n              <div className=\"text-sm text-gray-400\">BATTLES</div>\n            </div>\n          </div>\n        </section>\n\n        {/* Main dashboard grid */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          \n          {/* Left column - Player status and territory map */}\n          <div className=\"lg:col-span-2 space-y-8\">\n            \n            {/* Player status card */}\n            <PlayerStatus />\n            \n            {/* Territory control map */}\n            <TerritoryMap />\n            \n            {/* Battle system */}\n            <BattleInterface />\n            \n          </div>\n          \n          {/* Right column - Alliance and messaging */}\n          <div className=\"space-y-8\">\n            \n            {/* Alliance status */}\n            <AllianceCard />\n            \n            {/* Messaging system */}\n            <MessagingInterface />\n            \n            {/* Foundry Courier Integration */}\n            <CourierInterface />\n            \n            {/* Leaderboard */}\n            <Leaderboard />\n            \n          </div>\n        </div>\n      </main>\n\n      {/* Footer */}\n      <footer className=\"border-t border-border-gray bg-darker-bg/90 backdrop-blur-sm mt-16\">\n        <div className=\"container mx-auto px-4 py-8\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            <div>\n              <h4 className=\"text-lg font-bold text-cyber-blue mb-4\">SURVIVAL PROTOCOL</h4>\n              <p className=\"text-gray-400 text-sm\">\n                The post-apocalyptic Web3 gaming experience where survival depends on strategy, alliances, and technological resilience.\n              </p>\n            </div>\n            <div>\n              <h4 className=\"text-lg font-bold text-toxic-green mb-4\">SYSTEMS</h4>\n              <ul className=\"space-y-2 text-sm text-gray-400\">\n                <li>Territory Control</li>\n                <li>Alliance Formation</li>\n                <li>Battle Mechanics</li>\n                <li>On-Chain Messaging</li>\n                <li>Offline Transactions</li>\n              </ul>\n            </div>\n            <div>\n              <h4 className=\"text-lg font-bold text-warning-orange mb-4\">NETWORK</h4>\n              <ul className=\"space-y-2 text-sm text-gray-400\">\n                <li>Base Network</li>\n                <li>Foundry Courier</li>\n                <li>IPFS Storage</li>\n                <li>ENS Domains</li>\n                <li>Offline-First</li>\n              </ul>\n            </div>\n          </div>\n          <div className=\"border-t border-border-gray mt-8 pt-8 text-center text-gray-500 text-sm\">\n            <p>&copy; 2024 OCSH - Onchain Survival Kit. Built for the post-digital wasteland.</p>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":6647},"client/src/pages/dashboard-realistic.tsx":{"content":"import { Link } from \"wouter\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  RealisticTerritoryMap,\n  RealisticPlayerStatus, \n  RealisticBattleInterface, \n  RealisticCommunications, \n  RealisticLeaderboard,\n  RealisticWastelandCard,\n  RealisticText,\n  RealisticButton\n} from \"@/components/realistic-wasteland\";\n// Removed protocol grid import\n// Removed social-interaction-hub import\nimport { StrategicTradingInterface } from \"../components/strategic-trading-interface\";\nimport { NFTGate } from \"@/pages/nft-gate\";\nimport { ContinuumTerminal } from \"@/components/continuum-terminal\";\n\nexport default function RealisticDashboard() {\n  // Development mode indicator\n  const DEVELOPMENT_MODE = true; // Set to false when ready for Web3 testing\n  \n  return (\n    <NFTGate>\n    <div className=\"min-h-screen bg-neutral-950 text-neutral-100\">\n      {/* Development Mode Banner */}\n      {DEVELOPMENT_MODE && (\n        <div className=\"bg-amber-900/20 border-b border-amber-700/50 px-6 py-2\">\n          <p className=\"text-xs text-amber-400 text-center font-mono uppercase\">\n            Development Mode - Wallet Connection Disabled\n          </p>\n        </div>\n      )}\n      \n      {/* Top Bar */}\n      <header className=\"border-b border-neutral-800 bg-neutral-900/95 backdrop-blur-sm\">\n        <div className=\"container mx-auto px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-4\">\n              <div className=\"w-8 h-8 bg-neutral-700 border border-neutral-600 flex items-center justify-center\">\n                <span className=\"text-neutral-300 text-sm\">◉</span>\n              </div>\n              <div>\n                <h1 className=\"text-xl font-bold text-neutral-100 tracking-tight\">BLOKBOY 1000</h1>\n                <p className=\"text-xs text-neutral-400 uppercase tracking-wider\">OCSH Wasteland Operations Terminal</p>\n              </div>\n            </div>\n            <div className=\"flex items-center gap-4\">\n              <div className=\"text-xs text-neutral-400\">\n                <span className=\"text-neutral-500\">Network:</span> <span className=\"text-emerald-400\">CONNECTED</span>\n              </div>\n              <Link href=\"/handheld\">\n                <RealisticButton variant=\"secondary\" size=\"sm\">\n                  Handheld Terminal\n                </RealisticButton>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"container mx-auto px-6 py-8\">\n        {/* Status Overview */}\n        <section className=\"mb-8\">\n          <div className=\"grid grid-cols-4 gap-6\">\n            <RealisticWastelandCard variant=\"dark\" className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-neutral-100 font-mono\">2,847</div>\n              <div className=\"text-xs text-neutral-500 uppercase tracking-wider\">Active Survivors</div>\n            </RealisticWastelandCard>\n            <RealisticWastelandCard variant=\"dark\" className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-neutral-100 font-mono\">156</div>\n              <div className=\"text-xs text-neutral-500 uppercase tracking-wider\">Controlled Zones</div>\n            </RealisticWastelandCard>\n            <RealisticWastelandCard variant=\"dark\" className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-neutral-100 font-mono\">89</div>\n              <div className=\"text-xs text-neutral-500 uppercase tracking-wider\">Active Factions</div>\n            </RealisticWastelandCard>\n            <RealisticWastelandCard variant=\"dark\" className=\"p-4 text-center\">\n              <div className=\"text-2xl font-bold text-neutral-100 font-mono\">12,439</div>\n              <div className=\"text-xs text-neutral-500 uppercase tracking-wider\">Total Engagements</div>\n            </RealisticWastelandCard>\n          </div>\n        </section>\n\n        {/* Main Interface */}\n        <Tabs defaultValue=\"overview\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-7 bg-neutral-900 border border-neutral-700 h-12\">\n            <TabsTrigger \n              value=\"overview\" \n              className=\"text-xs font-mono uppercase tracking-wider data-[state=active]:bg-neutral-700 data-[state=active]:text-neutral-100\"\n            >\n              Overview\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"territories\" \n              className=\"text-xs font-mono uppercase tracking-wider data-[state=active]:bg-neutral-700 data-[state=active]:text-neutral-100\"\n            >\n              Territories\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"combat\" \n              className=\"text-xs font-mono uppercase tracking-wider data-[state=active]:bg-neutral-700 data-[state=active]:text-neutral-100\"\n            >\n              Combat\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"factions\" \n              className=\"text-xs font-mono uppercase tracking-wider data-[state=active]:bg-neutral-700 data-[state=active]:text-neutral-100\"\n            >\n              Factions\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"trading\" \n              className=\"text-xs font-mono uppercase tracking-wider data-[state=active]:bg-neutral-700 data-[state=active]:text-neutral-100\"\n            >\n              Trading\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"communications\" \n              className=\"text-xs font-mono uppercase tracking-wider data-[state=active]:bg-neutral-700 data-[state=active]:text-neutral-100\"\n            >\n              Comms\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"continuum\" \n              className=\"text-xs font-mono uppercase tracking-wider data-[state=active]:bg-neutral-600 data-[state=active]:text-neutral-100\"\n            >\n              Continuum\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"overview\" className=\"space-y-6 mt-8\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n              <div className=\"lg:col-span-2\">\n                <RealisticPlayerStatus />\n              </div>\n              <div>\n                <RealisticLeaderboard />\n              </div>\n            </div>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <RealisticBattleInterface />\n              <RealisticCommunications />\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"territories\" className=\"space-y-6 mt-8\">\n            <RealisticTerritoryMap />\n          </TabsContent>\n\n          <TabsContent value=\"combat\" className=\"space-y-6 mt-8\">\n            <RealisticBattleInterface />\n          </TabsContent>\n\n          <TabsContent value=\"factions\" className=\"space-y-6 mt-8\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <RealisticWastelandCard variant=\"default\" className=\"p-6\">\n                <RealisticText variant=\"subtitle\" className=\"mb-4\">Alliance Management</RealisticText>\n                <div className=\"space-y-4\">\n                  <div className=\"flex justify-between items-center\">\n                    <RealisticText variant=\"body\">Current Alliance</RealisticText>\n                    <RealisticText variant=\"body\" className=\"font-mono text-neutral-100\">WASTELAND_BROTHERHOOD</RealisticText>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <RealisticText variant=\"body\">Role</RealisticText>\n                    <RealisticText variant=\"body\" className=\"text-amber-400\">LIEUTENANT</RealisticText>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <RealisticText variant=\"body\">Members</RealisticText>\n                    <RealisticText variant=\"body\">24 Active</RealisticText>\n                  </div>\n                  <div className=\"pt-4 space-y-2\">\n                    <RealisticButton variant=\"primary\" className=\"w-full\" size=\"sm\">\n                      Alliance Operations\n                    </RealisticButton>\n                    <RealisticButton variant=\"ghost\" className=\"w-full\" size=\"sm\">\n                      Leave Alliance\n                    </RealisticButton>\n                  </div>\n                </div>\n              </RealisticWastelandCard>\n              <RealisticLeaderboard />\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"continuum\" className=\"space-y-6 mt-8\">\n            <ContinuumTerminal />\n          </TabsContent>\n\n          <TabsContent value=\"trading\" className=\"space-y-6 mt-8\">\n            <StrategicTradingInterface />\n          </TabsContent>\n\n          <TabsContent value=\"communications\" className=\"space-y-6 mt-8\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <RealisticCommunications />\n              <RealisticWastelandCard variant=\"default\" className=\"p-6\">\n                <RealisticText variant=\"subtitle\" className=\"mb-4\">Alliance Communications</RealisticText>\n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center justify-between p-3 bg-neutral-800 border border-neutral-700\">\n                    <span className=\"text-sm text-neutral-300\">Active Members</span>\n                    <span className=\"text-emerald-400 font-mono\">24 Online</span>\n                  </div>\n                  <div className=\"flex items-center justify-between p-3 bg-neutral-800 border border-neutral-700\">\n                    <span className=\"text-sm text-neutral-300\">Territory Status</span>\n                    <span className=\"text-amber-400 font-mono\">Secured</span>\n                  </div>\n                  <RealisticButton variant=\"primary\" className=\"w-full\" size=\"sm\">\n                    Alliance Channel\n                  </RealisticButton>\n                </div>\n              </RealisticWastelandCard>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </main>\n    </div>\n    </NFTGate>\n  );\n}","size_bytes":10152},"client/src/pages/dashboard.tsx":{"content":"import { Link } from \"wouter\";\nimport { WastelandText, WastelandButton } from \"@/components/wasteland-ui\";\nimport { \n  SimpleWastelandMap as WastelandMap, \n  SimpleSurvivorStatus as SurvivorStatus, \n  SimpleAllianceControl as AllianceControl, \n  SimpleBattleInterface as BattleInterface, \n  SimpleCommunicationsInterface as CommunicationsInterface, \n  SimpleWastelandLeaderboard as WastelandLeaderboard \n} from \"@/components/simple-wasteland\";\nimport { DarknetContinuumRelic } from \"@/components/darknet-continuum\";\nimport { SocialInteractionHub } from \"../components/social-interaction-hub\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\nexport default function Dashboard() {\n  return (\n    <div className=\"min-h-screen pb-16\">\n      {/* Quick Game Header */}\n      <section className=\"relative py-8 border-b-2 border-wasteland-orange\">\n        <div className=\"container mx-auto px-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <WastelandText variant=\"title\" glow className=\"text-4xl mb-2\">\n                WASTELAND CONTROL\n              </WastelandText>\n              <div className=\"flex gap-6 text-sm\">\n                <span className=\"text-radiation-green\">⚡ ONLINE</span>\n                <span className=\"text-steel-blue\">📡 BASE NETWORK</span>\n                <span className=\"text-toxic-yellow\">⚔️ 3 BATTLES</span>\n              </div>\n            </div>\n            <div className=\"flex gap-4\">\n              <WastelandButton variant=\"primary\" size=\"sm\">CLAIM TERRITORY</WastelandButton>\n              <WastelandButton variant=\"danger\" size=\"sm\">START BATTLE</WastelandButton>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Main Operations Center */}\n      <main className=\"relative container mx-auto px-6 py-8\">\n        {/* Quick Stats */}\n        <section className=\"mb-8\">\n          <div className=\"grid grid-cols-4 gap-4\">\n            <div className=\"pip-boy-screen p-3 text-center\">\n              <div className=\"text-2xl font-title text-wasteland-orange\" data-testid=\"text-total-survivors\">2,847</div>\n              <div className=\"text-xs text-ash-gray\">PLAYERS</div>\n            </div>\n            <div className=\"pip-boy-screen p-3 text-center\">\n              <div className=\"text-2xl font-title text-radiation-green\" data-testid=\"text-total-territories\">156</div>\n              <div className=\"text-xs text-ash-gray\">ZONES</div>\n            </div>\n            <div className=\"pip-boy-screen p-3 text-center\">\n              <div className=\"text-2xl font-title text-steel-blue\" data-testid=\"text-total-alliances\">89</div>\n              <div className=\"text-xs text-ash-gray\">FACTIONS</div>\n            </div>\n            <div className=\"pip-boy-screen p-3 text-center\">\n              <div className=\"text-2xl font-title text-rust-red\" data-testid=\"text-total-battles\">12,439</div>\n              <div className=\"text-xs text-ash-gray\">BATTLES</div>\n            </div>\n          </div>\n        </section>\n\n        {/* Control Panels */}\n        <Tabs defaultValue=\"overview\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-6 bg-rusted-metal border-2 border-wasteland-orange mb-8\">\n            <TabsTrigger value=\"overview\" className=\"font-title text-xs data-[state=active]:bg-wasteland-orange data-[state=active]:text-dark-wasteland\">\n              OVERVIEW\n            </TabsTrigger>\n            <TabsTrigger value=\"territories\" className=\"font-title text-xs data-[state=active]:bg-wasteland-orange data-[state=active]:text-dark-wasteland\">\n              TERRITORIES  \n            </TabsTrigger>\n            <TabsTrigger value=\"combat\" className=\"font-title text-xs data-[state=active]:bg-wasteland-orange data-[state=active]:text-dark-wasteland\">\n              COMBAT\n            </TabsTrigger>\n            <TabsTrigger value=\"factions\" className=\"font-title text-xs data-[state=active]:bg-wasteland-orange data-[state=active]:text-dark-wasteland\">\n              FACTIONS\n            </TabsTrigger>\n            <TabsTrigger value=\"continuum\" className=\"font-title text-xs data-[state=active]:bg-radiation-green data-[state=active]:text-dark-wasteland\">\n              CONTINUUM\n            </TabsTrigger>\n            <TabsTrigger value=\"communications\" className=\"font-title text-xs data-[state=active]:bg-wasteland-orange data-[state=active]:text-dark-wasteland\">\n              COMMS\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"overview\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n              <div className=\"lg:col-span-2\">\n                <SurvivorStatus />\n              </div>\n              <div>\n                <WastelandLeaderboard />\n              </div>\n            </div>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <AllianceControl />\n              <CommunicationsInterface />\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"territories\" className=\"space-y-6\">\n            <WastelandMap />\n          </TabsContent>\n\n          <TabsContent value=\"combat\" className=\"space-y-6\">\n            <BattleInterface />\n          </TabsContent>\n\n          <TabsContent value=\"factions\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <AllianceControl />\n              <WastelandLeaderboard />\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"continuum\" className=\"space-y-6\">\n            <DarknetContinuumRelic />\n          </TabsContent>\n\n          <TabsContent value=\"communications\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <CommunicationsInterface />\n              <SocialInteractionHub />\n            </div>\n          </TabsContent>\n        </Tabs>\n      </main>\n    </div>\n  );\n}","size_bytes":5954},"client/src/pages/handheld-old.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Link } from \"wouter\";\nimport { ArrowLeft, Radio, Terminal, Wifi, WifiOff, Activity, Shield, AlertTriangle } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { courierApi } from \"@/lib/courier-api\";\n\nexport default function Handheld() {\n  const [isOnline, setIsOnline] = useState(navigator.onLine);\n  const [txHex, setTxHex] = useState(\"\");\n  const [frames, setFrames] = useState(\"\");\n  const [encodedResult, setEncodedResult] = useState(\"\");\n  const [decodedResult, setDecodedResult] = useState(\"\");\n  const [isEncoding, setIsEncoding] = useState(false);\n  const [isDecoding, setIsDecoding] = useState(false);\n  const [isBroadcasting, setBroadcasting] = useState(false);\n  const { toast } = useToast();\n\n  useEffect(() => {\n    const handleOnline = () => setIsOnline(true);\n    const handleOffline = () => setIsOnline(false);\n\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n\n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, []);\n\n  const handleEncodeTx = async () => {\n    if (!txHex.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a transaction hex\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsEncoding(true);\n    try {\n      const result = await courierApi.encodeTx(txHex, \"user-id\"); // TODO: Get actual user ID\n      setEncodedResult(result.frames);\n      toast({\n        title: \"Success\",\n        description: \"Transaction encoded successfully\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to encode transaction\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsEncoding(false);\n    }\n  };\n\n  const handleDecodeFrames = async () => {\n    if (!frames.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter frames to decode\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsDecoding(true);\n    try {\n      const result = await courierApi.decodeFrames(frames);\n      setDecodedResult(result.txHex);\n      toast({\n        title: \"Success\",\n        description: \"Frames decoded successfully\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to decode frames\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsDecoding(false);\n    }\n  };\n\n  const handleBroadcastTx = async () => {\n    if (!decodedResult.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"No decoded transaction to broadcast\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setBroadcasting(true);\n    try {\n      const result = await courierApi.broadcastTx(decodedResult);\n      toast({\n        title: \"Success\",\n        description: `Transaction broadcasted: ${result.txHash}`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to broadcast transaction\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setBroadcasting(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-dark-bg\">\n      {/* Header */}\n      <header className=\"border-b border-border-gray bg-darker-bg/90 backdrop-blur-sm\">\n        <div className=\"container mx-auto px-4 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <Link href=\"/\">\n                <Button \n                  variant=\"ghost\" \n                  size=\"sm\"\n                  className=\"text-cyber-blue hover:text-cyber-blue hover:bg-cyber-blue/10\"\n                  data-testid=\"button-back-dashboard\"\n                >\n                  <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                  DASHBOARD\n                </Button>\n              </Link>\n              <div className=\"w-8 h-8 bg-warning-orange/20 border border-warning-orange rounded flex items-center justify-center\">\n                <Radio className=\"w-4 h-4 text-warning-orange\" />\n              </div>\n              <div>\n                <h1 className=\"text-xl font-cyber font-bold text-warning-orange\">HANDHELD TERMINAL</h1>\n                <p className=\"text-xs text-gray-400\">Foundry Courier Interface</p>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center space-x-4\">\n              <Badge \n                variant={isOnline ? \"default\" : \"destructive\"}\n                className={`${isOnline ? 'bg-toxic-green/20 text-toxic-green border-toxic-green' : 'bg-danger-red/20 text-danger-red border-danger-red'}`}\n              >\n                {isOnline ? <Wifi className=\"w-3 h-3 mr-1\" /> : <WifiOff className=\"w-3 h-3 mr-1\" />}\n                {isOnline ? \"ONLINE\" : \"OFFLINE\"}\n              </Badge>\n              <Badge className=\"bg-cyber-blue/20 text-cyber-blue border-cyber-blue\">\n                <Activity className=\"w-3 h-3 mr-1\" />\n                COURIER ACTIVE\n              </Badge>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"container mx-auto px-4 py-8\">\n        \n        {/* Status Section */}\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-8\">\n          <Card className=\"bg-card-bg border-border-gray\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-sm text-gray-400 flex items-center\">\n                <Terminal className=\"w-4 h-4 mr-2\" />\n                BACKEND STATUS\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between text-sm\">\n                  <span>Python Backend:</span>\n                  <Badge className=\"bg-toxic-green/20 text-toxic-green border-toxic-green\">ACTIVE</Badge>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span>Error Correction:</span>\n                  <span className=\"text-cyber-blue\">CRC32 + Parity</span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span>Supported Channels:</span>\n                  <span className=\"text-gray-300\">Radio, SMS, Mesh</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-card-bg border-border-gray\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-sm text-gray-400 flex items-center\">\n                <Shield className=\"w-4 h-4 mr-2\" />\n                SECURITY STATUS\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between text-sm\">\n                  <span>Private Keys:</span>\n                  <Badge className=\"bg-toxic-green/20 text-toxic-green border-toxic-green\">NEVER STORED</Badge>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span>Data Integrity:</span>\n                  <span className=\"text-cyber-blue\">Verified</span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span>Offline Ready:</span>\n                  <span className=\"text-toxic-green\">YES</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-card-bg border-border-gray\">\n            <CardHeader className=\"pb-3\">\n              <CardTitle className=\"text-sm text-gray-400 flex items-center\">\n                <AlertTriangle className=\"w-4 h-4 mr-2\" />\n                TRANSMISSION\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between text-sm\">\n                  <span>Last TX:</span>\n                  <span className=\"text-gray-300\">12:34:56</span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span>Success Rate:</span>\n                  <span className=\"text-toxic-green\">98.7%</span>\n                </div>\n                <div className=\"flex justify-between text-sm\">\n                  <span>Queue:</span>\n                  <span className=\"text-warning-orange\">3 pending</span>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Main Interface */}\n        <Card className=\"bg-card-bg border-border-gray terminal-border\">\n          <CardHeader>\n            <CardTitle className=\"text-xl font-cyber text-cyber-blue\">FOUNDRY COURIER INTERFACE</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Tabs defaultValue=\"encode\" className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-3 bg-darker-bg\">\n                <TabsTrigger \n                  value=\"encode\" \n                  className=\"data-[state=active]:bg-cyber-blue/20 data-[state=active]:text-cyber-blue\"\n                  data-testid=\"tab-encode\"\n                >\n                  ENCODE TX\n                </TabsTrigger>\n                <TabsTrigger \n                  value=\"decode\" \n                  className=\"data-[state=active]:bg-toxic-green/20 data-[state=active]:text-toxic-green\"\n                  data-testid=\"tab-decode\"\n                >\n                  DECODE FRAMES\n                </TabsTrigger>\n                <TabsTrigger \n                  value=\"broadcast\" \n                  className=\"data-[state=active]:bg-warning-orange/20 data-[state=active]:text-warning-orange\"\n                  data-testid=\"tab-broadcast\"\n                >\n                  BROADCAST\n                </TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"encode\" className=\"space-y-4\">\n                <div className=\"space-y-4\">\n                  <div>\n                    <label className=\"text-sm text-gray-400 mb-2 block\">SIGNED TRANSACTION HEX</label>\n                    <Textarea\n                      placeholder=\"0x02f8b1012a8405f5e100825208943b2ccdd1ce0e65442045b2b7d54e8d0cbb7b3d3187b1a2bc2ec50000080c080a0...\"\n                      value={txHex}\n                      onChange={(e) => setTxHex(e.target.value)}\n                      className=\"bg-darker-bg border-border-gray text-white min-h-[100px] font-mono text-xs\"\n                      data-testid=\"input-tx-hex\"\n                    />\n                  </div>\n                  \n                  <Button \n                    onClick={handleEncodeTx}\n                    disabled={isEncoding || !txHex.trim()}\n                    className=\"w-full bg-cyber-blue/20 border border-cyber-blue text-cyber-blue hover:bg-cyber-blue hover:text-black\"\n                    data-testid=\"button-encode-tx\"\n                  >\n                    {isEncoding ? \"ENCODING...\" : \"ENCODE TRANSACTION\"}\n                  </Button>\n\n                  {encodedResult && (\n                    <div className=\"space-y-2\">\n                      <label className=\"text-sm text-gray-400\">ENCODED FRAMES (READY FOR TRANSMISSION)</label>\n                      <Textarea\n                        value={encodedResult}\n                        readOnly\n                        className=\"bg-darker-bg border-toxic-green text-toxic-green min-h-[100px] font-mono text-xs\"\n                        data-testid=\"output-encoded-frames\"\n                      />\n                      <p className=\"text-xs text-gray-500\">\n                        These frames can be transmitted via radio, SMS, mesh networks, or any data carrier.\n                      </p>\n                    </div>\n                  )}\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"decode\" className=\"space-y-4\">\n                <div className=\"space-y-4\">\n                  <div>\n                    <label className=\"text-sm text-gray-400 mb-2 block\">RECEIVED FRAMES</label>\n                    <Textarea\n                      placeholder=\"FC:01:0F:1A2B3C4D...\"\n                      value={frames}\n                      onChange={(e) => setFrames(e.target.value)}\n                      className=\"bg-darker-bg border-border-gray text-white min-h-[100px] font-mono text-xs\"\n                      data-testid=\"input-frames\"\n                    />\n                  </div>\n                  \n                  <Button \n                    onClick={handleDecodeFrames}\n                    disabled={isDecoding || !frames.trim()}\n                    className=\"w-full bg-toxic-green/20 border border-toxic-green text-toxic-green hover:bg-toxic-green hover:text-black\"\n                    data-testid=\"button-decode-frames\"\n                  >\n                    {isDecoding ? \"DECODING...\" : \"DECODE FRAMES\"}\n                  </Button>\n\n                  {decodedResult && (\n                    <div className=\"space-y-2\">\n                      <label className=\"text-sm text-gray-400\">RECOVERED TRANSACTION</label>\n                      <Textarea\n                        value={decodedResult}\n                        readOnly\n                        className=\"bg-darker-bg border-cyber-blue text-cyber-blue min-h-[100px] font-mono text-xs\"\n                        data-testid=\"output-decoded-tx\"\n                      />\n                      <p className=\"text-xs text-gray-500\">\n                        Transaction successfully recovered and verified. Ready for broadcast.\n                      </p>\n                    </div>\n                  )}\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"broadcast\" className=\"space-y-4\">\n                <div className=\"space-y-4\">\n                  <div className=\"p-4 bg-darker-bg border border-warning-orange/30 rounded\">\n                    <div className=\"flex items-center space-x-2 mb-2\">\n                      <AlertTriangle className=\"w-4 h-4 text-warning-orange\" />\n                      <span className=\"text-sm font-semibold text-warning-orange\">BROADCAST STATUS</span>\n                    </div>\n                    <div className=\"text-xs text-gray-400\">\n                      {decodedResult ? \n                        \"Transaction ready for broadcast to blockchain network.\" : \n                        \"No decoded transaction available. Decode frames first.\"\n                      }\n                    </div>\n                  </div>\n\n                  {decodedResult && (\n                    <div>\n                      <label className=\"text-sm text-gray-400 mb-2 block\">TRANSACTION TO BROADCAST</label>\n                      <Textarea\n                        value={decodedResult}\n                        readOnly\n                        className=\"bg-darker-bg border-border-gray text-white min-h-[80px] font-mono text-xs\"\n                        data-testid=\"display-broadcast-tx\"\n                      />\n                    </div>\n                  )}\n                  \n                  <Button \n                    onClick={handleBroadcastTx}\n                    disabled={isBroadcasting || !decodedResult || !isOnline}\n                    className=\"w-full bg-warning-orange/20 border border-warning-orange text-warning-orange hover:bg-warning-orange hover:text-black\"\n                    data-testid=\"button-broadcast-tx\"\n                  >\n                    {isBroadcasting ? \"BROADCASTING...\" : \"BROADCAST TO NETWORK\"}\n                  </Button>\n\n                  {!isOnline && (\n                    <p className=\"text-xs text-danger-red text-center\">\n                      Network connection required for broadcasting\n                    </p>\n                  )}\n                </div>\n              </TabsContent>\n            </Tabs>\n          </CardContent>\n        </Card>\n\n        {/* Commands Reference */}\n        <Card className=\"bg-card-bg border-border-gray mt-8\">\n          <CardHeader>\n            <CardTitle className=\"text-lg font-cyber text-toxic-green\">COMMAND REFERENCE</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 text-sm font-mono\">\n              <div>\n                <h4 className=\"text-cyber-blue font-semibold mb-2\">ENCODING COMMANDS</h4>\n                <div className=\"space-y-1 text-gray-400\">\n                  <div>encode-tx --hex &lt;TX_HEX&gt; --output frames.txt</div>\n                  <div>encode-tx --hex &lt;TX_HEX&gt; --parity</div>\n                  <div>encode-tx --hex &lt;TX_HEX&gt; --frame-size 64</div>\n                </div>\n              </div>\n              <div>\n                <h4 className=\"text-toxic-green font-semibold mb-2\">DECODING COMMANDS</h4>\n                <div className=\"space-y-1 text-gray-400\">\n                  <div>decode-frames --input frames.txt --output tx.hex</div>\n                  <div>decode-frames --frames \"FC:01:...\"</div>\n                  <div>verify-frames --input frames.txt</div>\n                </div>\n              </div>\n              <div>\n                <h4 className=\"text-warning-orange font-semibold mb-2\">BROADCAST COMMANDS</h4>\n                <div className=\"space-y-1 text-gray-400\">\n                  <div>push-eth --hex &lt;TX_HEX&gt; --rpc-url &lt;URL&gt;</div>\n                  <div>push-btc --hex &lt;TX_HEX&gt; --rpc-url &lt;URL&gt;</div>\n                  <div>list-services</div>\n                </div>\n              </div>\n              <div>\n                <h4 className=\"text-danger-red font-semibold mb-2\">UTILITY COMMANDS</h4>\n                <div className=\"space-y-1 text-gray-400\">\n                  <div>help</div>\n                  <div>status</div>\n                  <div>test-connectivity</div>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </main>\n    </div>\n  );\n}\n","size_bytes":18451},"client/src/pages/handheld-realistic.tsx":{"content":"import { useState, useRef, useEffect } from 'react';\nimport { Link } from 'wouter';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { RealisticWastelandCard, RealisticText, RealisticButton } from \"@/components/realistic-wasteland\";\n// Removed unused imports for cleanup\n\nexport default function RealisticHandheld() {\n  const [isBooted, setIsBooted] = useState(false);\n  const [terminalLines, setTerminalLines] = useState<string[]>([]);\n  const [currentInput, setCurrentInput] = useState('');\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [screenSize, setScreenSize] = useState({ width: 0, height: 0 });\n  const [refreshRate, setRefreshRate] = useState(60.0);\n  const [hasGlitch, setHasGlitch] = useState(false);\n  const terminalRef = useRef<HTMLDivElement>(null);\n\n  // Responsive screen tracking\n  useEffect(() => {\n    const updateScreenSize = () => {\n      setScreenSize({\n        width: window.innerWidth,\n        height: window.innerHeight\n      });\n    };\n\n    updateScreenSize();\n    window.addEventListener('resize', updateScreenSize);\n    window.addEventListener('orientationchange', updateScreenSize);\n\n    return () => {\n      window.removeEventListener('resize', updateScreenSize);\n      window.removeEventListener('orientationchange', updateScreenSize);\n    };\n  }, []);\n\n  // Subtle refresh rate monitoring with erratic glitches\n  useEffect(() => {\n    let lastTime = performance.now();\n    let frameCount = 0;\n    let animationId: number;\n\n    const updateRefreshRate = () => {\n      const currentTime = performance.now();\n      frameCount++;\n      \n      if (frameCount % 60 === 0) { // Update every ~1 second\n        const deltaTime = currentTime - lastTime;\n        const fps = (frameCount * 1000) / deltaTime;\n        setRefreshRate(Number(fps.toFixed(1)));\n        lastTime = currentTime;\n        frameCount = 0;\n      }\n      \n      animationId = requestAnimationFrame(updateRefreshRate);\n    };\n\n    // Erratic glitch system - very infrequent and random\n    const glitchInterval = setInterval(() => {\n      // Only glitch occasionally (every 45-120 seconds)\n      if (Math.random() < 0.008) { // ~0.8% chance every interval\n        setHasGlitch(true);\n        // Quick recovery\n        setTimeout(() => setHasGlitch(false), 150 + Math.random() * 200);\n      }\n    }, 1000);\n\n    animationId = requestAnimationFrame(updateRefreshRate);\n\n    return () => {\n      cancelAnimationFrame(animationId);\n      clearInterval(glitchInterval);\n    };\n  }, []);\n\n  useEffect(() => {\n    const bootSequence = [\n      'BLOKBOY 1000 INITIALIZING...',\n      'HARDWARE CHECK: OK',\n      'RADIO MODULE: ACTIVE',\n      'MESH PROTOCOL: READY',\n      'BLOCKCHAIN INTERFACE: CONNECTED',\n      'OCSH PROTOCOLS: LOADED',\n      '',\n      'Type \"help\" for available commands.',\n      'Type \"continuum\" for OCSH protocols.',\n      ''\n    ];\n    \n    setTimeout(() => {\n      setTerminalLines(bootSequence);\n      setIsBooted(true);\n    }, 1500);\n  }, []);\n\n  useEffect(() => {\n    if (terminalRef.current) {\n      terminalRef.current.scrollTop = terminalRef.current.scrollHeight;\n    }\n  }, [terminalLines]);\n\n  const typewriter = (text: string, callback?: () => void) => {\n    const lines = text.split('\\n');\n    let lineIndex = 0;\n    \n    const typeLine = () => {\n      if (lineIndex < lines.length) {\n        setTerminalLines(prev => [...prev, lines[lineIndex]]);\n        lineIndex++;\n        setTimeout(typeLine, 30);\n      } else if (callback) {\n        callback();\n      }\n    };\n    \n    typeLine();\n  };\n\n  const handleCommand = (command: string) => {\n    setIsProcessing(true);\n    setTerminalLines(prev => [...prev, `> ${command}`, '']);\n    \n    setTimeout(() => {\n      let response: string[] = [];\n      \n      switch (command.toLowerCase().trim()) {\n        case 'continuum':\n          response = [\n            'OCSH PROTOCOL SUITE:',\n            '==================',\n            'BONE NET - Mesh networking for P2P comms',\n            'RADIO BURST - Emergency broadcast system', \n            'SATELLITE LINK - High-orbit relay network',\n            'USB SNEAKERNET - Physical data transport',\n            'HAM RADIO - Low-frequency voice comms',\n            'SMS GATEWAY - Cellular backup channel',\n            ''\n          ];\n          break;\n        case 'help':\n          response = [\n            'AVAILABLE COMMANDS:',\n            '==================',\n            'help          - Show this help menu',\n            'status        - Display system status', \n            'scan          - Scan for nearby signals',\n            'encode        - Encode blockchain transaction',\n            'decode        - Decode received transmission',\n            'broadcast     - Send transaction via radio',\n            'wallet        - View wallet information',\n            'continuum     - Access OCSH protocols',\n            'clear         - Clear terminal screen',\n            'exit          - Return to main interface',\n            ''\n          ];\n          break;\n        case 'status':\n          response = [\n            'SYSTEM STATUS:',\n            '=============',\n            'Device: BLOKBOY 1000',\n            'Radio: OPERATIONAL',\n            'Mesh: 3 nodes connected',\n            'Battery: 87%',\n            'Network: Base (8453)',\n            'Signal: STRONG',\n            ''\n          ];\n          break;\n        case 'scan':\n          response = [\n            'Scanning radio frequencies...',\n            '',\n            'Found 3 active nodes:',\n            '- Node Alpha: 127.0.0.1:8545 (STRONG)',\n            '- Node Bravo: 192.168.1.100 (WEAK)',  \n            '- Node Charlie: MESH_ID_7394 (MEDIUM)',\n            '',\n            'Ready to relay transactions.',\n            ''\n          ];\n          break;\n        case 'wallet':\n          response = [\n            'WALLET STATUS:',\n            '=============',\n            'Address: 0x742d...35Bc',\n            'Balance: 0.025 ETH',\n            'Network: Base (Chain ID: 8453)',\n            'Nonce: 42',\n            'Gas Price: 12 gwei',\n            ''\n          ];\n          break;\n        case 'clear':\n          setTerminalLines(['Terminal cleared.', '']);\n          setIsProcessing(false);\n          return;\n        case 'exit':\n          response = ['Exiting terminal mode...'];\n          break;\n        default:\n          response = [`Unknown command: ${command}`, 'Type \"help\" for available commands.', ''];\n      }\n      \n      setTerminalLines(prev => [...prev, ...response]);\n      setIsProcessing(false);\n    }, 800 + Math.random() * 400);\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (currentInput.trim() && !isProcessing) {\n      handleCommand(currentInput);\n      setCurrentInput('');\n    }\n  };\n\n  // Calculate responsive dimensions\n  const isMobile = screenSize.width < 768;\n  const isTablet = screenSize.width >= 768 && screenSize.width < 1024;\n  const terminalHeight = isMobile ? 'h-64' : isTablet ? 'h-80' : 'h-96';\n  const headerPadding = isMobile ? 'px-4 py-3' : 'px-6 py-4';\n  const containerPadding = isMobile ? 'px-4 py-4' : 'px-6 py-8';\n\n  return (\n    <div className=\"min-h-screen bg-black text-neutral-100 overflow-x-hidden\">\n      {/* Terminal Header - Fully Responsive */}\n      <header className=\"border-b border-neutral-800 bg-neutral-900 sticky top-0 z-40\">\n        <div className={`container mx-auto ${headerPadding}`}>\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-3 md:gap-4\">\n              <div className={`${isMobile ? 'w-10 h-10' : 'w-12 h-12'} bg-neutral-800 border border-neutral-700 p-1.5 md:p-2`}>\n                <div className=\"w-full h-full bg-neutral-700 flex items-center justify-center text-base md:text-lg\">\n                  📱\n                </div>\n              </div>\n              <div>\n                <h1 className={`${isMobile ? 'text-lg' : 'text-xl'} font-bold text-neutral-100 font-mono tracking-tight`}>\n                  BLOKBOY 1000\n                </h1>\n                <p className={`${isMobile ? 'text-xs' : 'text-xs'} text-neutral-500 uppercase tracking-wider`}>\n                  Handheld Transaction Terminal\n                </p>\n              </div>\n            </div>\n            <Link href=\"/\">\n              <RealisticButton variant=\"secondary\" size={isMobile ? \"sm\" : \"sm\"}>\n                {isMobile ? '←' : '← Return to Dashboard'}\n              </RealisticButton>\n            </Link>\n          </div>\n        </div>\n      </header>\n\n      {/* Main Terminal Interface - Fully Responsive */}\n      <main className={`container mx-auto ${containerPadding}`}>\n        <Tabs defaultValue=\"terminal\" className=\"w-full\">\n          <TabsList className={`grid w-full grid-cols-4 bg-neutral-900 border border-neutral-800 ${isMobile ? 'h-9' : 'h-10'}`}>\n            <TabsTrigger value=\"terminal\" className={`${isMobile ? 'text-xs' : 'text-xs'} font-mono uppercase data-[state=active]:bg-neutral-700`}>\n              {isMobile ? 'Term' : 'Terminal'}\n            </TabsTrigger>\n            <TabsTrigger value=\"encoder\" className={`${isMobile ? 'text-xs' : 'text-xs'} font-mono uppercase data-[state=active]:bg-neutral-700`}>\n              {isMobile ? 'Enc' : 'Encoder'}\n            </TabsTrigger>\n            <TabsTrigger value=\"decoder\" className={`${isMobile ? 'text-xs' : 'text-xs'} font-mono uppercase data-[state=active]:bg-neutral-700`}>\n              {isMobile ? 'Dec' : 'Decoder'}\n            </TabsTrigger>\n            <TabsTrigger value=\"status\" className={`${isMobile ? 'text-xs' : 'text-xs'} font-mono uppercase data-[state=active]:bg-neutral-700`}>\n              Status\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"terminal\" className={`${isMobile ? 'mt-4' : 'mt-6'}`}>\n            <RealisticWastelandCard variant=\"dark\" className=\"p-0 overflow-hidden\">\n              <div className={`${isMobile ? 'p-3' : 'p-4'} border-b border-neutral-800`}>\n                <div className=\"flex items-center justify-between\">\n                  <RealisticText variant=\"terminal\" className=\"text-neutral-500\">\n                    Terminal Session Active\n                  </RealisticText>\n                  <div className={`text-xs font-mono transition-all duration-200 ${\n                    hasGlitch \n                      ? 'text-red-400 animate-pulse' \n                      : refreshRate < 30 \n                        ? 'text-yellow-400' \n                        : 'text-neutral-600'\n                  }`}>\n                    {hasGlitch ? `${(refreshRate + Math.random() * 10 - 5).toFixed(1)}` : refreshRate.toFixed(1)}Hz\n                  </div>\n                </div>\n              </div>\n              \n              <div \n                ref={terminalRef}\n                className={`${terminalHeight} overflow-y-auto ${isMobile ? 'p-3' : 'p-4'} bg-black font-mono ${isMobile ? 'text-xs' : 'text-sm'} text-neutral-300 leading-relaxed`}\n                style={{\n                  maxHeight: isMobile ? `${screenSize.height * 0.4}px` : undefined\n                }}\n              >\n                {!isBooted ? (\n                  <div className=\"text-neutral-500\">Booting system...</div>\n                ) : (\n                  terminalLines.map((line, index) => (\n                    <div key={index} className=\"whitespace-pre-wrap\">\n                      {line}\n                    </div>\n                  ))\n                )}\n                {isProcessing && (\n                  <div className=\"text-neutral-500\">Processing...</div>\n                )}\n              </div>\n              \n              {isBooted && (\n                <form onSubmit={handleSubmit} className={`${isMobile ? 'p-3' : 'p-4'} border-t border-neutral-800`}>\n                  <div className=\"flex gap-2\">\n                    <span className={`text-neutral-500 font-mono ${isMobile ? 'text-xs' : 'text-sm'}`}>{'>'}</span>\n                    <Input\n                      value={currentInput}\n                      onChange={(e) => setCurrentInput(e.target.value)}\n                      className={`flex-1 bg-transparent border-none text-neutral-100 font-mono focus:ring-0 p-0 ${isMobile ? 'text-xs' : 'text-sm'}`}\n                      placeholder=\"Enter command...\"\n                      disabled={isProcessing}\n                    />\n                  </div>\n                </form>\n              )}\n            </RealisticWastelandCard>\n          </TabsContent>\n\n          <TabsContent value=\"encoder\" className={`${isMobile ? 'mt-4' : 'mt-6'}`}>\n            <TransactionEncoder isMobile={isMobile} />\n          </TabsContent>\n\n          <TabsContent value=\"decoder\" className={`${isMobile ? 'mt-4' : 'mt-6'}`}>\n            <TransactionDecoder isMobile={isMobile} />\n          </TabsContent>\n\n          <TabsContent value=\"status\" className={`${isMobile ? 'mt-4' : 'mt-6'}`}>\n            <SystemStatus isMobile={isMobile} />\n          </TabsContent>\n        </Tabs>\n\n        {/* Simple Footer - Appears on All Tabs */}\n        <footer className=\"mt-8 py-6 flex justify-center border-t border-neutral-800/50\">\n          <div className=\"text-center\">\n            <div className=\"text-xs font-mono text-neutral-600 opacity-60\">\n              ARTIFACT VIRTUAL\n            </div>\n          </div>\n        </footer>\n      </main>\n    </div>\n  );\n}\n\n// Transaction Encoder Component\nconst TransactionEncoder = ({ isMobile }: { isMobile: boolean }) => {\n  const [transactionData, setTransactionData] = useState('');\n  const [encodedFrame, setEncodedFrame] = useState('');\n  const [isEncoding, setIsEncoding] = useState(false);\n\n  const handleEncode = () => {\n    setIsEncoding(true);\n    setTimeout(() => {\n      const mockFrame = `FRAME_${Date.now()}_${Math.random().toString(36).substr(2, 9).toUpperCase()}`;\n      setEncodedFrame(mockFrame);\n      setIsEncoding(false);\n    }, 2000);\n  };\n\n  return (\n    <div className={`grid grid-cols-1 ${isMobile ? 'gap-4' : 'lg:grid-cols-2 gap-6'}`}>\n      <RealisticWastelandCard variant=\"default\" className={`${isMobile ? 'p-4' : 'p-6'}`}>\n        <RealisticText variant=\"subtitle\" className=\"mb-4\">Transaction Input</RealisticText>\n        <div className=\"space-y-4\">\n          <Textarea\n            value={transactionData}\n            onChange={(e) => setTransactionData(e.target.value)}\n            placeholder=\"Paste raw transaction data here...\"\n            className={`${isMobile ? 'h-32' : 'h-48'} bg-neutral-900 border-neutral-700 text-neutral-100 font-mono ${isMobile ? 'text-xs' : 'text-sm'} resize-none`}\n          />\n          <RealisticButton\n            onClick={handleEncode}\n            disabled={!transactionData.trim() || isEncoding}\n            variant=\"primary\"\n            className=\"w-full\"\n            size={isMobile ? \"sm\" : \"md\"}\n          >\n            {isEncoding ? 'Encoding...' : 'Encode for Transmission'}\n          </RealisticButton>\n        </div>\n      </RealisticWastelandCard>\n\n      <RealisticWastelandCard variant=\"dark\" className={`${isMobile ? 'p-4' : 'p-6'}`}>\n        <RealisticText variant=\"subtitle\" className=\"mb-4\">Encoded Frame</RealisticText>\n        <div className=\"space-y-4\">\n          <div className={`${isMobile ? 'h-32' : 'h-48'} bg-black border border-neutral-700 ${isMobile ? 'p-3' : 'p-4'} font-mono ${isMobile ? 'text-xs' : 'text-sm'} text-neutral-300 overflow-auto`}>\n            {encodedFrame ? (\n              <div>\n                <div className=\"text-amber-400 mb-2\">TRANSMISSION READY:</div>\n                <div className=\"break-all text-neutral-100\">{encodedFrame}</div>\n                <div className=\"mt-4 text-neutral-500 text-xs\">\n                  Frame contains error correction and mesh routing data\n                </div>\n              </div>\n            ) : (\n              <div className=\"text-neutral-600\">Encoded frame will appear here...</div>\n            )}\n          </div>\n          {encodedFrame && (\n            <RealisticButton variant=\"danger\" className=\"w-full\" size={isMobile ? \"sm\" : \"md\"}>\n              Broadcast via Radio\n            </RealisticButton>\n          )}\n        </div>\n      </RealisticWastelandCard>\n    </div>\n  );\n};\n\n// Transaction Decoder Component  \nconst TransactionDecoder = ({ isMobile }: { isMobile: boolean }) => {\n  const [receivedFrame, setReceivedFrame] = useState('');\n  const [decodedTransaction, setDecodedTransaction] = useState('');\n  const [isDecoding, setIsDecoding] = useState(false);\n\n  const handleDecode = () => {\n    setIsDecoding(true);\n    setTimeout(() => {\n      const mockTransaction = JSON.stringify({\n        to: \"0x742d35Cc6001C70532BA8A5c1eEA8B8832f71dF6\",\n        value: \"0.025\",\n        gasLimit: \"21000\",\n        gasPrice: \"12000000000\",\n        nonce: 42\n      }, null, 2);\n      setDecodedTransaction(mockTransaction);\n      setIsDecoding(false);\n    }, 1500);\n  };\n\n  return (\n    <div className={`grid grid-cols-1 ${isMobile ? 'gap-4' : 'lg:grid-cols-2 gap-6'}`}>\n      <RealisticWastelandCard variant=\"default\" className={`${isMobile ? 'p-4' : 'p-6'}`}>\n        <RealisticText variant=\"subtitle\" className=\"mb-4\">Received Frame</RealisticText>\n        <div className=\"space-y-4\">\n          <Textarea\n            value={receivedFrame}\n            onChange={(e) => setReceivedFrame(e.target.value)}\n            placeholder=\"Paste received frame data here...\"\n            className={`${isMobile ? 'h-32' : 'h-48'} bg-neutral-900 border-neutral-700 text-neutral-100 font-mono ${isMobile ? 'text-xs' : 'text-sm'} resize-none`}\n          />\n          <RealisticButton\n            onClick={handleDecode}\n            disabled={!receivedFrame.trim() || isDecoding}\n            variant=\"primary\"\n            className=\"w-full\"\n            size={isMobile ? \"sm\" : \"md\"}\n          >\n            {isDecoding ? 'Decoding...' : 'Decode Transaction'}\n          </RealisticButton>\n        </div>\n      </RealisticWastelandCard>\n\n      <RealisticWastelandCard variant=\"dark\" className={`${isMobile ? 'p-4' : 'p-6'}`}>\n        <RealisticText variant=\"subtitle\" className=\"mb-4\">Decoded Transaction</RealisticText>\n        <div className=\"space-y-4\">\n          <div className={`${isMobile ? 'h-32' : 'h-48'} bg-black border border-neutral-700 ${isMobile ? 'p-3' : 'p-4'} font-mono ${isMobile ? 'text-xs' : 'text-sm'} text-neutral-300 overflow-auto`}>\n            {decodedTransaction ? (\n              <pre className=\"text-neutral-100\">{decodedTransaction}</pre>\n            ) : (\n              <div className=\"text-neutral-600\">Decoded transaction will appear here...</div>\n            )}\n          </div>\n          {decodedTransaction && (\n            <RealisticButton variant=\"primary\" className=\"w-full\" size={isMobile ? \"sm\" : \"md\"}>\n              Broadcast to Network\n            </RealisticButton>\n          )}\n        </div>\n      </RealisticWastelandCard>\n    </div>\n  );\n};\n\n// System Status Component\nconst SystemStatus = ({ isMobile }: { isMobile: boolean }) => {\n  const { \n    deviceInfo, \n    systemMetrics, \n    isScanning, \n    errors, \n    startDeviceScan,\n    requestPermission,\n    updateLocationInfo \n  } = {\n    deviceInfo: { permissions: {}, hardwareConcurrency: 4, deviceMemory: 8, battery: { level: 87, charging: false } },\n    systemMetrics: { screenResolution: '1920x1080', devicePixelRatio: 2, timezone: 'UTC', memoryUsage: null },\n    isScanning: false,\n    errors: [],\n    startDeviceScan: () => {},\n    requestPermission: () => {},\n    updateLocationInfo: () => {}\n  };\n  \n  const { weatherData, weatherLoading, refreshWeather } = { \n    weatherData: { temperature: 22, humidity: 45, pressure: 1013, windSpeed: 3.2, description: 'Clear skies' }, \n    weatherLoading: false, \n    refreshWeather: () => {} \n  };\n\n  const formatBytes = (bytes: number) => {\n    if (bytes === 0) return '0 B';\n    const k = 1024;\n    const sizes = ['B', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n  };\n\n  const getStatusColor = (value: number, thresholds: { good: number; warning: number }) => {\n    if (value >= thresholds.good) return 'text-emerald-400';\n    if (value >= thresholds.warning) return 'text-yellow-400';\n    return 'text-red-400';\n  };\n\n  const getPermissionColor = (state: PermissionState | null) => {\n    switch (state) {\n      case 'granted': return 'text-emerald-400';\n      case 'prompt': return 'text-yellow-400';\n      case 'denied': return 'text-red-400';\n      default: return 'text-neutral-400';\n    }\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Scan Controls */}\n      <div className=\"flex gap-2 mb-4\">\n        <RealisticButton \n          onClick={startDeviceScan} \n          disabled={isScanning}\n          size={isMobile ? \"sm\" : \"md\"}\n          variant=\"primary\"\n        >\n          {isScanning ? 'Scanning...' : 'Refresh Sensors'}\n        </RealisticButton>\n        <RealisticButton \n          onClick={refreshWeather}\n          disabled={weatherLoading}\n          size={isMobile ? \"sm\" : \"md\"}\n          variant=\"secondary\"\n        >\n          {weatherLoading ? 'Loading...' : 'Update Weather'}\n        </RealisticButton>\n      </div>\n\n      {/* Error Display */}\n      {errors.length > 0 && (\n        <RealisticWastelandCard variant=\"dark\" className={`${isMobile ? 'p-3' : 'p-4'} border-red-500/30`}>\n          <RealisticText variant=\"caption\" className=\"text-red-400 mb-2\">SYSTEM ALERTS</RealisticText>\n          {errors.map((error: any, index: number) => (\n            <div key={index} className=\"text-xs text-red-300 font-mono\">{error}</div>\n          ))}\n        </RealisticWastelandCard>\n      )}\n\n      <div className={`grid grid-cols-1 ${isMobile ? 'gap-4' : 'lg:grid-cols-2 gap-6'}`}>\n        {/* Hardware Status */}\n        <RealisticWastelandCard variant=\"default\" className={`${isMobile ? 'p-4' : 'p-6'}`}>\n          <RealisticText variant=\"subtitle\" className=\"mb-4\">Hardware Status</RealisticText>\n          <div className=\"space-y-3\">\n            <div className=\"flex justify-between\">\n              <span className=\"text-neutral-400\">Battery</span>\n              <span className={deviceInfo.battery ? getStatusColor(deviceInfo.battery.level, { good: 50, warning: 20 }) : 'text-neutral-500'}>\n                {deviceInfo.battery ? `${deviceInfo.battery.level}% ${deviceInfo.battery.charging ? '⚡' : ''}` : 'N/A'}\n              </span>\n            </div>\n            \n            <div className=\"flex justify-between\">\n              <span className=\"text-neutral-400\">Memory</span>\n              <span className=\"text-emerald-400\">\n                {systemMetrics.memoryUsage \n                  ? `${formatBytes(systemMetrics.memoryUsage.usedJSHeapSize)} / ${formatBytes(systemMetrics.memoryUsage.jsHeapSizeLimit)}`\n                  : `${deviceInfo.deviceMemory || 'Unknown'} GB`\n                }\n              </span>\n            </div>\n            \n            <div className=\"flex justify-between\">\n              <span className=\"text-neutral-400\">CPU Cores</span>\n              <span className=\"text-emerald-400\">{deviceInfo.hardwareConcurrency}</span>\n            </div>\n            \n            <div className=\"flex justify-between\">\n              <span className=\"text-neutral-400\">Screen</span>\n              <span className=\"text-emerald-400\">{systemMetrics.screenResolution} @{systemMetrics.devicePixelRatio}x</span>\n            </div>\n            \n            <div className=\"flex justify-between\">\n              <span className=\"text-neutral-400\">Timezone</span>\n              <span className=\"text-emerald-400\">{systemMetrics.timezone}</span>\n            </div>\n          </div>\n        </RealisticWastelandCard>\n\n        {/* Network & Location */}\n        <RealisticWastelandCard variant=\"default\" className={`${isMobile ? 'p-4' : 'p-6'}`}>\n          <RealisticText variant=\"subtitle\" className=\"mb-4\">Network & Location</RealisticText>\n          <div className=\"space-y-3\">\n            <div className=\"flex justify-between\">\n              <span className=\"text-neutral-400\">Connection</span>\n              <span className={deviceInfo.connection.online ? 'text-emerald-400' : 'text-red-400'}>\n                {deviceInfo.connection.online ? 'ONLINE' : 'OFFLINE'}\n              </span>\n            </div>\n            \n            {deviceInfo.network && (\n              <>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-neutral-400\">Network Type</span>\n                  <span className=\"text-emerald-400\">{deviceInfo.network.effectiveType.toUpperCase()}</span>\n                </div>\n                \n                <div className=\"flex justify-between\">\n                  <span className=\"text-neutral-400\">Downlink</span>\n                  <span className=\"text-emerald-400\">{deviceInfo.network.downlink} Mbps</span>\n                </div>\n                \n                <div className=\"flex justify-between\">\n                  <span className=\"text-neutral-400\">Latency</span>\n                  <span className=\"text-emerald-400\">{deviceInfo.network.rtt}ms</span>\n                </div>\n              </>\n            )}\n            \n            {deviceInfo.location ? (\n              <div className=\"space-y-2\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-neutral-400\">GPS</span>\n                  <span className=\"text-emerald-400\">ACTIVE</span>\n                </div>\n                <div className=\"text-xs font-mono text-neutral-300\">\n                  {deviceInfo.location.latitude.toFixed(6)}, {deviceInfo.location.longitude.toFixed(6)}\n                </div>\n                <div className=\"text-xs text-neutral-400\">\n                  Accuracy: ±{Math.round(deviceInfo.location.accuracy)}m\n                </div>\n              </div>\n            ) : (\n              <div className=\"flex justify-between\">\n                <span className=\"text-neutral-400\">GPS</span>\n                <RealisticButton \n                  onClick={() => requestPermission('geolocation')}\n                  size=\"sm\"\n                  variant=\"ghost\"\n                  className=\"text-yellow-400 h-auto p-1\"\n                >\n                  REQUEST ACCESS\n                </RealisticButton>\n              </div>\n            )}\n          </div>\n        </RealisticWastelandCard>\n\n        {/* Weather Data */}\n        {weatherData && (\n          <RealisticWastelandCard variant=\"default\" className={`${isMobile ? 'p-4' : 'p-6'}`}>\n            <RealisticText variant=\"subtitle\" className=\"mb-4\">Environmental</RealisticText>\n            <div className=\"space-y-3\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-neutral-400\">Location</span>\n                <span className=\"text-emerald-400\">{weatherData.location}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-neutral-400\">Temperature</span>\n                <span className=\"text-emerald-400\">{weatherData.temperature}°C</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-neutral-400\">Humidity</span>\n                <span className=\"text-emerald-400\">{weatherData.humidity}%</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-neutral-400\">Pressure</span>\n                <span className=\"text-emerald-400\">{weatherData.pressure} hPa</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-neutral-400\">Wind</span>\n                <span className=\"text-emerald-400\">{weatherData.windSpeed} m/s</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-neutral-400\">Conditions</span>\n                <span className=\"text-emerald-400\">{weatherData.description}</span>\n              </div>\n            </div>\n          </RealisticWastelandCard>\n        )}\n\n        {/* Permissions */}\n        <RealisticWastelandCard variant=\"default\" className={`${isMobile ? 'p-4' : 'p-6'}`}>\n          <RealisticText variant=\"subtitle\" className=\"mb-4\">Hardware Access</RealisticText>\n          <div className=\"space-y-3\">\n            {Object.entries(deviceInfo.permissions).map(([permission, state]) => (\n              <div key={permission} className=\"flex justify-between items-center\">\n                <span className=\"text-neutral-400 capitalize\">{permission}</span>\n                {state === 'granted' ? (\n                  <span className={getPermissionColor(state)}>GRANTED</span>\n                ) : (\n                  <RealisticButton \n                    onClick={() => requestPermission(permission as PermissionName)}\n                    size=\"sm\"\n                    variant=\"ghost\"\n                    className={`${getPermissionColor(state)} h-auto p-1`}\n                  >\n                    {state === 'denied' ? 'DENIED' : 'REQUEST'}\n                  </RealisticButton>\n                )}\n              </div>\n            ))}\n          </div>\n        </RealisticWastelandCard>\n      </div>\n    </div>\n  );\n};","size_bytes":29326},"client/src/pages/handheld.tsx":{"content":"import { useState, useRef, useEffect } from 'react';\nimport { Link } from 'wouter';\nimport { WastelandText, WastelandButton, WastelandCard } from \"@/components/wasteland-ui\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { getContinuumText } from \"@/components/darknet-continuum\";\n\nexport default function Handheld() {\n  const [isBooted, setIsBooted] = useState(false);\n  const [terminalLines, setTerminalLines] = useState<string[]>([]);\n  const [currentInput, setCurrentInput] = useState('');\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [isTypingContinuum, setIsTypingContinuum] = useState(false);\n  const terminalRef = useRef<HTMLDivElement>(null);\n\n  // Boot sequence\n  useEffect(() => {\n    const bootSequence = [\n      'VAULT-TEC HANDHELD TERMINAL v2.1.4',\n      '================================',\n      '',\n      'Initializing Pip-Boy OS...',\n      'Loading GECK protocols...',\n      'Connecting to Wasteland Network...',\n      'Scanning for radio frequencies...',\n      '',\n      '⚡ POWER: 85% REMAINING',\n      '📡 SIGNAL: SEARCHING...',\n      '☢ RAD: LOW LEVELS DETECTED',\n      '',\n      'SYSTEM READY FOR OPERATION',\n      'Type \"help\" for available commands',\n      ''\n    ];\n\n    let index = 0;\n    const interval = setInterval(() => {\n      if (index < bootSequence.length) {\n        setTerminalLines(prev => [...prev, bootSequence[index]]);\n        index++;\n      } else {\n        setIsBooted(true);\n        clearInterval(interval);\n      }\n    }, 200);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  // Auto-scroll terminal\n  useEffect(() => {\n    if (terminalRef.current) {\n      terminalRef.current.scrollTop = terminalRef.current.scrollHeight;\n    }\n  }, [terminalLines]);\n\n  const typewriter = (text: string, callback?: () => void) => {\n    const lines = text.split('\\n');\n    let lineIndex = 0;\n    \n    const typeLine = () => {\n      if (lineIndex < lines.length) {\n        setTerminalLines(prev => [...prev, lines[lineIndex]]);\n        lineIndex++;\n        setTimeout(typeLine, 30); // Fast typing speed\n      } else if (callback) {\n        callback();\n      }\n    };\n    \n    typeLine();\n  };\n\n  const handleCommand = (command: string) => {\n    setIsProcessing(true);\n    setTerminalLines(prev => [...prev, `> ${command}`, '']);\n    \n    setTimeout(() => {\n      let response: string[] = [];\n      \n      switch (command.toLowerCase().trim()) {\n        case 'continuum':\n          setIsTypingContinuum(true);\n          const continuumText = getContinuumText();\n          typewriter(continuumText, () => {\n            setIsTypingContinuum(false);\n            setIsProcessing(false);\n          });\n          return;\n        case 'help':\n          response = [\n            'AVAILABLE COMMANDS:',\n            '==================',\n            'help          - Show this help menu',\n            'status        - Display system status', \n            'scan          - Scan for nearby signals',\n            'encode        - Encode blockchain transaction',\n            'decode        - Decode received transmission',\n            'broadcast     - Send transaction via radio',\n            'wallet        - View wallet information',\n            'continuum     - Access Darknet Continuum protocols',\n            'clear         - Clear terminal screen',\n            'exit          - Return to main interface',\n            ''\n          ];\n          break;\n        case 'status':\n          response = [\n            'HANDHELD TERMINAL STATUS:',\n            '========================',\n            '⚡ Battery: 85% (4.2 hours remaining)',\n            '📡 Radio: Scanning on 2.4GHz mesh',\n            '💾 Memory: 12.7MB / 64MB used',\n            '🔐 Encryption: AES-256 active',\n            '☢ Radiation: 15 mSv (SAFE)',\n            '🌐 Network: Offline mode active',\n            ''\n          ];\n          break;\n        case 'scan':\n          response = [\n            'Scanning for radio frequencies...',\n            '',\n            '📡 Found 3 active nodes:',\n            '- Node Alpha: 127.0.0.1:8545 (STRONG)',\n            '- Node Bravo: 192.168.1.100 (WEAK)',  \n            '- Node Charlie: MESH_ID_7394 (MEDIUM)',\n            '',\n            'Ready to relay transactions.',\n            ''\n          ];\n          break;\n        case 'wallet':\n          response = [\n            'WALLET STATUS:',\n            '=============',\n            'Address: 0x742d...35Bc',\n            'Balance: 0.025 ETH',\n            'Network: Base (Chain ID: 8453)',\n            'Nonce: 42',\n            'Gas Price: 12 gwei',\n            ''\n          ];\n          break;\n        case 'clear':\n          setTerminalLines(['Terminal cleared.', '']);\n          setIsProcessing(false);\n          return;\n        case 'exit':\n          response = ['Exiting terminal mode...'];\n          setTimeout(() => {\n            // Navigate back to dashboard or close terminal\n          }, 1000);\n          break;\n        default:\n          response = [`Unknown command: ${command}`, 'Type \"help\" for available commands.', ''];\n      }\n      \n      setTerminalLines(prev => [...prev, ...response]);\n      setIsProcessing(false);\n    }, 1000 + Math.random() * 1000);\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (currentInput.trim() && !isProcessing) {\n      handleCommand(currentInput);\n      setCurrentInput('');\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen pb-16\">\n      {/* Terminal Header */}\n      <section className=\"relative py-8 overflow-hidden border-b-2 border-wasteland-orange\">\n        <div className=\"absolute inset-0 bg-rusted-metal opacity-80\" />\n        <div className=\"relative container mx-auto px-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-4\">\n              <div className=\"w-16 h-16 bg-charred-earth border-2 border-ash-gray p-2\">\n                <div className=\"w-full h-full bg-ash-gray/30 flex items-center justify-center text-2xl opacity-80\">\n                  📱\n                </div>\n              </div>\n              <div>\n                <WastelandText variant=\"title\" glow className=\"text-3xl\">\n                  AV BLOKBOY 1000\n                </WastelandText>\n                <WastelandText variant=\"terminal\" className=\"text-ash-gray\">\n                  HANDHELD TRANSACTION TERMINAL\n                </WastelandText>\n              </div>\n            </div>\n            <Link href=\"/\" data-testid=\"link-back-to-dashboard\">\n              <WastelandButton variant=\"secondary\">\n                ← RETURN TO WASTELAND\n              </WastelandButton>\n            </Link>\n          </div>\n        </div>\n      </section>\n\n      {/* Main Terminal Interface */}\n      <main className=\"container mx-auto px-6 py-8\">\n        <Tabs defaultValue=\"terminal\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-4 bg-rusted-metal border-2 border-wasteland-orange mb-8\">\n            <TabsTrigger value=\"terminal\" className=\"font-title text-xs data-[state=active]:bg-wasteland-orange data-[state=active]:text-dark-wasteland\">\n              TERMINAL\n            </TabsTrigger>\n            <TabsTrigger value=\"encoder\" className=\"font-title text-xs data-[state=active]:bg-wasteland-orange data-[state=active]:text-dark-wasteland\">\n              ENCODER\n            </TabsTrigger>\n            <TabsTrigger value=\"decoder\" className=\"font-title text-xs data-[state=active]:bg-wasteland-orange data-[state=active]:text-dark-wasteland\">\n              DECODER\n            </TabsTrigger>\n            <TabsTrigger value=\"status\" className=\"font-title text-xs data-[state=active]:bg-wasteland-orange data-[state=active]:text-dark-wasteland\">\n              STATUS\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"terminal\">\n            <WastelandCard variant=\"terminal\" className=\"p-0 overflow-hidden\">\n              {/* Terminal Screen */}\n              <div \n                ref={terminalRef}\n                className=\"h-96 bg-charred-earth p-4 font-mono text-sm text-radiation-green overflow-y-auto\"\n                style={{ \n                  textShadow: '0 0 10px currentColor',\n                  background: 'linear-gradient(135deg, #0a0f0a 0%, #1a2f1a 100%)'\n                }}\n              >\n                {terminalLines.map((line, index) => (\n                  <div key={index} className=\"leading-relaxed\">\n                    {line === '' ? <br /> : line}\n                  </div>\n                ))}\n                {isProcessing && (\n                  <div className=\"animate-pulse\">\n                    Processing command...\n                  </div>\n                )}\n                {isBooted && (\n                  <div className=\"flex items-center\">\n                    <span className=\"text-wasteland-orange\">VAULT-TEC&gt; </span>\n                    <span className=\"animate-pulse\">_</span>\n                  </div>\n                )}\n              </div>\n\n              {/* Command Input */}\n              {isBooted && (\n                <form onSubmit={handleSubmit} className=\"border-t-2 border-wasteland-orange p-4 bg-rusted-metal\">\n                  <div className=\"flex items-center gap-2\">\n                    <WastelandText variant=\"terminal\" className=\"text-wasteland-orange\">\n                      VAULT-TEC&gt;\n                    </WastelandText>\n                    <Input\n                      value={currentInput}\n                      onChange={(e) => setCurrentInput(e.target.value)}\n                      className=\"flex-1 bg-charred-earth border-radiation-green text-radiation-green font-mono\"\n                      placeholder=\"Enter command...\"\n                      disabled={isProcessing}\n                      autoFocus\n                      data-testid=\"input-terminal-command\"\n                    />\n                    <WastelandButton \n                      type=\"submit\" \n                      variant=\"radiation\" \n                      size=\"sm\"\n                      disabled={isProcessing}\n                      data-testid=\"button-execute-command\"\n                    >\n                      EXECUTE\n                    </WastelandButton>\n                  </div>\n                </form>\n              )}\n            </WastelandCard>\n          </TabsContent>\n\n          <TabsContent value=\"encoder\">\n            <TransactionEncoder />\n          </TabsContent>\n\n          <TabsContent value=\"decoder\">\n            <TransactionDecoder />\n          </TabsContent>\n\n          <TabsContent value=\"status\">\n            <SystemStatus />\n          </TabsContent>\n        </Tabs>\n      </main>\n    </div>\n  );\n}\n\n// Transaction Encoder Component\nconst TransactionEncoder = () => {\n  const [transactionData, setTransactionData] = useState('');\n  const [encodedFrame, setEncodedFrame] = useState('');\n  const [isEncoding, setIsEncoding] = useState(false);\n\n  const handleEncode = () => {\n    setIsEncoding(true);\n    // Simulate encoding process\n    setTimeout(() => {\n      const mockFrame = `FRAME_${Date.now()}_${Math.random().toString(36).substr(2, 9).toUpperCase()}`;\n      setEncodedFrame(mockFrame);\n      setIsEncoding(false);\n    }, 2000);\n  };\n\n  return (\n    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n      <WastelandCard variant=\"default\" className=\"p-6\">\n        <WastelandText variant=\"subtitle\" className=\"mb-4 border-b border-wasteland-orange pb-2\">\n          TRANSACTION INPUT\n        </WastelandText>\n        <div className=\"space-y-4\">\n          <Textarea\n            value={transactionData}\n            onChange={(e) => setTransactionData(e.target.value)}\n            placeholder=\"Paste raw transaction data here...\"\n            className=\"h-48 bg-charred-earth border-ash-gray text-foreground font-mono text-sm\"\n            data-testid=\"textarea-transaction-input\"\n          />\n          <WastelandButton\n            onClick={handleEncode}\n            disabled={!transactionData.trim() || isEncoding}\n            variant=\"primary\"\n            className=\"w-full\"\n            data-testid=\"button-encode-transaction\"\n          >\n            {isEncoding ? 'ENCODING...' : 'ENCODE FOR TRANSMISSION'}\n          </WastelandButton>\n        </div>\n      </WastelandCard>\n\n      <WastelandCard variant=\"terminal\" className=\"p-6\">\n        <WastelandText variant=\"subtitle\" className=\"mb-4 border-b border-radiation-green pb-2\">\n          ENCODED FRAME\n        </WastelandText>\n        <div className=\"space-y-4\">\n          <div className=\"h-48 bg-charred-earth border border-radiation-green p-4 font-mono text-sm text-radiation-green overflow-auto\">\n            {encodedFrame ? (\n              <div>\n                <div className=\"text-wasteland-orange mb-2\">TRANSMISSION READY:</div>\n                <div className=\"break-all\">{encodedFrame}</div>\n                <div className=\"mt-4 text-ash-gray text-xs\">\n                  Frame contains error correction and mesh routing data\n                </div>\n              </div>\n            ) : (\n              <div className=\"text-ash-gray\">Encoded frame will appear here...</div>\n            )}\n          </div>\n          {encodedFrame && (\n            <WastelandButton\n              variant=\"radiation\"\n              className=\"w-full\"\n              data-testid=\"button-broadcast-frame\"\n            >\n              BROADCAST VIA RADIO\n            </WastelandButton>\n          )}\n        </div>\n      </WastelandCard>\n    </div>\n  );\n};\n\n// Transaction Decoder Component  \nconst TransactionDecoder = () => {\n  const [receivedFrame, setReceivedFrame] = useState('');\n  const [decodedTransaction, setDecodedTransaction] = useState('');\n  const [isDecoding, setIsDecoding] = useState(false);\n\n  const handleDecode = () => {\n    setIsDecoding(true);\n    setTimeout(() => {\n      const mockTransaction = {\n        to: '0x742d35Cc6Bf4a532...95eBc',\n        value: '0.025 ETH',\n        gasLimit: '21000',\n        gasPrice: '12 gwei',\n        nonce: 42,\n        data: '0x'\n      };\n      setDecodedTransaction(JSON.stringify(mockTransaction, null, 2));\n      setIsDecoding(false);\n    }, 2000);\n  };\n\n  return (\n    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n      <WastelandCard variant=\"default\" className=\"p-6\">\n        <WastelandText variant=\"subtitle\" className=\"mb-4 border-b border-wasteland-orange pb-2\">\n          RECEIVED FRAME\n        </WastelandText>\n        <div className=\"space-y-4\">\n          <Textarea\n            value={receivedFrame}\n            onChange={(e) => setReceivedFrame(e.target.value)}\n            placeholder=\"Paste received transmission frame...\"\n            className=\"h-48 bg-charred-earth border-ash-gray text-foreground font-mono text-sm\"\n            data-testid=\"textarea-received-frame\"\n          />\n          <WastelandButton\n            onClick={handleDecode}\n            disabled={!receivedFrame.trim() || isDecoding}\n            variant=\"primary\"\n            className=\"w-full\"\n            data-testid=\"button-decode-frame\"\n          >\n            {isDecoding ? 'DECODING...' : 'DECODE TRANSMISSION'}\n          </WastelandButton>\n        </div>\n      </WastelandCard>\n\n      <WastelandCard variant=\"terminal\" className=\"p-6\">\n        <WastelandText variant=\"subtitle\" className=\"mb-4 border-b border-radiation-green pb-2\">\n          DECODED TRANSACTION\n        </WastelandText>\n        <div className=\"space-y-4\">\n          <div className=\"h-48 bg-charred-earth border border-radiation-green p-4 font-mono text-sm text-radiation-green overflow-auto\">\n            {decodedTransaction ? (\n              <pre>{decodedTransaction}</pre>\n            ) : (\n              <div className=\"text-ash-gray\">Decoded transaction will appear here...</div>\n            )}\n          </div>\n          {decodedTransaction && (\n            <WastelandButton\n              variant=\"radiation\"\n              className=\"w-full\"\n              data-testid=\"button-execute-transaction\"\n            >\n              EXECUTE TRANSACTION\n            </WastelandButton>\n          )}\n        </div>\n      </WastelandCard>\n    </div>\n  );\n};\n\n// System Status Component\nconst SystemStatus = () => {\n  const [systemInfo] = useState({\n    battery: 85,\n    signal: 'SEARCHING',\n    radiation: 15,\n    temperature: 42,\n    uptime: '2h 34m',\n    memory: 12.7,\n    storage: 45.2\n  });\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n      <WastelandCard variant=\"default\" className=\"p-6\">\n        <WastelandText variant=\"subtitle\" className=\"mb-4\">\n          POWER SYSTEMS\n        </WastelandText>\n        <div className=\"space-y-3\">\n          <div className=\"flex justify-between\">\n            <span className=\"text-ash-gray\">Battery:</span>\n            <span className=\"text-wasteland-orange font-mono\">{systemInfo.battery}%</span>\n          </div>\n          <div className=\"w-full bg-charred-earth h-2 border border-ash-gray\">\n            <div \n              className=\"h-full bg-wasteland-orange animate-radiation-pulse\"\n              style={{ width: `${systemInfo.battery}%` }}\n            />\n          </div>\n          <div className=\"text-sm text-ash-gray\">\n            Estimated: 4.2 hours remaining\n          </div>\n        </div>\n      </WastelandCard>\n\n      <WastelandCard variant=\"terminal\" className=\"p-6\">\n        <WastelandText variant=\"subtitle\" className=\"mb-4\">\n          COMMUNICATIONS\n        </WastelandText>\n        <div className=\"space-y-3\">\n          <div className=\"flex justify-between\">\n            <span className=\"text-ash-gray\">Signal:</span>\n            <Badge className=\"bg-toxic-yellow text-dark-wasteland text-xs animate-pulse\">\n              {systemInfo.signal}\n            </Badge>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-ash-gray\">Nodes:</span>\n            <span className=\"text-radiation-green font-mono\">3 ACTIVE</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-ash-gray\">Frequency:</span>\n            <span className=\"text-steel-blue font-mono\">2.4 GHz</span>\n          </div>\n        </div>\n      </WastelandCard>\n\n      <WastelandCard variant=\"radiation\" className=\"p-6\">\n        <WastelandText variant=\"subtitle\" className=\"mb-4\">\n          ENVIRONMENTAL\n        </WastelandText>\n        <div className=\"space-y-3\">\n          <div className=\"flex justify-between\">\n            <span className=\"text-ash-gray\">Radiation:</span>\n            <span className=\"text-radiation-green font-mono\">{systemInfo.radiation} mSv</span>\n          </div>\n          <div className=\"flex justify-between\">\n            <span className=\"text-ash-gray\">Temperature:</span>\n            <span className=\"text-burnt-amber font-mono\">{systemInfo.temperature}°C</span>\n          </div>\n          <Badge className=\"bg-radiation-green text-dark-wasteland text-xs\">\n            SAFE LEVELS\n          </Badge>\n        </div>\n      </WastelandCard>\n    </div>\n  );\n};","size_bytes":19220},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"import * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-2 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":777},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/blueprint-diagrams.tsx":{"content":"import { motion } from \"framer-motion\";\n\n// Technical Blueprint SVG Component\nexport const TechnicalBlueprint = ({ children, title, specs }: { \n  children: React.ReactNode; \n  title: string; \n  specs?: string[];\n}) => (\n  <div className=\"relative bg-neutral-900 border border-cyan-400/30 p-4\">\n    {/* Blueprint grid background */}\n    <svg className=\"absolute inset-0 w-full h-full opacity-20\" viewBox=\"0 0 800 600\">\n      <defs>\n        <pattern id=\"blueprintGrid\" width=\"20\" height=\"20\" patternUnits=\"userSpaceOnUse\">\n          <path d=\"M 20 0 L 0 0 0 20\" fill=\"none\" stroke=\"rgba(34,211,238,0.2)\" strokeWidth=\"0.5\"/>\n        </pattern>\n        <pattern id=\"blueprintGridMajor\" width=\"100\" height=\"100\" patternUnits=\"userSpaceOnUse\">\n          <path d=\"M 100 0 L 0 0 0 100\" fill=\"none\" stroke=\"rgba(34,211,238,0.3)\" strokeWidth=\"1\"/>\n        </pattern>\n      </defs>\n      <rect width=\"100%\" height=\"100%\" fill=\"url(#blueprintGrid)\"/>\n      <rect width=\"100%\" height=\"100%\" fill=\"url(#blueprintGridMajor)\"/>\n    </svg>\n    \n    {/* Title block */}\n    <div className=\"relative z-10 mb-4 border border-cyan-400/50 bg-neutral-800/80 p-2\">\n      <div className=\"text-cyan-100 font-mono text-sm font-bold\">{title}</div>\n      {specs && (\n        <div className=\"text-cyan-300/70 font-mono text-xs mt-1\">\n          {specs.map((spec, i) => (\n            <div key={i}>{spec}</div>\n          ))}\n        </div>\n      )}\n    </div>\n    \n    {/* Diagram content */}\n    <div className=\"relative z-10\">\n      {children}\n    </div>\n  </div>\n);\n\n// Mesh Network Topology Diagram\nexport const MeshNetworkDiagram = () => (\n  <TechnicalBlueprint \n    title=\"MESH NETWORK TOPOLOGY - BONE NET PROTOCOL\"\n    specs={[\"SPEC: P2P-RELAY-001\", \"FREQ: 2.4GHz-5GHz\", \"RANGE: 100-300m\"]}\n  >\n    <svg viewBox=\"0 0 800 500\" className=\"w-full h-64 border border-cyan-400/30\">\n      <defs>\n        <filter id=\"nodeGlow\">\n          <feGaussianBlur stdDeviation=\"3\" result=\"coloredBlur\"/>\n          <feMerge>\n            <feMergeNode in=\"coloredBlur\"/>\n            <feMergeNode in=\"SourceGraphic\"/>\n          </feMerge>\n        </filter>\n        <marker id=\"arrowhead\" markerWidth=\"10\" markerHeight=\"7\" refX=\"9\" refY=\"3.5\" orient=\"auto\">\n          <polygon points=\"0 0, 10 3.5, 0 7\" fill=\"#22d3ee\"/>\n        </marker>\n      </defs>\n      \n      {/* Network Nodes */}\n      <g filter=\"url(#nodeGlow)\">\n        {/* Primary Hub */}\n        <rect x=\"375\" y=\"225\" width=\"50\" height=\"50\" fill=\"rgba(34,211,238,0.2)\" stroke=\"#22d3ee\" strokeWidth=\"2\"/>\n        <text x=\"400\" y=\"245\" textAnchor=\"middle\" fill=\"#22d3ee\" fontSize=\"8\" fontFamily=\"monospace\">PRIMARY</text>\n        <text x=\"400\" y=\"255\" textAnchor=\"middle\" fill=\"#22d3ee\" fontSize=\"8\" fontFamily=\"monospace\">HUB-001</text>\n        <text x=\"400\" y=\"265\" textAnchor=\"middle\" fill=\"#22d3ee\" fontSize=\"6\" fontFamily=\"monospace\">192.168.1.1</text>\n        \n        {/* Edge Nodes */}\n        <rect x=\"150\" y=\"100\" width=\"40\" height=\"40\" fill=\"rgba(34,211,238,0.15)\" stroke=\"#22d3ee\" strokeWidth=\"1\"/>\n        <text x=\"170\" y=\"115\" textAnchor=\"middle\" fill=\"#22d3ee\" fontSize=\"7\" fontFamily=\"monospace\">NODE-A</text>\n        <text x=\"170\" y=\"125\" textAnchor=\"middle\" fill=\"#22d3ee\" fontSize=\"7\" fontFamily=\"monospace\">.2.1</text>\n        \n        <rect x=\"600\" y=\"100\" width=\"40\" height=\"40\" fill=\"rgba(34,211,238,0.15)\" stroke=\"#22d3ee\" strokeWidth=\"1\"/>\n        <text x=\"620\" y=\"115\" textAnchor=\"middle\" fill=\"#22d3ee\" fontSize=\"7\" fontFamily=\"monospace\">NODE-B</text>\n        <text x=\"620\" y=\"125\" textAnchor=\"middle\" fill=\"#22d3ee\" fontSize=\"7\" fontFamily=\"monospace\">.2.2</text>\n        \n        <rect x=\"100\" y=\"350\" width=\"40\" height=\"40\" fill=\"rgba(34,211,238,0.15)\" stroke=\"#22d3ee\" strokeWidth=\"1\"/>\n        <text x=\"120\" y=\"365\" textAnchor=\"middle\" fill=\"#22d3ee\" fontSize=\"7\" fontFamily=\"monospace\">NODE-C</text>\n        <text x=\"120\" y=\"375\" textAnchor=\"middle\" fill=\"#22d3ee\" fontSize=\"7\" fontFamily=\"monospace\">.2.3</text>\n        \n        <rect x=\"660\" y=\"350\" width=\"40\" height=\"40\" fill=\"rgba(34,211,238,0.15)\" stroke=\"#22d3ee\" strokeWidth=\"1\"/>\n        <text x=\"680\" y=\"365\" textAnchor=\"middle\" fill=\"#22d3ee\" fontSize=\"7\" fontFamily=\"monospace\">NODE-D</text>\n        <text x=\"680\" y=\"375\" textAnchor=\"middle\" fill=\"#22d3ee\" fontSize=\"7\" fontFamily=\"monospace\">.2.4</text>\n      </g>\n      \n      {/* Connection Lines with Data Flow */}\n      <g stroke=\"#22d3ee\" strokeWidth=\"1.5\" markerEnd=\"url(#arrowhead)\">\n        <line x1=\"375\" y1=\"250\" x2=\"190\" y2=\"140\" opacity=\"0.8\"/>\n        <line x1=\"400\" y1=\"225\" x2=\"600\" y2=\"140\" opacity=\"0.8\"/>\n        <line x1=\"375\" y1=\"275\" x2=\"140\" y2=\"350\" opacity=\"0.8\"/>\n        <line x1=\"425\" y1=\"275\" x2=\"660\" y2=\"350\" opacity=\"0.8\"/>\n        \n        {/* Cross connections */}\n        <line x1=\"190\" y1=\"120\" x2=\"600\" y2=\"120\" opacity=\"0.5\" strokeDasharray=\"5,5\"/>\n        <line x1=\"140\" y1=\"370\" x2=\"660\" y2=\"370\" opacity=\"0.5\" strokeDasharray=\"5,5\"/>\n      </g>\n      \n      {/* Signal Strength Indicators */}\n      <g fill=\"none\" stroke=\"#22d3ee\" strokeWidth=\"1\" opacity=\"0.6\">\n        <circle cx=\"400\" cy=\"250\" r=\"60\">\n          <animate attributeName=\"r\" values=\"60;80;60\" dur=\"3s\" repeatCount=\"indefinite\"/>\n          <animate attributeName=\"opacity\" values=\"0.6;0.2;0.6\" dur=\"3s\" repeatCount=\"indefinite\"/>\n        </circle>\n        <circle cx=\"170\" cy=\"120\" r=\"30\">\n          <animate attributeName=\"r\" values=\"30;45;30\" dur=\"2.5s\" repeatCount=\"indefinite\"/>\n          <animate attributeName=\"opacity\" values=\"0.4;0.1;0.4\" dur=\"2.5s\" repeatCount=\"indefinite\"/>\n        </circle>\n      </g>\n      \n      {/* Technical Specifications */}\n      <rect x=\"50\" y=\"450\" width=\"200\" height=\"40\" fill=\"rgba(0,0,0,0.7)\" stroke=\"rgba(34,211,238,0.5)\" strokeWidth=\"1\"/>\n      <text x=\"60\" y=\"465\" fill=\"#22d3ee\" fontSize=\"8\" fontFamily=\"monospace\">PROTOCOL: BONE-NET-P2P</text>\n      <text x=\"60\" y=\"475\" fill=\"#22d3ee\" fontSize=\"8\" fontFamily=\"monospace\">LATENCY: ~50-200ms</text>\n      <text x=\"60\" y=\"485\" fill=\"#22d3ee\" fontSize=\"8\" fontFamily=\"monospace\">THROUGHPUT: 1-10 TX/min</text>\n    </svg>\n  </TechnicalBlueprint>\n);\n\n// SMS Gateway Diagram\nexport const SMSGatewayDiagram = () => (\n  <TechnicalBlueprint \n    title=\"SMS TRANSACTION GATEWAY - SIGNAL SCRIPT\"\n    specs={[\"SPEC: SMS-TX-002\", \"BAND: 850/900/1800/1900MHz\", \"PROTOCOL: GSM/CDMA\"]}\n  >\n    <svg viewBox=\"0 0 800 500\" className=\"w-full h-64 border border-cyan-400/30\">\n      <defs>\n        <filter id=\"signalGlow\">\n          <feGaussianBlur stdDeviation=\"2\" result=\"coloredBlur\"/>\n          <feMerge>\n            <feMergeNode in=\"coloredBlur\"/>\n            <feMergeNode in=\"SourceGraphic\"/>\n          </feMerge>\n        </filter>\n      </defs>\n      \n      {/* Cell Tower */}\n      <g filter=\"url(#signalGlow)\">\n        <rect x=\"390\" y=\"150\" width=\"20\" height=\"200\" fill=\"#22d3ee\" opacity=\"0.8\"/>\n        <polygon points=\"400,150 380,120 420,120\" fill=\"#22d3ee\" opacity=\"0.8\"/>\n        <line x1=\"385\" y1=\"130\" x2=\"415\" y2=\"130\" stroke=\"#22d3ee\" strokeWidth=\"3\"/>\n        <line x1=\"390\" y1=\"140\" x2=\"410\" y2=\"140\" stroke=\"#22d3ee\" strokeWidth=\"2\"/>\n        <text x=\"400\" y=\"370\" textAnchor=\"middle\" fill=\"#22d3ee\" fontSize=\"8\" fontFamily=\"monospace\">CELL TOWER</text>\n        <text x=\"400\" y=\"380\" textAnchor=\"middle\" fill=\"#22d3ee\" fontSize=\"8\" fontFamily=\"monospace\">BTS-001</text>\n      </g>\n      \n      {/* Mobile Devices */}\n      <g>\n        <rect x=\"150\" y=\"280\" width=\"30\" height=\"50\" rx=\"5\" fill=\"rgba(34,211,238,0.2)\" stroke=\"#22d3ee\" strokeWidth=\"1\"/>\n        <rect x=\"155\" y=\"285\" width=\"20\" height=\"15\" fill=\"#22d3ee\" opacity=\"0.3\"/>\n        <text x=\"165\" y=\"345\" textAnchor=\"middle\" fill=\"#22d3ee\" fontSize=\"7\" fontFamily=\"monospace\">SENDER</text>\n        \n        <rect x=\"620\" y=\"280\" width=\"30\" height=\"50\" rx=\"5\" fill=\"rgba(34,211,238,0.2)\" stroke=\"#22d3ee\" strokeWidth=\"1\"/>\n        <rect x=\"625\" y=\"285\" width=\"20\" height=\"15\" fill=\"#22d3ee\" opacity=\"0.3\"/>\n        <text x=\"635\" y=\"345\" textAnchor=\"middle\" fill=\"#22d3ee\" fontSize=\"7\" fontFamily=\"monospace\">RECEIVER</text>\n        \n        {/* Gateway Server */}\n        <rect x=\"350\" y=\"400\" width=\"100\" height=\"60\" fill=\"rgba(34,211,238,0.1)\" stroke=\"#22d3ee\" strokeWidth=\"2\"/>\n        <text x=\"400\" y=\"420\" textAnchor=\"middle\" fill=\"#22d3ee\" fontSize=\"8\" fontFamily=\"monospace\">SMS GATEWAY</text>\n        <text x=\"400\" y=\"430\" textAnchor=\"middle\" fill=\"#22d3ee\" fontSize=\"8\" fontFamily=\"monospace\">PARSER/RELAY</text>\n        <text x=\"400\" y=\"445\" textAnchor=\"middle\" fill=\"#22d3ee\" fontSize=\"6\" fontFamily=\"monospace\">api.sms-relay.net</text>\n      </g>\n      \n      {/* Signal Waves */}\n      <g stroke=\"#22d3ee\" strokeWidth=\"1\" fill=\"none\" opacity=\"0.6\">\n        <path d=\"M 180 305 Q 290 250 390 180\">\n          <animate attributeName=\"opacity\" values=\"0.6;0.2;0.6\" dur=\"2s\" repeatCount=\"indefinite\"/>\n        </path>\n        <path d=\"M 410 180 Q 520 250 620 305\">\n          <animate attributeName=\"opacity\" values=\"0.2;0.6;0.2\" dur=\"2s\" repeatCount=\"indefinite\" begin=\"1s\"/>\n        </path>\n        <path d=\"M 400 350 L 400 400\" strokeWidth=\"2\"/>\n      </g>\n      \n      {/* Message Format */}\n      <rect x=\"500\" y=\"50\" width=\"250\" height=\"120\" fill=\"rgba(0,0,0,0.8)\" stroke=\"rgba(34,211,238,0.5)\" strokeWidth=\"1\"/>\n      <text x=\"510\" y=\"70\" fill=\"#22d3ee\" fontSize=\"8\" fontFamily=\"monospace\" fontWeight=\"bold\">SMS TX FORMAT:</text>\n      <text x=\"510\" y=\"85\" fill=\"#22d3ee\" fontSize=\"7\" fontFamily=\"monospace\">TO: +1234567890</text>\n      <text x=\"510\" y=\"95\" fill=\"#22d3ee\" fontSize=\"7\" fontFamily=\"monospace\">TX:0x1a2b3c4d5e6f...</text>\n      <text x=\"510\" y=\"105\" fill=\"#22d3ee\" fontSize=\"7\" fontFamily=\"monospace\">SIG:r=0xab12cd34...</text>\n      <text x=\"510\" y=\"115\" fill=\"#22d3ee\" fontSize=\"7\" fontFamily=\"monospace\">    s=0xef56gh78...</text>\n      <text x=\"510\" y=\"125\" fill=\"#22d3ee\" fontSize=\"7\" fontFamily=\"monospace\">    v=27</text>\n      <text x=\"510\" y=\"140\" fill=\"#22d3ee\" fontSize=\"7\" fontFamily=\"monospace\">GAS:21000</text>\n      <text x=\"510\" y=\"155\" fill=\"#22d3ee\" fontSize=\"6\" fontFamily=\"monospace\">MAX: 160 chars per SMS</text>\n    </svg>\n  </TechnicalBlueprint>\n);\n\n// Ham Radio Diagram\nexport const HamRadioDiagram = () => (\n  <TechnicalBlueprint \n    title=\"HAM RADIO BLOCKCHAIN RELAY - STATIC HAUL\"\n    specs={[\"SPEC: HAM-TX-005\", \"FREQ: 3.5-29.7MHz HF\", \"POWER: 5-100W\"]}\n  >\n    <svg viewBox=\"0 0 800 500\" className=\"w-full h-64 border border-cyan-400/30\">\n      <defs>\n        <filter id=\"radioGlow\">\n          <feGaussianBlur stdDeviation=\"2\" result=\"coloredBlur\"/>\n          <feMerge>\n            <feMergeNode in=\"coloredBlur\"/>\n            <feMergeNode in=\"SourceGraphic\"/>\n          </feMerge>\n        </filter>\n      </defs>\n      \n      {/* Ionosphere */}\n      <ellipse cx=\"400\" cy=\"80\" rx=\"350\" ry=\"40\" fill=\"rgba(34,211,238,0.1)\" stroke=\"#22d3ee\" strokeWidth=\"1\" strokeDasharray=\"5,5\"/>\n      <text x=\"400\" y=\"50\" textAnchor=\"middle\" fill=\"#22d3ee\" fontSize=\"8\" fontFamily=\"monospace\">IONOSPHERE - F2 LAYER</text>\n      \n      {/* Ground Stations */}\n      <g filter=\"url(#radioGlow)\">\n        {/* Station A */}\n        <rect x=\"100\" y=\"350\" width=\"60\" height=\"40\" fill=\"rgba(34,211,238,0.2)\" stroke=\"#22d3ee\" strokeWidth=\"2\"/>\n        <rect x=\"120\" y=\"330\" width=\"20\" height=\"20\" fill=\"#22d3ee\" opacity=\"0.6\"/>\n        <line x1=\"130\" y1=\"330\" x2=\"130\" y2=\"300\" stroke=\"#22d3ee\" strokeWidth=\"3\"/>\n        <text x=\"130\" y=\"405\" textAnchor=\"middle\" fill=\"#22d3ee\" fontSize=\"7\" fontFamily=\"monospace\">HAM-STATION-A</text>\n        <text x=\"130\" y=\"415\" textAnchor=\"middle\" fill=\"#22d3ee\" fontSize=\"7\" fontFamily=\"monospace\">KN4ABC</text>\n        \n        {/* Station B */}\n        <rect x=\"640\" y=\"350\" width=\"60\" height=\"40\" fill=\"rgba(34,211,238,0.2)\" stroke=\"#22d3ee\" strokeWidth=\"2\"/>\n        <rect x=\"660\" y=\"330\" width=\"20\" height=\"20\" fill=\"#22d3ee\" opacity=\"0.6\"/>\n        <line x1=\"670\" y1=\"330\" x2=\"670\" y2=\"300\" stroke=\"#22d3ee\" strokeWidth=\"3\"/>\n        <text x=\"670\" y=\"405\" textAnchor=\"middle\" fill=\"#22d3ee\" fontSize=\"7\" fontFamily=\"monospace\">HAM-STATION-B</text>\n        <text x=\"670\" y=\"415\" textAnchor=\"middle\" fill=\"#22d3ee\" fontSize=\"7\" fontFamily=\"monospace\">W5XYZ</text>\n        \n        {/* Relay Station */}\n        <rect x=\"370\" y=\"250\" width=\"60\" height=\"40\" fill=\"rgba(34,211,238,0.15)\" stroke=\"#22d3ee\" strokeWidth=\"1\"/>\n        <rect x=\"390\" y=\"230\" width=\"20\" height=\"20\" fill=\"#22d3ee\" opacity=\"0.4\"/>\n        <line x1=\"400\" y1=\"230\" x2=\"400\" y2=\"200\" stroke=\"#22d3ee\" strokeWidth=\"2\"/>\n        <text x=\"400\" y=\"305\" textAnchor=\"middle\" fill=\"#22d3ee\" fontSize=\"7\" fontFamily=\"monospace\">RELAY-001</text>\n      </g>\n      \n      {/* Radio Wave Propagation */}\n      <g stroke=\"#22d3ee\" strokeWidth=\"2\" fill=\"none\">\n        <path d=\"M 130 300 Q 250 150 400 200\" opacity=\"0.7\">\n          <animate attributeName=\"opacity\" values=\"0.7;0.3;0.7\" dur=\"3s\" repeatCount=\"indefinite\"/>\n        </path>\n        <path d=\"M 400 200 Q 550 150 670 300\" opacity=\"0.5\">\n          <animate attributeName=\"opacity\" values=\"0.5;0.8;0.5\" dur=\"3s\" repeatCount=\"indefinite\" begin=\"1.5s\"/>\n        </path>\n        \n        {/* Skip propagation via ionosphere */}\n        <path d=\"M 130 300 Q 400 100 670 300\" opacity=\"0.4\" strokeDasharray=\"10,5\">\n          <animate attributeName=\"opacity\" values=\"0.4;0.8;0.4\" dur=\"4s\" repeatCount=\"indefinite\"/>\n        </path>\n      </g>\n      \n      {/* Data Packet Visualization */}\n      <rect x=\"50\" y=\"450\" width=\"300\" height=\"40\" fill=\"rgba(0,0,0,0.8)\" stroke=\"rgba(34,211,238,0.5)\" strokeWidth=\"1\"/>\n      <text x=\"60\" y=\"465\" fill=\"#22d3ee\" fontSize=\"8\" fontFamily=\"monospace\">PACKET: [HDR][TX-DATA][CRC][EOF]</text>\n      <text x=\"60\" y=\"475\" fill=\"#22d3ee\" fontSize=\"8\" fontFamily=\"monospace\">ENCODING: Base64 | COMPRESSION: GZIP</text>\n      <text x=\"60\" y=\"485\" fill=\"#22d3ee\" fontSize=\"8\" fontFamily=\"monospace\">FREQ: 14.230 MHz | MODE: PSK31</text>\n      \n      {/* Technical specs */}\n      <rect x=\"450\" y=\"450\" width=\"200\" height=\"40\" fill=\"rgba(0,0,0,0.8)\" stroke=\"rgba(34,211,238,0.5)\" strokeWidth=\"1\"/>\n      <text x=\"460\" y=\"465\" fill=\"#22d3ee\" fontSize=\"8\" fontFamily=\"monospace\">PROPAGATION: SKYWAVE</text>\n      <text x=\"460\" y=\"475\" fill=\"#22d3ee\" fontSize=\"8\" fontFamily=\"monospace\">RANGE: 500-3000 km</text>\n      <text x=\"460\" y=\"485\" fill=\"#22d3ee\" fontSize=\"8\" fontFamily=\"monospace\">LATENCY: 100-500ms</text>\n    </svg>\n  </TechnicalBlueprint>\n);\n\n// Physical Handshake Diagram\nexport const PhysicalHandshakeDiagram = () => (\n  <TechnicalBlueprint \n    title=\"PHYSICAL HANDSHAKE PROTOCOL - COURIER NETWORK\"\n    specs={[\"SPEC: PHY-TX-003\", \"TRANSPORT: HUMAN COURIER\", \"SECURITY: MULTI-LAYER\"]}\n  >\n    <svg viewBox=\"0 0 800 500\" className=\"w-full h-64 border border-cyan-400/30\">\n      <defs>\n        <filter id=\"courierGlow\">\n          <feGaussianBlur stdDeviation=\"2\" result=\"coloredBlur\"/>\n          <feMerge>\n            <feMergeNode in=\"coloredBlur\"/>\n            <feMergeNode in=\"SourceGraphic\"/>\n          </feMerge>\n        </filter>\n        <pattern id=\"securePattern\" width=\"4\" height=\"4\" patternUnits=\"userSpaceOnUse\">\n          <rect width=\"4\" height=\"4\" fill=\"none\"/>\n          <circle cx=\"2\" cy=\"2\" r=\"0.5\" fill=\"rgba(34,211,238,0.3)\"/>\n        </pattern>\n      </defs>\n      \n      {/* Offline Wallet */}\n      <g filter=\"url(#courierGlow)\">\n        <rect x=\"50\" y=\"200\" width=\"80\" height=\"60\" fill=\"rgba(34,211,238,0.15)\" stroke=\"#22d3ee\" strokeWidth=\"2\"/>\n        <rect x=\"60\" y=\"210\" width=\"60\" height=\"20\" fill=\"rgba(34,211,238,0.3)\"/>\n        <text x=\"90\" y=\"285\" textAnchor=\"middle\" fill=\"#22d3ee\" fontSize=\"8\" fontFamily=\"monospace\">OFFLINE WALLET</text>\n        <text x=\"90\" y=\"295\" textAnchor=\"middle\" fill=\"#22d3ee\" fontSize=\"8\" fontFamily=\"monospace\">LEDGER/TREZOR</text>\n        <text x=\"90\" y=\"305\" textAnchor=\"middle\" fill=\"#22d3ee\" fontSize=\"6\" fontFamily=\"monospace\">AIR-GAPPED</text>\n      </g>\n      \n      {/* Transaction Packaging */}\n      <rect x=\"200\" y=\"180\" width=\"100\" height=\"100\" fill=\"url(#securePattern)\" stroke=\"#22d3ee\" strokeWidth=\"2\"/>\n      <text x=\"250\" y=\"200\" textAnchor=\"middle\" fill=\"#22d3ee\" fontSize=\"8\" fontFamily=\"monospace\">SECURE PACKAGE</text>\n      <text x=\"250\" y=\"220\" textAnchor=\"middle\" fill=\"#22d3ee\" fontSize=\"7\" fontFamily=\"monospace\">• QR CODE</text>\n      <text x=\"250\" y=\"235\" textAnchor=\"middle\" fill=\"#22d3ee\" fontSize=\"7\" fontFamily=\"monospace\">• USB ENCRYPTED</text>\n      <text x=\"250\" y=\"250\" textAnchor=\"middle\" fill=\"#22d3ee\" fontSize=\"7\" fontFamily=\"monospace\">• TAMPER SEAL</text>\n      <text x=\"250\" y=\"265\" textAnchor=\"middle\" fill=\"#22d3ee\" fontSize=\"7\" fontFamily=\"monospace\">• CHECKSUM</text>\n      \n      {/* Courier Transport */}\n      <g>\n        <ellipse cx=\"450\" cy=\"230\" rx=\"60\" ry=\"40\" fill=\"rgba(34,211,238,0.1)\" stroke=\"#22d3ee\" strokeWidth=\"2\"/>\n        <circle cx=\"430\" cy=\"220\" r=\"8\" fill=\"rgba(34,211,238,0.4)\"/>\n        <rect x=\"440\" y=\"215\" width=\"20\" height=\"10\" fill=\"rgba(34,211,238,0.3)\"/>\n        <path d=\"M 460 225 L 470 235 L 460 245 L 450 235 Z\" fill=\"rgba(34,211,238,0.3)\"/>\n        <text x=\"450\" y=\"285\" textAnchor=\"middle\" fill=\"#22d3ee\" fontSize=\"8\" fontFamily=\"monospace\">COURIER TRANSPORT</text>\n        <text x=\"450\" y=\"295\" textAnchor=\"middle\" fill=\"#22d3ee\" fontSize=\"7\" fontFamily=\"monospace\">VERIFIED CARRIER</text>\n      </g>\n      \n      {/* Broadcast Station */}\n      <g filter=\"url(#courierGlow)\">\n        <rect x=\"620\" y=\"200\" width=\"80\" height=\"60\" fill=\"rgba(34,211,238,0.2)\" stroke=\"#22d3ee\" strokeWidth=\"2\"/>\n        <rect x=\"630\" y=\"210\" width=\"60\" height=\"20\" fill=\"rgba(34,211,238,0.4)\"/>\n        <circle cx=\"660\" cy=\"170\" r=\"8\" fill=\"#22d3ee\" opacity=\"0.6\"/>\n        <text x=\"660\" y=\"285\" textAnchor=\"middle\" fill=\"#22d3ee\" fontSize=\"8\" fontFamily=\"monospace\">BROADCAST STN</text>\n        <text x=\"660\" y=\"295\" textAnchor=\"middle\" fill=\"#22d3ee\" fontSize=\"8\" fontFamily=\"monospace\">ONLINE NODE</text>\n        <text x=\"660\" y=\"305\" textAnchor=\"middle\" fill=\"#22d3ee\" fontSize=\"6\" fontFamily=\"monospace\">ETH MAINNET</text>\n      </g>\n      \n      {/* Data Flow Arrows */}\n      <g stroke=\"#22d3ee\" strokeWidth=\"3\" fill=\"none\" markerEnd=\"url(#arrowhead)\">\n        <line x1=\"130\" y1=\"230\" x2=\"190\" y2=\"230\"/>\n        <line x1=\"300\" y1=\"230\" x2=\"380\" y2=\"230\"/>\n        <line x1=\"520\" y1=\"230\" x2=\"610\" y2=\"230\"/>\n      </g>\n      \n      {/* Security Verification Steps */}\n      <rect x=\"50\" y=\"350\" width=\"700\" height=\"120\" fill=\"rgba(0,0,0,0.8)\" stroke=\"rgba(34,211,238,0.5)\" strokeWidth=\"1\"/>\n      <text x=\"60\" y=\"370\" fill=\"#22d3ee\" fontSize=\"9\" fontFamily=\"monospace\" fontWeight=\"bold\">SECURITY VERIFICATION PROTOCOL:</text>\n      \n      <text x=\"70\" y=\"390\" fill=\"#22d3ee\" fontSize=\"7\" fontFamily=\"monospace\">1. OFFLINE SIGNING: Hardware wallet creates signed transaction in air-gapped environment</text>\n      <text x=\"70\" y=\"405\" fill=\"#22d3ee\" fontSize=\"7\" fontFamily=\"monospace\">2. PACKAGE CREATION: Transaction encoded with AES-256, checksum generated, tamper seal applied</text>\n      <text x=\"70\" y=\"420\" fill=\"#22d3ee\" fontSize=\"7\" fontFamily=\"monospace\">3. COURIER VERIFICATION: Multi-factor authentication, GPS tracking, chain of custody logging</text>\n      <text x=\"70\" y=\"435\" fill=\"#22d3ee\" fontSize=\"7\" fontFamily=\"monospace\">4. BROADCAST VALIDATION: Seal verification, checksum validation, signature verification before broadcast</text>\n      <text x=\"70\" y=\"450\" fill=\"#22d3ee\" fontSize=\"7\" fontFamily=\"monospace\">5. NETWORK CONFIRMATION: Transaction broadcast to Ethereum mainnet with gas optimization</text>\n      \n      {/* Transport path indicator */}\n      <path d=\"M 90 320 Q 250 100 450 150 Q 550 120 660 180\" stroke=\"rgba(34,211,238,0.4)\" strokeWidth=\"2\" strokeDasharray=\"10,5\" fill=\"none\">\n        <animate attributeName=\"stroke-dashoffset\" values=\"0;-20\" dur=\"3s\" repeatCount=\"indefinite\"/>\n      </path>\n      <text x=\"400\" y=\"130\" textAnchor=\"middle\" fill=\"#22d3ee\" fontSize=\"6\" fontFamily=\"monospace\">SECURE TRANSPORT ROUTE</text>\n    </svg>\n  </TechnicalBlueprint>\n);\n\n// USB Sneakernet Diagram  \nexport const USBSneakernetDiagram = () => (\n  <TechnicalBlueprint \n    title=\"USB SNEAKERNET PROTOCOL - DATA RELIC SYSTEM\"\n    specs={[\"SPEC: USB-TX-004\", \"STORAGE: USB 3.0/3.1\", \"ENCRYPTION: AES-256\"]}\n  >\n    <svg viewBox=\"0 0 800 500\" className=\"w-full h-64 border border-cyan-400/30\">\n      <defs>\n        <filter id=\"usbGlow\">\n          <feGaussianBlur stdDeviation=\"2\" result=\"coloredBlur\"/>\n          <feMerge>\n            <feMergeNode in=\"coloredBlur\"/>\n            <feMergeNode in=\"SourceGraphic\"/>\n          </feMerge>\n        </filter>\n      </defs>\n      \n      {/* Offline Computer */}\n      <g filter=\"url(#usbGlow)\">\n        <rect x=\"80\" y=\"150\" width=\"120\" height=\"80\" fill=\"rgba(34,211,238,0.1)\" stroke=\"#22d3ee\" strokeWidth=\"2\"/>\n        <rect x=\"90\" y=\"160\" width=\"100\" height=\"60\" fill=\"rgba(34,211,238,0.2)\"/>\n        <circle cx=\"150\" cy=\"190\" r=\"3\" fill=\"#ff4444\"/>\n        <text x=\"140\" y=\"250\" textAnchor=\"middle\" fill=\"#22d3ee\" fontSize=\"8\" fontFamily=\"monospace\">OFFLINE PC</text>\n        <text x=\"140\" y=\"260\" textAnchor=\"middle\" fill=\"#22d3ee\" fontSize=\"8\" fontFamily=\"monospace\">AIR-GAPPED</text>\n        <text x=\"140\" y=\"270\" textAnchor=\"middle\" fill=\"#ff4444\" fontSize=\"6\" fontFamily=\"monospace\">NO NETWORK</text>\n      </g>\n      \n      {/* USB Device */}\n      <g filter=\"url(#usbGlow)\">\n        <rect x=\"350\" y=\"180\" width=\"100\" height=\"20\" rx=\"10\" fill=\"rgba(34,211,238,0.3)\" stroke=\"#22d3ee\" strokeWidth=\"2\"/>\n        <rect x=\"340\" y=\"185\" width=\"10\" height=\"10\" fill=\"#22d3ee\"/>\n        <rect x=\"335\" y=\"187\" width=\"5\" height=\"6\" fill=\"#22d3ee\"/>\n        <text x=\"400\" y=\"220\" textAnchor=\"middle\" fill=\"#22d3ee\" fontSize=\"8\" fontFamily=\"monospace\">USB DATA RELIC</text>\n        <text x=\"400\" y=\"235\" textAnchor=\"middle\" fill=\"#22d3ee\" fontSize=\"7\" fontFamily=\"monospace\">ENCRYPTED STORAGE</text>\n        <text x=\"400\" y=\"245\" textAnchor=\"middle\" fill=\"#22d3ee\" fontSize=\"6\" fontFamily=\"monospace\">32GB CAPACITY</text>\n      </g>\n      \n      {/* Online Computer */}\n      <g filter=\"url(#usbGlow)\">\n        <rect x=\"600\" y=\"150\" width=\"120\" height=\"80\" fill=\"rgba(34,211,238,0.1)\" stroke=\"#22d3ee\" strokeWidth=\"2\"/>\n        <rect x=\"610\" y=\"160\" width=\"100\" height=\"60\" fill=\"rgba(34,211,238,0.2)\"/>\n        <circle cx=\"670\" cy=\"190\" r=\"3\" fill=\"#44ff44\"/>\n        <text x=\"660\" y=\"250\" textAnchor=\"middle\" fill=\"#22d3ee\" fontSize=\"8\" fontFamily=\"monospace\">ONLINE PC</text>\n        <text x=\"660\" y=\"260\" textAnchor=\"middle\" fill=\"#22d3ee\" fontSize=\"8\" fontFamily=\"monospace\">CONNECTED</text>\n        <text x=\"660\" y=\"270\" textAnchor=\"middle\" fill=\"#44ff44\" fontSize=\"6\" fontFamily=\"monospace\">ETHERNET/WIFI</text>\n      </g>\n      \n      {/* File System Structure */}\n      <rect x=\"50\" y=\"300\" width=\"300\" height=\"150\" fill=\"rgba(0,0,0,0.8)\" stroke=\"rgba(34,211,238,0.5)\" strokeWidth=\"1\"/>\n      <text x=\"60\" y=\"320\" fill=\"#22d3ee\" fontSize=\"8\" fontFamily=\"monospace\" fontWeight=\"bold\">USB FILE STRUCTURE:</text>\n      <text x=\"70\" y=\"340\" fill=\"#22d3ee\" fontSize=\"7\" fontFamily=\"monospace\">/transaction_queue/</text>\n      <text x=\"80\" y=\"355\" fill=\"#22d3ee\" fontSize=\"7\" fontFamily=\"monospace\">├── pending/</text>\n      <text x=\"90\" y=\"370\" fill=\"#22d3ee\" fontSize=\"7\" fontFamily=\"monospace\">│   ├── tx_001.json (2.1KB)</text>\n      <text x=\"90\" y=\"385\" fill=\"#22d3ee\" fontSize=\"7\" fontFamily=\"monospace\">│   ├── tx_002.json (1.8KB)</text>\n      <text x=\"90\" y=\"400\" fill=\"#22d3ee\" fontSize=\"7\" fontFamily=\"monospace\">│   └── tx_003.json (2.3KB)</text>\n      <text x=\"80\" y=\"415\" fill=\"#22d3ee\" fontSize=\"7\" fontFamily=\"monospace\">├── signed/</text>\n      <text x=\"90\" y=\"430\" fill=\"#22d3ee\" fontSize=\"7\" fontFamily=\"monospace\">│   └── batch_001.sig (512B)</text>\n      <text x=\"80\" y=\"445\" fill=\"#22d3ee\" fontSize=\"7\" fontFamily=\"monospace\">└── broadcasted/</text>\n      \n      {/* Network Connection */}\n      <rect x=\"450\" y=\"300\" width=\"300\" height=\"150\" fill=\"rgba(0,0,0,0.8)\" stroke=\"rgba(34,211,238,0.5)\" strokeWidth=\"1\"/>\n      <text x=\"460\" y=\"320\" fill=\"#22d3ee\" fontSize=\"8\" fontFamily=\"monospace\" fontWeight=\"bold\">BROADCAST SEQUENCE:</text>\n      <text x=\"470\" y=\"340\" fill=\"#22d3ee\" fontSize=\"7\" fontFamily=\"monospace\">1. Insert USB → Mount filesystem</text>\n      <text x=\"470\" y=\"355\" fill=\"#22d3ee\" fontSize=\"7\" fontFamily=\"monospace\">2. Scan pending/ directory</text>\n      <text x=\"470\" y=\"370\" fill=\"#22d3ee\" fontSize=\"7\" fontFamily=\"monospace\">3. Validate transaction signatures</text>\n      <text x=\"470\" y=\"385\" fill=\"#22d3ee\" fontSize=\"7\" fontFamily=\"monospace\">4. Estimate gas prices</text>\n      <text x=\"470\" y=\"400\" fill=\"#22d3ee\" fontSize=\"7\" fontFamily=\"monospace\">5. Broadcast to network</text>\n      <text x=\"470\" y=\"415\" fill=\"#22d3ee\" fontSize=\"7\" fontFamily=\"monospace\">6. Move to broadcasted/</text>\n      <text x=\"470\" y=\"430\" fill=\"#22d3ee\" fontSize=\"7\" fontFamily=\"monospace\">7. Generate confirmation receipt</text>\n      \n      {/* Data flow arrows */}\n      <g stroke=\"#22d3ee\" strokeWidth=\"3\" fill=\"none\">\n        <path d=\"M 200 190 Q 275 160 340 190\" markerEnd=\"url(#arrowhead)\">\n          <animate attributeName=\"opacity\" values=\"0.7;1;0.7\" dur=\"2s\" repeatCount=\"indefinite\"/>\n        </path>\n        <path d=\"M 450 190 Q 525 160 600 190\" markerEnd=\"url(#arrowhead)\">\n          <animate attributeName=\"opacity\" values=\"0.4;0.8;0.4\" dur=\"2s\" repeatCount=\"indefinite\" begin=\"1s\"/>\n        </path>\n      </g>\n      \n      {/* Transport indicator */}\n      <text x=\"400\" y=\"140\" textAnchor=\"middle\" fill=\"#22d3ee\" fontSize=\"8\" fontFamily=\"monospace\">PHYSICAL TRANSPORT</text>\n      <path d=\"M 270 170 Q 400 120 530 170\" stroke=\"rgba(34,211,238,0.4)\" strokeWidth=\"2\" strokeDasharray=\"8,4\" fill=\"none\">\n        <animate attributeName=\"stroke-dashoffset\" values=\"0;-24\" dur=\"4s\" repeatCount=\"indefinite\"/>\n      </path>\n    </svg>\n  </TechnicalBlueprint>\n);\n\n// Radio Broadcast Diagram\nexport const RadioBroadcastDiagram = () => (\n  <TechnicalBlueprint \n    title=\"RADIO BROADCAST SYSTEM - GHOST MODE PROTOCOL\"\n    specs={[\"SPEC: RF-TX-006\", \"FREQ: VHF/UHF\", \"MODULATION: PSK/FSK\"]}\n  >\n    <svg viewBox=\"0 0 800 500\" className=\"w-full h-64 border border-cyan-400/30\">\n      <defs>\n        <filter id=\"broadcastGlow\">\n          <feGaussianBlur stdDeviation=\"3\" result=\"coloredBlur\"/>\n          <feMerge>\n            <feMergeNode in=\"coloredBlur\"/>\n            <feMergeNode in=\"SourceGraphic\"/>\n          </feMerge>\n        </filter>\n      </defs>\n      \n      {/* Transmitter Station */}\n      <g filter=\"url(#broadcastGlow)\">\n        <rect x=\"100\" y=\"250\" width=\"80\" height=\"60\" fill=\"rgba(34,211,238,0.2)\" stroke=\"#22d3ee\" strokeWidth=\"2\"/>\n        <rect x=\"130\" y=\"200\" width=\"20\" height=\"50\" fill=\"#22d3ee\" opacity=\"0.8\"/>\n        <line x1=\"140\" y1=\"200\" x2=\"140\" y2=\"150\" stroke=\"#22d3ee\" strokeWidth=\"4\"/>\n        <line x1=\"120\" y1=\"170\" x2=\"160\" y2=\"170\" stroke=\"#22d3ee\" strokeWidth=\"3\"/>\n        <line x1=\"125\" y1=\"185\" x2=\"155\" y2=\"185\" stroke=\"#22d3ee\" strokeWidth=\"2\"/>\n        <text x=\"140\" y=\"330\" textAnchor=\"middle\" fill=\"#22d3ee\" fontSize=\"8\" fontFamily=\"monospace\">TX STATION</text>\n        <text x=\"140\" y=\"340\" textAnchor=\"middle\" fill=\"#22d3ee\" fontSize=\"8\" fontFamily=\"monospace\">50W VHF</text>\n      </g>\n      \n      {/* Receiver Stations */}\n      <g filter=\"url(#broadcastGlow)\">\n        <rect x=\"550\" y=\"180\" width=\"60\" height=\"40\" fill=\"rgba(34,211,238,0.15)\" stroke=\"#22d3ee\" strokeWidth=\"1\"/>\n        <rect x=\"570\" y=\"160\" width=\"20\" height=\"20\" fill=\"#22d3ee\" opacity=\"0.6\"/>\n        <line x1=\"580\" y1=\"160\" x2=\"580\" y2=\"140\" stroke=\"#22d3ee\" strokeWidth=\"2\"/>\n        <text x=\"580\" y=\"240\" textAnchor=\"middle\" fill=\"#22d3ee\" fontSize=\"7\" fontFamily=\"monospace\">RX-A</text>\n        \n        <rect x=\"650\" y=\"280\" width=\"60\" height=\"40\" fill=\"rgba(34,211,238,0.15)\" stroke=\"#22d3ee\" strokeWidth=\"1\"/>\n        <rect x=\"670\" y=\"260\" width=\"20\" height=\"20\" fill=\"#22d3ee\" opacity=\"0.6\"/>\n        <line x1=\"680\" y1=\"260\" x2=\"680\" y2=\"240\" stroke=\"#22d3ee\" strokeWidth=\"2\"/>\n        <text x=\"680\" y=\"340\" textAnchor=\"middle\" fill=\"#22d3ee\" fontSize=\"7\" fontFamily=\"monospace\">RX-B</text>\n        \n        <rect x=\"600\" y=\"380\" width=\"60\" height=\"40\" fill=\"rgba(34,211,238,0.15)\" stroke=\"#22d3ee\" strokeWidth=\"1\"/>\n        <rect x=\"620\" y=\"360\" width=\"20\" height=\"20\" fill=\"#22d3ee\" opacity=\"0.6\"/>\n        <line x1=\"630\" y1=\"360\" x2=\"630\" y2=\"340\" stroke=\"#22d3ee\" strokeWidth=\"2\"/>\n        <text x=\"630\" y=\"440\" textAnchor=\"middle\" fill=\"#22d3ee\" fontSize=\"7\" fontFamily=\"monospace\">RX-C</text>\n      </g>\n      \n      {/* Radio Waves */}\n      <g stroke=\"#22d3ee\" fill=\"none\" opacity=\"0.7\">\n        <circle cx=\"140\" cy=\"280\" r=\"80\" strokeWidth=\"1\">\n          <animate attributeName=\"r\" values=\"80;120;80\" dur=\"2s\" repeatCount=\"indefinite\"/>\n          <animate attributeName=\"opacity\" values=\"0.7;0.3;0.7\" dur=\"2s\" repeatCount=\"indefinite\"/>\n        </circle>\n        <circle cx=\"140\" cy=\"280\" r=\"120\" strokeWidth=\"1\">\n          <animate attributeName=\"r\" values=\"120;160;120\" dur=\"2.5s\" repeatCount=\"indefinite\"/>\n          <animate attributeName=\"opacity\" values=\"0.5;0.2;0.5\" dur=\"2.5s\" repeatCount=\"indefinite\"/>\n        </circle>\n        <circle cx=\"140\" cy=\"280\" r=\"160\" strokeWidth=\"1\">\n          <animate attributeName=\"r\" values=\"160;200;160\" dur=\"3s\" repeatCount=\"indefinite\"/>\n          <animate attributeName=\"opacity\" values=\"0.3;0.1;0.3\" dur=\"3s\" repeatCount=\"indefinite\"/>\n        </circle>\n      </g>\n      \n      {/* Signal Path Lines */}\n      <g stroke=\"#22d3ee\" strokeWidth=\"2\" fill=\"none\" opacity=\"0.6\">\n        <line x1=\"180\" y1=\"280\" x2=\"550\" y2=\"200\">\n          <animate attributeName=\"opacity\" values=\"0.6;1;0.6\" dur=\"1.5s\" repeatCount=\"indefinite\"/>\n        </line>\n        <line x1=\"180\" y1=\"280\" x2=\"650\" y2=\"300\">\n          <animate attributeName=\"opacity\" values=\"0.4;0.8;0.4\" dur=\"1.8s\" repeatCount=\"indefinite\" begin=\"0.5s\"/>\n        </line>\n        <line x1=\"180\" y1=\"280\" x2=\"600\" y2=\"400\">\n          <animate attributeName=\"opacity\" values=\"0.5;0.9;0.5\" dur=\"2.2s\" repeatCount=\"indefinite\" begin=\"1s\"/>\n        </line>\n      </g>\n      \n      {/* Modulation Info */}\n      <rect x=\"250\" y=\"50\" width=\"300\" height=\"120\" fill=\"rgba(0,0,0,0.8)\" stroke=\"rgba(34,211,238,0.5)\" strokeWidth=\"1\"/>\n      <text x=\"260\" y=\"70\" fill=\"#22d3ee\" fontSize=\"8\" fontFamily=\"monospace\" fontWeight=\"bold\">MODULATION SCHEMES:</text>\n      <text x=\"270\" y=\"90\" fill=\"#22d3ee\" fontSize=\"7\" fontFamily=\"monospace\">• PSK31: Phase Shift Keying - 31.25 baud</text>\n      <text x=\"270\" y=\"105\" fill=\"#22d3ee\" fontSize=\"7\" fontFamily=\"monospace\">• FSK: Frequency Shift Keying - 300 baud</text>\n      <text x=\"270\" y=\"120\" fill=\"#22d3ee\" fontSize=\"7\" fontFamily=\"monospace\">• RTTY: Radio Teletype - 45.45 baud</text>\n      <text x=\"270\" y=\"135\" fill=\"#22d3ee\" fontSize=\"7\" fontFamily=\"monospace\">• MFSK: Multi-FSK - Variable rate</text>\n      <text x=\"270\" y=\"150\" fill=\"#22d3ee\" fontSize=\"7\" fontFamily=\"monospace\">• Spread Spectrum: Anti-jam capable</text>\n      \n      {/* Technical specs */}\n      <rect x=\"50\" y=\"380\" width=\"200\" height=\"80\" fill=\"rgba(0,0,0,0.8)\" stroke=\"rgba(34,211,238,0.5)\" strokeWidth=\"1\"/>\n      <text x=\"60\" y=\"400\" fill=\"#22d3ee\" fontSize=\"8\" fontFamily=\"monospace\">FREQUENCY BANDS:</text>\n      <text x=\"70\" y=\"415\" fill=\"#22d3ee\" fontSize=\"7\" fontFamily=\"monospace\">VHF: 144-148 MHz</text>\n      <text x=\"70\" y=\"430\" fill=\"#22d3ee\" fontSize=\"7\" fontFamily=\"monospace\">UHF: 420-450 MHz</text>\n      <text x=\"70\" y=\"445\" fill=\"#22d3ee\" fontSize=\"7\" fontFamily=\"monospace\">RANGE: 50-500 km</text>\n    </svg>\n  </TechnicalBlueprint>\n);\n\n// Satellite Communication Diagram\nexport const SatelliteDiagram = () => (\n  <TechnicalBlueprint \n    title=\"SATELLITE UPLINK SYSTEM - SKYCHAIN RELAY\"\n    specs={[\"SPEC: SAT-TX-007\", \"FREQ: 1-40GHz\", \"ORBIT: LEO/GEO\"]}\n  >\n    <svg viewBox=\"0 0 800 500\" className=\"w-full h-64 border border-cyan-400/30\">\n      <defs>\n        <filter id=\"satGlow\">\n          <feGaussianBlur stdDeviation=\"3\" result=\"coloredBlur\"/>\n          <feMerge>\n            <feMergeNode in=\"coloredBlur\"/>\n            <feMergeNode in=\"SourceGraphic\"/>\n          </feMerge>\n        </filter>\n      </defs>\n      \n      {/* Satellites */}\n      <g filter=\"url(#satGlow)\">\n        <rect x=\"200\" y=\"50\" width=\"30\" height=\"20\" fill=\"#22d3ee\" opacity=\"0.8\"/>\n        <rect x=\"190\" y=\"40\" width=\"50\" height=\"5\" fill=\"#22d3ee\" opacity=\"0.6\"/>\n        <rect x=\"190\" y=\"75\" width=\"50\" height=\"5\" fill=\"#22d3ee\" opacity=\"0.6\"/>\n        <text x=\"215\" y=\"95\" textAnchor=\"middle\" fill=\"#22d3ee\" fontSize=\"6\" fontFamily=\"monospace\">LEO-SAT-1</text>\n        \n        <rect x=\"580\" y=\"60\" width=\"30\" height=\"20\" fill=\"#22d3ee\" opacity=\"0.8\"/>\n        <rect x=\"570\" y=\"50\" width=\"50\" height=\"5\" fill=\"#22d3ee\" opacity=\"0.6\"/>\n        <rect x=\"570\" y=\"85\" width=\"50\" height=\"5\" fill=\"#22d3ee\" opacity=\"0.6\"/>\n        <text x=\"595\" y=\"105\" textAnchor=\"middle\" fill=\"#22d3ee\" fontSize=\"6\" fontFamily=\"monospace\">GEO-SAT-2</text>\n      </g>\n      \n      {/* Ground Stations */}\n      <g>\n        {/* Transmit Station */}\n        <ellipse cx=\"150\" cy=\"400\" rx=\"40\" ry=\"20\" fill=\"rgba(34,211,238,0.2)\" stroke=\"#22d3ee\" strokeWidth=\"2\"/>\n        <path d=\"M 150 380 Q 140 360 120 350 Q 150 340 180 350 Q 160 360 150 380\" fill=\"rgba(34,211,238,0.3)\" stroke=\"#22d3ee\" strokeWidth=\"1\"/>\n        <text x=\"150\" y=\"440\" textAnchor=\"middle\" fill=\"#22d3ee\" fontSize=\"7\" fontFamily=\"monospace\">UPLINK DISH</text>\n        <text x=\"150\" y=\"450\" textAnchor=\"middle\" fill=\"#22d3ee\" fontSize=\"7\" fontFamily=\"monospace\">TX-STATION</text>\n        \n        {/* Receive Station */}\n        <ellipse cx=\"650\" cy=\"400\" rx=\"40\" ry=\"20\" fill=\"rgba(34,211,238,0.2)\" stroke=\"#22d3ee\" strokeWidth=\"2\"/>\n        <path d=\"M 650 380 Q 640 360 620 350 Q 650 340 680 350 Q 660 360 650 380\" fill=\"rgba(34,211,238,0.3)\" stroke=\"#22d3ee\" strokeWidth=\"1\"/>\n        <text x=\"650\" y=\"440\" textAnchor=\"middle\" fill=\"#22d3ee\" fontSize=\"7\" fontFamily=\"monospace\">DOWNLINK DISH</text>\n        <text x=\"650\" y=\"450\" textAnchor=\"middle\" fill=\"#22d3ee\" fontSize=\"7\" fontFamily=\"monospace\">RX-STATION</text>\n        \n        {/* Ground Control */}\n        <rect x=\"350\" y=\"380\" width=\"100\" height=\"60\" fill=\"rgba(34,211,238,0.1)\" stroke=\"#22d3ee\" strokeWidth=\"2\"/>\n        <text x=\"400\" y=\"395\" textAnchor=\"middle\" fill=\"#22d3ee\" fontSize=\"8\" fontFamily=\"monospace\">GROUND CONTROL</text>\n        <text x=\"400\" y=\"405\" textAnchor=\"middle\" fill=\"#22d3ee\" fontSize=\"8\" fontFamily=\"monospace\">BLOCKCHAIN NODE</text>\n        <text x=\"400\" y=\"420\" textAnchor=\"middle\" fill=\"#22d3ee\" fontSize=\"6\" fontFamily=\"monospace\">node.skychain.net</text>\n        <text x=\"400\" y=\"430\" textAnchor=\"middle\" fill=\"#22d3ee\" fontSize=\"6\" fontFamily=\"monospace\">SYNC: ETH MAINNET</text>\n      </g>\n      \n      {/* Communication Beams */}\n      <g stroke=\"#22d3ee\" strokeWidth=\"2\" fill=\"none\">\n        {/* Uplink */}\n        <line x1=\"150\" y1=\"360\" x2=\"215\" y2=\"70\" opacity=\"0.8\">\n          <animate attributeName=\"opacity\" values=\"0.8;0.3;0.8\" dur=\"2s\" repeatCount=\"indefinite\"/>\n        </line>\n        \n        {/* Satellite to Satellite */}\n        <line x1=\"230\" y1=\"60\" x2=\"580\" y2=\"70\" opacity=\"0.6\" strokeDasharray=\"5,5\">\n          <animate attributeName=\"opacity\" values=\"0.6;1;0.6\" dur=\"3s\" repeatCount=\"indefinite\" begin=\"1s\"/>\n        </line>\n        \n        {/* Downlink */}\n        <line x1=\"595\" y1=\"80\" x2=\"650\" y2=\"360\" opacity=\"0.7\">\n          <animate attributeName=\"opacity\" values=\"0.7;0.2;0.7\" dur=\"2s\" repeatCount=\"indefinite\" begin=\"2s\"/>\n        </line>\n        \n        {/* Ground network */}\n        <line x1=\"400\" y1=\"380\" x2=\"400\" y2=\"320\" strokeWidth=\"3\"/>\n        <text x=\"410\" y=\"350\" fill=\"#22d3ee\" fontSize=\"6\" fontFamily=\"monospace\">FIBER UPLINK</text>\n      </g>\n      \n      {/* Orbital indicators */}\n      <ellipse cx=\"400\" cy=\"250\" rx=\"350\" ry=\"150\" fill=\"none\" stroke=\"rgba(34,211,238,0.2)\" strokeWidth=\"1\" strokeDasharray=\"10,10\"/>\n      <text x=\"50\" y=\"150\" fill=\"#22d3ee\" fontSize=\"7\" fontFamily=\"monospace\">LEO ORBIT: 160-2000km</text>\n      \n      {/* Technical specifications */}\n      <rect x=\"50\" y=\"300\" width=\"200\" height=\"60\" fill=\"rgba(0,0,0,0.8)\" stroke=\"rgba(34,211,238,0.5)\" strokeWidth=\"1\"/>\n      <text x=\"60\" y=\"315\" fill=\"#22d3ee\" fontSize=\"8\" fontFamily=\"monospace\">UPLINK: 14.0-14.5 GHz</text>\n      <text x=\"60\" y=\"325\" fill=\"#22d3ee\" fontSize=\"8\" fontFamily=\"monospace\">DOWNLINK: 11.7-12.2 GHz</text>\n      <text x=\"60\" y=\"335\" fill=\"#22d3ee\" fontSize=\"8\" fontFamily=\"monospace\">LATENCY: 250-600ms</text>\n      <text x=\"60\" y=\"345\" fill=\"#22d3ee\" fontSize=\"8\" fontFamily=\"monospace\">BANDWIDTH: 10-100 Mbps</text>\n      <text x=\"60\" y=\"355\" fill=\"#22d3ee\" fontSize=\"8\" fontFamily=\"monospace\">COVERAGE: GLOBAL</text>\n    </svg>\n  </TechnicalBlueprint>\n);","size_bytes":36844},"client/src/components/holographic-protocol.tsx":{"content":"import { useState } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { RealisticWastelandCard, RealisticText, RealisticButton } from \"./realistic-wasteland\";\nimport { \n  MeshNetworkDiagram, \n  SMSGatewayDiagram, \n  PhysicalHandshakeDiagram,\n  USBSneakernetDiagram,\n  HamRadioDiagram, \n  RadioBroadcastDiagram,\n  SatelliteDiagram \n} from './blueprint-diagrams';\nimport { getProtocolIcon } from './protocol-icons';\n\ninterface Protocol {\n  id: string;\n  name: string;\n  category: string;\n  description: string;\n  diagram: React.ReactNode;\n  code: string;\n  frequency?: string;\n  range?: string;\n  encryption?: string;\n}\n\nconst PROTOCOLS: Protocol[] = [\n  {\n    id: \"PRTCL1\",\n    name: \"BONE NET\",\n    category: \"Mesh Networking\",\n    description: \"Create a decentralized, peer-to-peer network where devices connect directly to each other. Transactions are passed from device to device like whispers through a crowd.\",\n    diagram: <MeshNetworkDiagram />,\n    code: `// BONE NET Protocol Implementation\nclass BoneNetNode {\n  constructor(nodeId) {\n    this.id = nodeId;\n    this.peers = new Map();\n    this.messageQueue = [];\n  }\n\n  connectToPeer(peerId, connection) {\n    this.peers.set(peerId, connection);\n    console.log(\\`Connected to peer: \\${peerId}\\`);\n  }\n\n  broadcastTransaction(txData) {\n    const packet = {\n      id: generateId(),\n      data: txData,\n      hops: 0,\n      timestamp: Date.now()\n    };\n    \n    this.peers.forEach((conn, peerId) => {\n      conn.send(JSON.stringify(packet));\n    });\n  }\n}`,\n    frequency: \"2.4GHz ISM Band\",\n    range: \"100-300m per hop\",\n    encryption: \"AES-256-GCM\"\n  },\n  {\n    id: \"PRTCL2\",\n    name: \"SIGNAL SCRIPT\",\n    category: \"SMS Transactions\",\n    description: \"Utilize existing cellular towers for basic communication. Transactions can be sent via plain-text SMS containing simple commands, wallet addresses, and signatures.\",\n    diagram: <SMSGatewayDiagram />,\n    code: `// SMS Transaction Protocol\nfunction encodeSMSTransaction(tx) {\n  const message = [\n    'TX',\n    tx.to.slice(0, 10),\n    tx.value + 'ETH',\n    'SIGN',\n    tx.signature.slice(0, 16) + '...'\n  ].join(':');\n  \n  return message;\n}\n\nfunction decodeSMSTransaction(smsText) {\n  const parts = smsText.split(':');\n  return {\n    type: parts[0],\n    to: parts[1],\n    value: parseFloat(parts[2]),\n    signature: parts[4]\n  };\n}`,\n    frequency: \"850-1900MHz Cellular\",\n    range: \"Cell tower coverage\",\n    encryption: \"SMS + App-level crypto\"\n  },\n  {\n    id: \"PRTCL3\",\n    name: \"PHYSICAL HANDSHAKE\",\n    category: \"Offline Hardware Transfer\",\n    description: \"Physical-delivery method for transactions. One person signs a transaction, another physically carries the data to a location with internet access.\",\n    diagram: <PhysicalHandshakeDiagram />,\n    code: `// Physical Handshake Protocol\nclass PhysicalHandshake {\n  static createTransportPackage(signedTx) {\n    const package = {\n      payload: encrypt(signedTx, randomKey()),\n      checksum: sha256(signedTx),\n      timestamp: Date.now(),\n      courier_id: generateCourierId()\n    };\n    \n    return {\n      qr_code: generateQR(package),\n      usb_data: package,\n      verification: createTamperSeal(package)\n    };\n  }\n  \n  static verifyAndBroadcast(package) {\n    if (verifyTamperSeal(package)) {\n      const tx = decrypt(package.payload);\n      return broadcastToNetwork(tx);\n    }\n    throw new Error('Package compromised');\n  }\n}`,\n    frequency: \"Physical Transport\",\n    range: \"Unlimited (human transport)\",\n    encryption: \"Hardware wallet + AES\"\n  },\n  {\n    id: \"PRTCL4\",\n    name: \"DATA RELIC\",\n    category: \"USB Sneakernet\",\n    description: \"Use a portable storage device as the data carrier. A signed transaction file is saved to a USB stick, physically moved to a device that has network access.\",\n    diagram: <USBSneakernetDiagram />,\n    code: `// Data Relic USB Protocol\nclass DataRelic {\n  static saveTransaction(usbPath, transaction) {\n    const filename = \\`tx_\\${Date.now()}.json\\`;\n    const filepath = path.join(usbPath, 'pending', filename);\n    \n    const txPackage = {\n      transaction,\n      signature: signTransaction(transaction),\n      metadata: {\n        created: Date.now(),\n        device_id: getDeviceId(),\n        checksum: hashTransaction(transaction)\n      }\n    };\n    \n    fs.writeFileSync(filepath, JSON.stringify(txPackage));\n    return filename;\n  }\n  \n  static processPendingTransactions(usbPath) {\n    const pendingDir = path.join(usbPath, 'pending');\n    const files = fs.readdirSync(pendingDir);\n    \n    return files.map(file => {\n      const data = JSON.parse(fs.readFileSync(file));\n      return validateAndBroadcast(data);\n    });\n  }\n}`,\n    frequency: \"USB 3.0/3.1\",\n    range: \"Physical transport required\",\n    encryption: \"File-level encryption\"\n  },\n  {\n    id: \"PRTCL5\",\n    name: \"STATIC HAUL\",\n    category: \"Ham Radio Blockchain\",\n    description: \"Harness amateur radio power. If ham radio transmits emails across vast distances, it can transmit blockchain data - resilient, cross-border communication.\",\n    diagram: <HamRadioDiagram />,\n    code: `// Ham Radio Protocol Implementation\nclass StaticHaul {\n  constructor(callsign, frequency) {\n    this.callsign = callsign;\n    this.frequency = frequency;\n    this.ax25 = new AX25Protocol();\n  }\n  \n  transmitTransaction(transaction) {\n    const packet = this.ax25.createPacket({\n      source: this.callsign,\n      destination: \"BLKCHN\",\n      data: compressTransaction(transaction),\n      protocol: \"TCP/IP\"\n    });\n    \n    return this.radio.transmit(packet, this.frequency);\n  }\n  \n  receiveTransactions() {\n    const packets = this.radio.listen(this.frequency);\n    return packets\n      .filter(p => p.destination === \"BLKCHN\")\n      .map(p => decompressTransaction(p.data));\n  }\n}`,\n    frequency: \"3-30MHz HF Bands\",\n    range: \"Global (HF skip)\",\n    encryption: \"Digital signature + FEC\"\n  },\n  {\n    id: \"PRTCL6\",\n    name: \"GHOST MODE\",\n    category: \"Radio Broadcast\",\n    description: \"Leverage radio broadcasts to transmit transactions. Signed, compressed data packets converted to radio waves and broadcast over air.\",\n    diagram: <RadioBroadcastDiagram />,\n    code: `// Ghost Mode Broadcast Protocol  \nclass GhostMode {\n  constructor(frequency, modulation = 'PSK31') {\n    this.frequency = frequency;\n    this.modulation = modulation;\n    this.sdr = new SDRInterface();\n  }\n  \n  broadcastTransaction(tx) {\n    const compressed = lzma.compress(JSON.stringify(tx));\n    const encoded = base64.encode(compressed);\n    const modulated = this.modulateData(encoded);\n    \n    return this.sdr.transmit({\n      frequency: this.frequency,\n      data: modulated,\n      power: calculateOptimalPower(),\n      duration: calculateTransmissionTime(encoded.length)\n    });\n  }\n  \n  scanForTransactions() {\n    const signals = this.sdr.scan(this.frequency);\n    return signals\n      .filter(s => s.containsBlockchainData())\n      .map(s => this.demodulateAndDecode(s));\n  }\n}`,\n    frequency: \"Various ISM bands\",\n    range: \"Line of sight + atmospheric\",\n    encryption: \"Spread spectrum + crypto\"\n  },\n  {\n    id: \"PRTCL7\",\n    name: \"SKYCHAIN RELAY\",\n    category: \"Satellite Link\",\n    description: \"Broadcast transactions directly into space using satellite dish. Satellite relays data back to receiving station connected to blockchain network.\",\n    diagram: <SatelliteDiagram />,\n    code: `// Skychain Satellite Protocol\nclass SkychainRelay {\n  constructor(satellite, groundStation) {\n    this.satellite = satellite;\n    this.station = groundStation;\n    this.dish = new SatelliteDish();\n  }\n  \n  calculatePassWindow() {\n    return this.satellite.getNextPass(\n      this.station.latitude,\n      this.station.longitude\n    );\n  }\n  \n  uplinkTransaction(tx, passWindow) {\n    const packet = {\n      payload: tx,\n      timestamp: Date.now(),\n      destination: \"BLOCKCHAIN_NET\",\n      priority: tx.gasPrice > 1000000000 ? \"HIGH\" : \"NORMAL\"\n    };\n    \n    return this.dish.transmit({\n      target: this.satellite,\n      data: packet,\n      window: passWindow,\n      frequency: this.satellite.uplinkFreq\n    });\n  }\n  \n  receiveDownlink() {\n    return this.dish.listen(this.satellite.downlinkFreq)\n      .filter(p => p.destination === \"BLOCKCHAIN_NET\");\n  }\n}`,\n    frequency: \"1-40GHz (various bands)\",\n    range: \"Global via satellite\",\n    encryption: \"Satellite-grade encryption\"\n  }\n];\n\ninterface HolographicProtocolProps {\n  protocolId?: string;\n  onClose?: () => void;\n}\n\nexport const HolographicProtocol = ({ protocolId, onClose }: HolographicProtocolProps) => {\n  const protocol = PROTOCOLS.find(p => p.id === protocolId);\n\n  if (!protocol) return null;\n\n  return (\n    <AnimatePresence>\n      <motion.div\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        exit={{ opacity: 0 }}\n        className=\"fixed inset-0 bg-black/80 backdrop-blur-md z-[10000] flex items-center justify-center p-4\"\n        onClick={onClose}\n      >\n        <motion.div\n          initial={{ scale: 0.5, rotateY: -90, opacity: 0 }}\n          animate={{ scale: 1, rotateY: 0, opacity: 1 }}\n          exit={{ scale: 0.5, rotateY: 90, opacity: 0 }}\n          transition={{\n            type: \"spring\",\n            stiffness: 300,\n            damping: 30,\n            duration: 0.6\n          }}\n          className=\"max-w-6xl w-full max-h-[90vh] overflow-auto\"\n          onClick={(e) => e.stopPropagation()}\n        >\n          <RealisticWastelandCard variant=\"dark\" className=\"p-0 overflow-hidden relative\">\n            {/* Holographic border glow */}\n            <div className=\"absolute inset-0 border-2 border-cyan-400/30 shadow-[0_0_30px_rgba(34,211,238,0.3)] pointer-events-none\">\n              <div className=\"absolute inset-2 border border-cyan-300/20 shadow-[inset_0_0_20px_rgba(34,211,238,0.2)]\"></div>\n            </div>\n            \n            {/* Header */}\n            <div className=\"p-6 border-b border-neutral-700 bg-gradient-to-r from-neutral-900 to-neutral-800 relative\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center gap-4\">\n                  <div className=\"w-16 h-16 bg-cyan-500/20 border-2 border-cyan-400 flex items-center justify-center\">\n                    <div className=\"scale-150\">\n                      {getProtocolIcon(protocol.id)}\n                    </div>\n                  </div>\n                  <div>\n                    <RealisticText variant=\"title\" className=\"text-2xl text-cyan-100\">\n                      {protocol.name}\n                    </RealisticText>\n                    <RealisticText variant=\"subtitle\" className=\"text-cyan-300/70\">\n                      {protocol.category} • {protocol.id}\n                    </RealisticText>\n                  </div>\n                </div>\n                <RealisticButton variant=\"ghost\" onClick={onClose} className=\"text-cyan-300 hover:text-cyan-100\">\n                  ✕ CLOSE\n                </RealisticButton>\n              </div>\n            </div>\n\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 p-6\">\n              {/* Protocol Description */}\n              <motion.div\n                initial={{ x: -50, opacity: 0 }}\n                animate={{ x: 0, opacity: 1 }}\n                transition={{ delay: 0.2 }}\n                className=\"space-y-4\"\n              >\n                <RealisticText variant=\"subtitle\" className=\"text-cyan-200 border-b border-cyan-400/30 pb-2\">\n                  PROTOCOL DESCRIPTION\n                </RealisticText>\n                <RealisticText variant=\"body\" className=\"text-neutral-300 leading-relaxed\">\n                  {protocol.description}\n                </RealisticText>\n\n                {/* Technical Specs */}\n                <div className=\"grid grid-cols-3 gap-3 mt-6\">\n                  <div className=\"p-3 bg-neutral-800/50 border border-cyan-400/30\">\n                    <RealisticText variant=\"caption\" className=\"text-cyan-300\">FREQUENCY</RealisticText>\n                    <RealisticText variant=\"body\" className=\"text-neutral-200 font-mono text-xs\">\n                      {protocol.frequency}\n                    </RealisticText>\n                  </div>\n                  <div className=\"p-3 bg-neutral-800/50 border border-cyan-400/30\">\n                    <RealisticText variant=\"caption\" className=\"text-cyan-300\">RANGE</RealisticText>\n                    <RealisticText variant=\"body\" className=\"text-neutral-200 font-mono text-xs\">\n                      {protocol.range}\n                    </RealisticText>\n                  </div>\n                  <div className=\"p-3 bg-neutral-800/50 border border-cyan-400/30\">\n                    <RealisticText variant=\"caption\" className=\"text-cyan-300\">ENCRYPTION</RealisticText>\n                    <RealisticText variant=\"body\" className=\"text-neutral-200 font-mono text-xs\">\n                      {protocol.encryption}\n                    </RealisticText>\n                  </div>\n                </div>\n              </motion.div>\n\n              {/* Network Diagram */}\n              <motion.div\n                initial={{ x: 50, opacity: 0 }}\n                animate={{ x: 0, opacity: 1 }}\n                transition={{ delay: 0.3 }}\n                className=\"space-y-4\"\n              >\n                <RealisticText variant=\"subtitle\" className=\"text-cyan-200 border-b border-cyan-400/30 pb-2\">\n                  TECHNICAL BLUEPRINT\n                </RealisticText>\n                <div className=\"border border-cyan-400/50 overflow-hidden\">\n                  {protocol.diagram}\n                </div>\n              </motion.div>\n            </div>\n\n            {/* Code Implementation */}\n            <motion.div\n              initial={{ y: 50, opacity: 0 }}\n              animate={{ y: 0, opacity: 1 }}\n              transition={{ delay: 0.4 }}\n              className=\"p-6 border-t border-neutral-700\"\n            >\n              <RealisticText variant=\"subtitle\" className=\"text-cyan-200 border-b border-cyan-400/30 pb-2 mb-4\">\n                IMPLEMENTATION CODE\n              </RealisticText>\n              <div className=\"p-4 bg-black border border-cyan-400/50 font-mono text-xs text-emerald-300 leading-relaxed overflow-auto max-h-96\">\n                <pre className=\"whitespace-pre-wrap\">{protocol.code}</pre>\n              </div>\n            </motion.div>\n\n\n          </RealisticWastelandCard>\n        </motion.div>\n      </motion.div>\n    </AnimatePresence>\n  );\n};\n\nexport const ProtocolGrid = () => {\n  const [selectedProtocol, setSelectedProtocol] = useState<string | null>(null);\n\n  return (\n    <div className=\"space-y-6 relative\">\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n        {PROTOCOLS.map((protocol) => (\n          <motion.div\n            key={protocol.id}\n            className=\"p-4 bg-neutral-800 border border-neutral-700 hover:border-cyan-400/50 transition-all cursor-pointer relative overflow-hidden group\"\n            whileHover={{ scale: 1.02 }}\n            whileTap={{ scale: 0.98 }}\n            onClick={() => setSelectedProtocol(protocol.id)}\n          >\n            <div className=\"flex items-center gap-3 mb-3\">\n              <div className=\"w-8 h-8 flex items-center justify-center bg-cyan-500/10 border border-cyan-400/30\">\n                {getProtocolIcon(protocol.id)}\n              </div>\n              <div className=\"px-2 py-1 bg-cyan-500/20 border border-cyan-400/50 text-xs font-mono text-cyan-300\">\n                {protocol.id}\n              </div>\n            </div>\n            <RealisticText variant=\"body\" className=\"text-neutral-100 font-mono text-sm mb-1\">\n              {protocol.name}\n            </RealisticText>\n            <RealisticText variant=\"caption\" className=\"text-neutral-400\">\n              {protocol.category}\n            </RealisticText>\n            \n            {/* Hover glow - subtle */}\n            <div className=\"absolute inset-0 bg-cyan-400/5 opacity-0 group-hover:opacity-100 transition-opacity duration-300\" />\n          </motion.div>\n        ))}\n      </div>\n\n      {/* Ensure modal renders properly */}\n      {selectedProtocol && (\n        <HolographicProtocol \n          protocolId={selectedProtocol}\n          onClose={() => setSelectedProtocol(null)}\n        />\n      )}\n    </div>\n  );\n};","size_bytes":16335},"README.md":{"content":"# BLOKBOY 1000 - Onchain Survival Handbook (OCSH) Gaming Platform\n\nA cutting-edge post-apocalyptic web3 social gaming platform featuring deterministic territorial control, alliance-based warfare, and offline blockchain transaction capabilities. Built with authentic military-industrial aesthetics for strategic multiplayer experiences.\n\n## 🎯 Core Features\n\n### ✅ Web3 Authentication & NFT Gating\n- **MetaMask Integration**: Seamless wallet connection with Base Network support\n- **NFT Minting System**: 1 NFT per wallet limit with territory selection during mint\n- **Automatic Territory Claiming**: Territory ownership assigned upon successful NFT mint\n- **Access Control**: Core game requires OCSH NFT ownership for entry\n\n### ✅ Deterministic Battle System\n- **Pure Aggregate Calculation**: Higher total power always wins - zero randomness\n- **Alliance Supremacy**: Member stats sum directly into battle power with coordination bonuses\n- **Territory Mathematics**: Holdings create exponential power advantages through logistics\n- **Strategic Positioning**: Border and central territories provide calculated bonuses\n- **Predictable Outcomes**: Battle results can be calculated before engagement\n- **Power Rankings**: Real-time alliance and player power leaderboards\n\n### ✅ Alliance & Territory Control\n- **Multi-role Alliance System**: Leader, member, and invited user management\n- **24-hour Territory Claims**: Strategic positioning with adjacent territory bonuses\n- **Real-time Territory Updates**: Live map showing ownership and control zones\n- **Supply Line Advantages**: Multiple territories create logistical power multipliers\n\n### ✅ Trading & Economy System\n- **25+ Trading API Endpoints**: Comprehensive marketplace with order management\n- **NFT Trading Interface**: Buy, sell, and transfer OCSH NFTs\n- **Real-time Price Feeds**: Live market data with price history charts\n- **Portfolio Management**: Complete asset tracking and transaction history\n\n### ✅ Real-time Communication\n- **WebSocket Integration**: Live updates for battles, messages, and territory changes\n- **Global Messaging System**: Anti-spam mechanisms with cooldowns\n- **Alliance Communications**: Private channels for strategic coordination\n- **Battle Notifications**: Real-time alerts for alliance conflicts\n\n### ✅ Offline-First Handheld Interface\n- **BLOKBOY 1000 Terminal**: Dedicated PWA companion app for offline operations\n- **Foundry Courier Integration**: Python-based CLI for offline transaction encoding/decoding\n- **Transaction Queuing System**: Batch processing when connectivity returns\n- **Frame Encoding Support**: Radio/mesh/SMS transmission capabilities\n\n## 🏗️ Technical Architecture\n\n### Frontend Stack\n- **React 18 + TypeScript**: Type-safe component development with Vite\n- **Shadcn/UI + Radix**: Accessible, unstyled component primitives\n- **Tailwind CSS**: Utility-first styling with custom cyberpunk theme\n- **TanStack Query**: Powerful server state management\n- **Wouter**: Lightweight client-side routing\n- **Framer Motion**: Smooth animations and transitions\n\n### Backend Stack\n- **Node.js + Express**: TypeScript server with ES modules\n- **PostgreSQL + Drizzle ORM**: Type-safe database operations\n- **WebSocket Server**: Real-time multiplayer functionality\n- **Session Management**: PostgreSQL-backed secure sessions\n\n### Database Design\n- **Modular Schema**: Separate tables for users, alliances, territories, battles, messages\n- **Foreign Key Relationships**: Well-defined entity connections\n- **Type Safety**: Zod schemas for runtime validation\n- **Migration System**: Drizzle-kit for schema management\n\n### Game Logic\n- **Mathematical Warfare**: Pure calculations determine all battle outcomes\n- **Alliance Aggregate Power**: Direct summation of member stats with coordination bonuses\n- **Exponential Territory Scaling**: More holdings = exponentially greater strategic advantage\n- **Zero Randomness**: Battles are 100% predictable based on alliance and territory mathematics\n\n## 🚀 Quick Start\n\n### Prerequisites\n- Node.js 18+ \n- PostgreSQL database\n- MetaMask or Web3 wallet\n\n### Installation\n```bash\n# Clone and install dependencies\nnpm install\n\n# Set up database\nnpm run db:push\n\n# Start development server\nnpm run dev\n```\n\n### Environment Variables\n```bash\nDATABASE_URL=postgresql://user:pass@host:port/db\nPGHOST=localhost\nPGPORT=5432\nPGUSER=username\nPGPASSWORD=password\nPGDATABASE=database_name\n```\n\n## 📡 API Documentation\n\n### Authentication System\n```\nPOST   /api/auth/login           - User login\nPOST   /api/auth/logout          - User logout  \nGET    /api/auth/session         - Get current session\n```\n\n### User Management\n```\nGET    /api/users                - Get all users\nPOST   /api/users                - Create user\nGET    /api/users/:id            - Get user by ID\nPATCH  /api/users/:id            - Update user\nGET    /api/users/:id/alliance   - Get user's alliance\n```\n\n### Alliance System\n```\nGET    /api/alliances                    - Get all alliances\nPOST   /api/alliances                    - Create alliance\nGET    /api/alliances/:id                - Get alliance details\nPATCH  /api/alliances/:id                - Update alliance\nPOST   /api/alliances/:id/join           - Join alliance\nDELETE /api/alliances/:id/leave          - Leave alliance\nGET    /api/alliances/power-rankings     - Alliance power leaderboard\nGET    /api/alliances/:id/power          - Detailed alliance power breakdown\nPOST   /api/alliances/battle-prediction  - Predict battle outcome between alliances\n```\n\n### Territory Control\n```\nGET    /api/territories             - Get all territories\nPOST   /api/territories/claim       - Claim territory\nGET    /api/territories/user/:id    - Get user territories\n```\n\n### Battle System\n```\nGET    /api/battles                 - Get user battles\nPOST   /api/battles                 - Create battle\nGET    /api/battles/:id             - Get battle details\nPOST   /api/battles/:id/resolve     - Resolve battle using aggregate calculations\nGET    /api/users/:id/battles       - Get user battle history\n```\n\n### Trading Platform\n```\nGET    /api/nft/marketplace         - Get marketplace listings\nPOST   /api/nft/list                - List NFT for sale\nGET    /api/nft/user/:address       - Get user's NFTs\nPOST   /api/nft/buy                 - Purchase NFT\nPOST   /api/nft/transfer            - Transfer NFT\nGET    /api/nft/history/:tokenId    - Get NFT transaction history\n```\n\n### Communication\n```\nGET    /api/messages/global         - Get global messages\nPOST   /api/messages                - Send message\nGET    /api/messages/alliance/:id   - Get alliance messages\n```\n\n### Leaderboards\n```\nGET    /api/leaderboard             - Get player rankings\nGET    /api/leaderboard/alliances   - Get alliance rankings\n```\n\n## 🎮 Game Mechanics\n\n### Battle Resolution\nBattles are resolved using pure mathematical calculations:\n\n1. **Individual Power (40%)**:\n   - Base Level × 50\n   - √(XP) × 2  \n   - Reputation × 5\n   - Win Ratio × 200\n\n2. **Alliance Power (35%)**:\n   - Sum of all member levels × 40\n   - √(Total XP) + Total Reputation × 3\n   - Member count multiplier (1 + count × 0.1)\n   - Coordination bonus from collective wins × 2\n\n3. **Territory Power (15%)**:\n   - Personal territories × 40\n   - Adjacent allied territories × 25\n   - Logistical advantage for 3+ territories × 10\n   - Defensive bonus (+80 for defenders)\n\n4. **Strategic Position (10%)**:\n   - Border territory bonus (+30)\n   - Central territory bonus (+20)\n\n**Winner**: The participant with higher total aggregate power always wins.\n\n### Alliance Advantages\n- **Size Scaling**: More members = exponentially more power\n- **Quality Matters**: Elite members contribute more than numerous weak ones\n- **Territory Synergy**: Alliance territories create supply line bonuses\n- **Coordination Effects**: Collective victories multiply alliance strength\n\n### Economic Model\n- **1 NFT Per Wallet**: Prevents farming and ensures fair distribution\n- **Territory Selection**: Strategic choice during minting affects starting position\n- **Market Dynamics**: Player-driven economy with real trading mechanics\n- **Scarcity Value**: Limited NFTs create genuine ownership stakes\n\n## 🛠️ Development\n\n### Project Structure\n```\n├── client/src/\n│   ├── components/     # UI components and game interfaces\n│   ├── hooks/          # Custom React hooks\n│   ├── lib/            # Utility libraries and API clients\n│   ├── pages/          # Main application pages\n│   └── App.tsx         # Root application component\n├── server/\n│   ├── services/       # Business logic and game engines\n│   ├── routes.ts       # API endpoint definitions\n│   ├── storage.ts      # Database interface layer\n│   └── index.ts        # Server entry point\n├── shared/\n│   └── schema.ts       # Database schema and type definitions\n└── README.md\n```\n\n### Key Components\n- **dashboard-realistic.tsx**: Main strategic command interface\n- **handheld-realistic.tsx**: Offline-capable PWA terminal\n- **nft-gate.tsx**: Access control and wallet connection\n- **realistic-wasteland.tsx**: Core UI component library\n- **battle-engine.ts**: Deterministic combat calculations\n- **alliance-power-calculator.ts**: Alliance strength mathematics\n\n### Database Schema\n- **users**: Player accounts with stats and wallet addresses  \n- **alliances**: Alliance organizations with leadership hierarchy\n- **territories**: Geographic control zones with ownership tracking\n- **battles**: Combat records with mathematical power calculations\n- **messages**: Communication system with anti-spam controls\n- **courier_transactions**: Offline transaction queue management\n\n## 🌐 Deployment\n\n### Replit Deployment\n1. Ensure all tests pass and application builds successfully\n2. Configure production environment variables\n3. Click the \"Deploy\" button in Replit interface\n4. Application will be available at `<project-name>.replit.app`\n\n### Manual Deployment\n```bash\n# Build for production\nnpm run build\n\n# Start production server\nnpm start\n```\n\n## 🔧 Configuration\n\n### Database Setup\n```bash\n# Push schema to database\nnpm run db:push\n\n# Generate migrations\nnpm run db:generate\n\n# Apply migrations\nnpm run db:migrate\n```\n\n### Environment Configuration\n- **Development**: Uses local PostgreSQL with development settings\n- **Production**: Requires production DATABASE_URL and secrets\n- **WebSocket**: Automatically configures wss:// for HTTPS, ws:// for HTTP\n\n## 📜 License & Credits\n\n**BLOKBOY 1000** - Built by **ARTIFACT VIRTUAL** (AV)\n\nA next-generation web3 gaming platform combining strategic gameplay with cutting-edge blockchain technology. Experience authentic military-industrial aesthetics in a deterministic combat environment where skill and coordination determine victory.\n\n---\n\n*\"In the wasteland, only the strongest alliances survive. Mathematics, not luck, determines who controls the territories.\"*","size_bytes":11006},"client/src/components/social-interaction-hub.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { RealisticText, RealisticButton, RealisticWastelandCard } from \"@/components/realistic-wasteland\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Separator } from \"@/components/ui/separator\";\n\n// Types for social features\ninterface Player {\n  id: number;\n  username: string;\n  xp: number;\n  reputation: number;\n  allianceId?: number;\n  allianceName?: string;\n  lastSeen: string;\n  status: 'online' | 'away' | 'offline';\n}\n\ninterface SocialMessage {\n  id: number;\n  senderId: number;\n  senderName: string;\n  content: string;\n  type: 'public' | 'alliance' | 'private' | 'battle' | 'territory';\n  timestamp: string;\n  isOnChain: boolean;\n  transactionHash?: string;\n}\n\ninterface PlayerInteraction {\n  playerId: number;\n  playerName: string;\n  type: 'battle_invite' | 'alliance_invite' | 'trade_request' | 'territory_challenge';\n  message: string;\n  timestamp: string;\n  status: 'pending' | 'accepted' | 'declined';\n}\n\ninterface SocialEvent {\n  id: number;\n  type: 'battle_result' | 'territory_claimed' | 'alliance_formed' | 'achievement';\n  playerName: string;\n  description: string;\n  timestamp: string;\n  impact: 'high' | 'medium' | 'low';\n}\n\nexport function SocialInteractionHub() {\n  const [activeChannel, setActiveChannel] = useState<string>('global');\n  const [messageInput, setMessageInput] = useState('');\n  const [selectedPlayer, setSelectedPlayer] = useState<string>('');\n  const [interactionType, setInteractionType] = useState<string>('');\n\n  // Mock data - replace with real API calls\n  const onlinePlayers: Player[] = [\n    { id: 1, username: \"VaultHunter47\", xp: 2847, reputation: 156, allianceId: 1, allianceName: \"Brotherhood\", lastSeen: \"2m ago\", status: 'online' },\n    { id: 2, username: \"WastelandRaider\", xp: 1923, reputation: 89, lastSeen: \"5m ago\", status: 'online' },\n    { id: 3, username: \"SurvivalExpert\", xp: 3421, reputation: 203, allianceId: 2, allianceName: \"Outcasts\", lastSeen: \"1h ago\", status: 'away' },\n    { id: 4, username: \"TechScavenger\", xp: 1456, reputation: 67, lastSeen: \"3h ago\", status: 'offline' }\n  ];\n\n  const socialMessages: SocialMessage[] = [\n    { id: 1, senderId: 1, senderName: \"VaultHunter47\", content: \"Territory raid at sector 7 in 30 minutes\", type: 'public', timestamp: \"2m ago\", isOnChain: true, transactionHash: \"0x123...\" },\n    { id: 2, senderId: 3, senderName: \"SurvivalExpert\", content: \"Alliance meeting tonight\", type: 'alliance', timestamp: \"15m ago\", isOnChain: false },\n    { id: 3, senderId: 2, senderName: \"WastelandRaider\", content: \"Trading rare materials at outpost\", type: 'public', timestamp: \"45m ago\", isOnChain: true }\n  ];\n\n  const pendingInteractions: PlayerInteraction[] = [\n    { playerId: 2, playerName: \"WastelandRaider\", type: 'battle_invite', message: \"1v1 combat challenge\", timestamp: \"10m ago\", status: 'pending' },\n    { playerId: 3, playerName: \"SurvivalExpert\", type: 'alliance_invite', message: \"Join our faction\", timestamp: \"1h ago\", status: 'pending' }\n  ];\n\n  const recentEvents: SocialEvent[] = [\n    { id: 1, type: 'territory_claimed', playerName: \"VaultHunter47\", description: \"claimed sector 15\", timestamp: \"5m ago\", impact: 'high' },\n    { id: 2, type: 'battle_result', playerName: \"WastelandRaider\", description: \"won against TechScavenger\", timestamp: \"12m ago\", impact: 'medium' },\n    { id: 3, type: 'alliance_formed', playerName: \"SurvivalExpert\", description: \"formed new alliance 'Outcasts'\", timestamp: \"2h ago\", impact: 'high' }\n  ];\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'online': return 'text-emerald-400';\n      case 'away': return 'text-amber-400';\n      case 'offline': return 'text-neutral-500';\n      default: return 'text-neutral-400';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'online': return '●';\n      case 'away': return '◐';\n      case 'offline': return '○';\n      default: return '○';\n    }\n  };\n\n  const getInteractionIcon = (type: string) => {\n    switch (type) {\n      case 'battle_invite': return '⚔️';\n      case 'alliance_invite': return '🤝';\n      case 'trade_request': return '💱';\n      case 'territory_challenge': return '🏴';\n      default: return '📬';\n    }\n  };\n\n  const handleSendMessage = () => {\n    if (!messageInput.trim()) return;\n    console.log(`Sending ${activeChannel} message:`, messageInput);\n    setMessageInput('');\n  };\n\n  const handlePlayerInteraction = () => {\n    if (!selectedPlayer || !interactionType) return;\n    console.log(`Sending ${interactionType} to player ${selectedPlayer}`);\n  };\n\n  return (\n    <RealisticWastelandCard variant=\"default\" className=\"p-6\">\n      <RealisticText variant=\"subtitle\" className=\"mb-6\">\n        Social Interaction Hub\n      </RealisticText>\n\n      <Tabs defaultValue=\"players\" className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-5 bg-neutral-900 border border-neutral-700\">\n          <TabsTrigger \n            value=\"players\" \n            className=\"text-xs font-mono data-[state=active]:bg-neutral-700 data-[state=active]:text-neutral-100\"\n          >\n            Players\n          </TabsTrigger>\n          <TabsTrigger \n            value=\"messages\" \n            className=\"text-xs font-mono data-[state=active]:bg-neutral-700 data-[state=active]:text-neutral-100\"\n          >\n            Messages\n          </TabsTrigger>\n          <TabsTrigger \n            value=\"events\" \n            className=\"text-xs font-mono data-[state=active]:bg-neutral-700 data-[state=active]:text-neutral-100\"\n          >\n            Events\n          </TabsTrigger>\n          <TabsTrigger \n            value=\"alliance\" \n            className=\"text-xs font-mono data-[state=active]:bg-neutral-700 data-[state=active]:text-neutral-100\"\n          >\n            Alliance\n          </TabsTrigger>\n          <TabsTrigger \n            value=\"profile\" \n            className=\"text-xs font-mono data-[state=active]:bg-neutral-700 data-[state=active]:text-neutral-100\"\n          >\n            Profile\n          </TabsTrigger>\n        </TabsList>\n\n        {/* Online Players & Status */}\n        <TabsContent value=\"players\" className=\"mt-4\">\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <RealisticText variant=\"caption\" className=\"text-neutral-400\">\n                {onlinePlayers.filter(p => p.status === 'online').length} online • {onlinePlayers.length} total\n              </RealisticText>\n              <Badge variant=\"outline\" className=\"text-emerald-400 border-emerald-400/30\">\n                {pendingInteractions.length} pending\n              </Badge>\n            </div>\n            \n            <ScrollArea className=\"h-64\">\n              <div className=\"space-y-2\">\n                {onlinePlayers.map((player) => (\n                  <div key={player.id} className=\"p-3 bg-neutral-800 border border-neutral-700 rounded\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-3\">\n                        <span className={`text-sm ${getStatusColor(player.status)}`}>\n                          {getStatusIcon(player.status)}\n                        </span>\n                        <div>\n                          <RealisticText variant=\"body\" className=\"font-medium\">\n                            {player.username}\n                          </RealisticText>\n                          <div className=\"flex gap-4 text-xs text-neutral-500\">\n                            <span>XP: {player.xp.toLocaleString()}</span>\n                            <span>Rep: {player.reputation}</span>\n                            {player.allianceName && <span>[{player.allianceName}]</span>}\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"flex gap-2\">\n                        <RealisticButton size=\"sm\" variant=\"secondary\" data-testid={`button-challenge-${player.id}`}>\n                          ⚔️\n                        </RealisticButton>\n                        <RealisticButton size=\"sm\" variant=\"secondary\" data-testid={`button-message-${player.id}`}>\n                          💬\n                        </RealisticButton>\n                        <RealisticButton size=\"sm\" variant=\"secondary\" data-testid={`button-invite-${player.id}`}>\n                          🤝\n                        </RealisticButton>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </ScrollArea>\n          </div>\n        </TabsContent>\n\n        {/* Multi-Channel Communication */}\n        <TabsContent value=\"messages\" className=\"mt-4\">\n          <div className=\"space-y-4\">\n            {/* Channel Selection */}\n            <div className=\"flex gap-2\">\n              <RealisticButton \n                size=\"sm\" \n                variant={activeChannel === 'global' ? 'primary' : 'secondary'}\n                onClick={() => setActiveChannel('global')}\n                data-testid=\"button-channel-global\"\n              >\n                🌍 Global\n              </RealisticButton>\n              <RealisticButton \n                size=\"sm\" \n                variant={activeChannel === 'alliance' ? 'primary' : 'secondary'}\n                onClick={() => setActiveChannel('alliance')}\n                data-testid=\"button-channel-alliance\"\n              >\n                🏴 Alliance\n              </RealisticButton>\n              <RealisticButton \n                size=\"sm\" \n                variant={activeChannel === 'trade' ? 'primary' : 'secondary'}\n                onClick={() => setActiveChannel('trade')}\n                data-testid=\"button-channel-trade\"\n              >\n                💱 Trade\n              </RealisticButton>\n            </div>\n\n            {/* Message Feed */}\n            <ScrollArea className=\"h-48 bg-neutral-900 border border-neutral-700 p-3\">\n              <div className=\"space-y-2\">\n                {socialMessages.filter(msg => \n                  activeChannel === 'global' ? msg.type === 'public' :\n                  activeChannel === 'alliance' ? msg.type === 'alliance' :\n                  msg.type === 'public'\n                ).map((message) => (\n                  <div key={message.id} className=\"p-2 bg-neutral-800 border border-neutral-700 rounded text-sm\">\n                    <div className=\"flex items-center justify-between mb-1\">\n                      <span className=\"text-neutral-300 font-medium\">{message.senderName}</span>\n                      <div className=\"flex items-center gap-2\">\n                        <span className=\"text-xs text-neutral-500\">{message.timestamp}</span>\n                        {message.isOnChain && (\n                          <Badge variant=\"outline\" className=\"text-xs text-emerald-400 border-emerald-400/30\">\n                            On-Chain\n                          </Badge>\n                        )}\n                      </div>\n                    </div>\n                    <RealisticText variant=\"caption\" className=\"text-neutral-400\">\n                      {message.content}\n                    </RealisticText>\n                  </div>\n                ))}\n              </div>\n            </ScrollArea>\n\n            {/* Message Input */}\n            <div className=\"flex gap-2\">\n              <Input\n                placeholder={`Send ${activeChannel} message...`}\n                value={messageInput}\n                onChange={(e) => setMessageInput(e.target.value)}\n                className=\"bg-neutral-800 border-neutral-700 text-neutral-100\"\n                data-testid=\"input-message\"\n              />\n              <RealisticButton \n                onClick={handleSendMessage}\n                disabled={!messageInput.trim()}\n                data-testid=\"button-send-message\"\n              >\n                Send\n              </RealisticButton>\n            </div>\n          </div>\n        </TabsContent>\n\n        {/* Live Social Events */}\n        <TabsContent value=\"events\" className=\"mt-4\">\n          <div className=\"space-y-4\">\n            <RealisticText variant=\"body\" className=\"text-neutral-300\">\n              Live Activity Feed\n            </RealisticText>\n            \n            <ScrollArea className=\"h-64\">\n              <div className=\"space-y-2\">\n                {recentEvents.map((event) => (\n                  <div key={event.id} className=\"p-3 bg-neutral-800 border border-neutral-700 rounded\">\n                    <div className=\"flex items-center justify-between\">\n                      <div>\n                        <div className=\"flex items-center gap-2 mb-1\">\n                          <Badge \n                            variant=\"outline\" \n                            className={`text-xs ${\n                              event.impact === 'high' ? 'text-red-400 border-red-400/30' :\n                              event.impact === 'medium' ? 'text-amber-400 border-amber-400/30' :\n                              'text-neutral-400 border-neutral-400/30'\n                            }`}\n                          >\n                            {event.type}\n                          </Badge>\n                          <span className=\"text-xs text-neutral-500\">{event.timestamp}</span>\n                        </div>\n                        <RealisticText variant=\"caption\" className=\"text-neutral-300\">\n                          <span className=\"text-neutral-100\">{event.playerName}</span> {event.description}\n                        </RealisticText>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </ScrollArea>\n          </div>\n        </TabsContent>\n\n        {/* Alliance Coordination */}\n        <TabsContent value=\"alliance\" className=\"mt-4\">\n          <div className=\"space-y-4\">\n            <div className=\"p-4 bg-neutral-800 border border-neutral-700 rounded\">\n              <RealisticText variant=\"subtitle\" className=\"mb-3\">\n                Alliance Status\n              </RealisticText>\n              <div className=\"space-y-2 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-neutral-400\">Current Alliance:</span>\n                  <span className=\"text-neutral-100\">Brotherhood</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-neutral-400\">Rank:</span>\n                  <span className=\"text-amber-400\">Lieutenant</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-neutral-400\">Members Online:</span>\n                  <span className=\"text-emerald-400\">7/23</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-neutral-400\">Territory Holdings:</span>\n                  <span className=\"text-amber-400\">15 zones</span>\n                </div>\n              </div>\n              <Separator className=\"bg-neutral-700 my-2\" />\n              <RealisticButton size=\"sm\" className=\"w-full\" variant=\"secondary\" data-testid=\"button-alliance-battle-plan\">\n                📋 View Battle Plans\n              </RealisticButton>\n            </div>\n          </div>\n        </TabsContent>\n\n        {/* Player Profile & Achievements */}\n        <TabsContent value=\"profile\" className=\"mt-4\">\n          <div className=\"space-y-4\">\n            <div className=\"p-4 bg-neutral-800 border border-neutral-700 rounded\">\n              <RealisticText variant=\"subtitle\" className=\"mb-3\">\n                Player Statistics\n              </RealisticText>\n              <div className=\"space-y-2 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-neutral-400\">Total XP:</span>\n                  <span className=\"text-neutral-100\">2,847</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-neutral-400\">Battles Won:</span>\n                  <span className=\"text-emerald-400\">156</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-neutral-400\">Territories Claimed:</span>\n                  <span className=\"text-amber-400\">23</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-neutral-400\">Social Score:</span>\n                  <span className=\"text-neutral-300\">1,247</span>\n                </div>\n              </div>\n              <Separator className=\"bg-neutral-700 my-2\" />\n              <RealisticButton size=\"sm\" className=\"w-full\" variant=\"secondary\" data-testid=\"button-view-achievements\">\n                🎖️ View Achievements\n              </RealisticButton>\n            </div>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </RealisticWastelandCard>\n  );\n}","size_bytes":17434},"server/services/battle-engine.ts":{"content":"import { db } from \"../db\";\nimport { users, alliances, territories, allianceMembers, battles } from \"@shared/schema\";\nimport { eq, and, sql, count } from \"drizzle-orm\";\n\ninterface BattleParticipant {\n  id: string;\n  level: number;\n  xp: number;\n  reputation: number;\n  wins: number;\n  losses: number;\n  allianceId?: string;\n  territoryCount: number;\n  alliancePower: number;\n  strategicAdvantage: number;\n}\n\ninterface BattleContext {\n  territoryX: number;\n  territoryY: number;\n  isDefending: boolean;\n  adjacentAlliedTerritories: number;\n  resourceControl: number;\n}\n\nexport class BattleEngine {\n  /**\n   * Calculate comprehensive battle power for a participant\n   */\n  async calculateBattlePower(userId: string, context: BattleContext): Promise<number> {\n    const participant = await this.getParticipantData(userId);\n    \n    // Base individual power (40% weight)\n    const individualPower = this.calculateIndividualPower(participant);\n    \n    // Alliance power (35% weight)\n    const alliancePower = await this.calculateAlliancePower(participant, context);\n    \n    // Territory control bonus (15% weight)\n    const territoryPower = this.calculateTerritoryPower(participant, context);\n    \n    // Strategic positioning (10% weight)\n    const strategicPower = this.calculateStrategicPower(context);\n    \n    const totalPower = \n      (individualPower * 0.40) +\n      (alliancePower * 0.35) +\n      (territoryPower * 0.15) +\n      (strategicPower * 0.10);\n    \n    return Math.max(1, Math.round(totalPower));\n  }\n\n  /**\n   * Individual player power based on stats\n   */\n  private calculateIndividualPower(participant: BattleParticipant): number {\n    const baseLevel = participant.level * 50;\n    const xpBonus = Math.sqrt(participant.xp) * 2;\n    const reputationBonus = participant.reputation * 5;\n    const winRatio = participant.wins / Math.max(1, participant.wins + participant.losses);\n    const winBonus = winRatio * 200;\n    \n    return baseLevel + xpBonus + reputationBonus + winBonus;\n  }\n\n  /**\n   * Alliance aggregate power calculation - pure mathematical approach\n   */\n  private async calculateAlliancePower(participant: BattleParticipant, context: BattleContext): Promise<number> {\n    if (!participant.allianceId) return 0;\n    \n    // Get alliance aggregate stats - sum of all member capabilities\n    const allianceStats = await db\n      .select({\n        totalLevel: sql<number>`SUM(${users.level})`,\n        totalXp: sql<number>`SUM(${users.xp})`,\n        totalReputation: sql<number>`SUM(${users.reputation})`,\n        totalWins: sql<number>`SUM(${users.wins})`,\n        memberCount: count(),\n      })\n      .from(users)\n      .innerJoin(allianceMembers, eq(users.id, allianceMembers.userId))\n      .where(eq(allianceMembers.allianceId, participant.allianceId))\n      .groupBy(allianceMembers.allianceId);\n\n    if (!allianceStats[0]) return 0;\n\n    const stats = allianceStats[0];\n    \n    // Direct aggregate power - larger, stronger alliances should always win\n    const rawPower = stats.totalLevel * 40 + Math.sqrt(stats.totalXp) + stats.totalReputation * 3;\n    \n    // Member count multiplier (more members = more power)\n    const memberMultiplier = 1 + (stats.memberCount * 0.1);\n    \n    // Alliance coordination bonus based on collective wins\n    const coordinationBonus = stats.totalWins * 2;\n    \n    return (rawPower * memberMultiplier) + coordinationBonus;\n  }\n\n  /**\n   * Territory control power calculation - pure territorial mathematics\n   */\n  private calculateTerritoryPower(participant: BattleParticipant, context: BattleContext): number {\n    // Base territorial power scales linearly with holdings\n    const personalTerritoryPower = participant.territoryCount * 40;\n    \n    // Adjacent territory control creates exponential advantage\n    const adjacentPower = context.adjacentAlliedTerritories * 25;\n    \n    // Supply line bonus - more territories = better logistics\n    const logisticalAdvantage = participant.territoryCount > 3 ? participant.territoryCount * 10 : 0;\n    \n    // Defensive positioning grants mathematical advantage\n    const defensiveAdvantage = context.isDefending ? 80 : 0;\n    \n    // Resource control scales territorial effectiveness\n    const resourceEfficiency = (1 + context.resourceControl * 0.2);\n    \n    return (personalTerritoryPower + adjacentPower + logisticalAdvantage + defensiveAdvantage) * resourceEfficiency;\n  }\n\n  /**\n   * Strategic positioning calculations\n   */\n  private calculateStrategicPower(context: BattleContext): number {\n    // Border territory bonus (higher risk, higher reward)\n    const borderBonus = this.isBorderTerritory(context.territoryX, context.territoryY) ? 30 : 0;\n    \n    // Central positioning bonus\n    const centralBonus = this.isCentralTerritory(context.territoryX, context.territoryY) ? 20 : 0;\n    \n    return borderBonus + centralBonus;\n  }\n\n  /**\n   * Resolve battle using power calculations with controlled randomness\n   */\n  async resolveBattle(challengerId: string, defenderId: string, territoryId: string): Promise<{\n    winnerId: string;\n    battleData: any;\n    powerDifference: number;\n  }> {\n    // Get territory context\n    const territory = await db.select().from(territories).where(eq(territories.id, territoryId)).limit(1);\n    if (!territory[0]) throw new Error(\"Territory not found\");\n\n    const context: BattleContext = {\n      territoryX: territory[0].x,\n      territoryY: territory[0].y,\n      isDefending: false,\n      adjacentAlliedTerritories: 0,\n      resourceControl: 1,\n    };\n\n    // Calculate defender context (they get defensive bonus)\n    const defenderContext = { ...context, isDefending: true };\n    defenderContext.adjacentAlliedTerritories = await this.getAdjacentAlliedTerritories(\n      defenderId, \n      territory[0].x, \n      territory[0].y\n    );\n\n    // Calculate challenger context\n    const challengerContext = { ...context, isDefending: false };\n    challengerContext.adjacentAlliedTerritories = await this.getAdjacentAlliedTerritories(\n      challengerId, \n      territory[0].x, \n      territory[0].y\n    );\n\n    // Calculate battle powers\n    const challengerPower = await this.calculateBattlePower(challengerId, challengerContext);\n    const defenderPower = await this.calculateBattlePower(defenderId, defenderContext);\n\n    const powerDifference = Math.abs(challengerPower - defenderPower);\n    const totalPower = challengerPower + defenderPower;\n    \n    // Determine winner purely based on aggregate power calculations\n    // Higher power always wins - no random elements\n    const winnerId = challengerPower > defenderPower ? challengerId : defenderId;\n    \n    // Calculate victory margin for battle data\n    const victoryMargin = powerDifference / Math.min(challengerPower, defenderPower);\n    const isDecisiveVictory = victoryMargin > 0.5; // 50%+ power advantage\n    \n    const battleData = {\n      challengerPower,\n      defenderPower,\n      powerDifference,\n      victoryMargin,\n      isDecisiveVictory,\n      resolutionMethod: \"pure_aggregate_calculation\",\n      powerBreakdown: {\n        winner: winnerId === challengerId ? \"challenger\" : \"defender\",\n        winnerPower: winnerId === challengerId ? challengerPower : defenderPower,\n        loserPower: winnerId === challengerId ? defenderPower : challengerPower,\n      },\n      timestamp: new Date().toISOString(),\n    };\n\n    return {\n      winnerId,\n      battleData,\n      powerDifference,\n    };\n  }\n\n  /**\n   * Get participant battle data\n   */\n  private async getParticipantData(userId: string): Promise<BattleParticipant> {\n    // Get user data with alliance membership\n    const userData = await db\n      .select({\n        id: users.id,\n        level: users.level,\n        xp: users.xp,\n        reputation: users.reputation,\n        wins: users.wins,\n        losses: users.losses,\n        allianceId: allianceMembers.allianceId,\n      })\n      .from(users)\n      .leftJoin(allianceMembers, eq(users.id, allianceMembers.userId))\n      .where(eq(users.id, userId))\n      .limit(1);\n\n    if (!userData[0]) throw new Error(\"User not found\");\n\n    // Get territory count\n    const territoryCount = await db\n      .select({ count: count() })\n      .from(territories)\n      .where(eq(territories.ownerId, userId));\n\n    return {\n      ...userData[0],\n      allianceId: userData[0].allianceId || undefined,\n      territoryCount: territoryCount[0]?.count || 0,\n      alliancePower: 0, // Will be calculated\n      strategicAdvantage: 0, // Will be calculated\n    };\n  }\n\n  /**\n   * Count adjacent allied territories\n   */\n  private async getAdjacentAlliedTerritories(userId: string, x: number, y: number): Promise<number> {\n    const user = await db.select().from(users).where(eq(users.id, userId)).limit(1);\n    if (!user[0]) return 0;\n\n    const userAlliance = await db\n      .select()\n      .from(allianceMembers)\n      .where(eq(allianceMembers.userId, userId))\n      .limit(1);\n\n    if (!userAlliance[0]) return 0;\n\n    // Check 8 adjacent positions\n    const adjacentPositions = [\n      [x-1, y-1], [x, y-1], [x+1, y-1],\n      [x-1, y],             [x+1, y],\n      [x-1, y+1], [x, y+1], [x+1, y+1],\n    ];\n\n    let alliedCount = 0;\n    for (const [adjX, adjY] of adjacentPositions) {\n      const territory = await db\n        .select()\n        .from(territories)\n        .where(and(\n          eq(territories.x, adjX),\n          eq(territories.y, adjY),\n          eq(territories.allianceId, userAlliance[0].allianceId)\n        ))\n        .limit(1);\n\n      if (territory.length > 0) alliedCount++;\n    }\n\n    return alliedCount;\n  }\n\n  /**\n   * Check if territory is on map border (higher strategic value)\n   */\n  private isBorderTerritory(x: number, y: number): boolean {\n    const mapSize = 20; // Assuming 20x20 grid\n    return x === 0 || y === 0 || x === mapSize - 1 || y === mapSize - 1;\n  }\n\n  /**\n   * Check if territory is central (stable control)\n   */\n  private isCentralTerritory(x: number, y: number): boolean {\n    const mapSize = 20;\n    const center = mapSize / 2;\n    const distance = Math.sqrt(Math.pow(x - center, 2) + Math.pow(y - center, 2));\n    return distance <= 3; // Within 3 units of center\n  }\n}","size_bytes":10147},"server/services/alliance-power-calculator.ts":{"content":"import { db } from \"../db\";\nimport { users, alliances, territories, allianceMembers } from \"@shared/schema\";\nimport { eq, and, sql, count } from \"drizzle-orm\";\n\n/**\n * Standalone service for calculating alliance aggregate power\n * Demonstrates how alliance coordination affects battle outcomes\n */\nexport class AlliancePowerCalculator {\n  \n  /**\n   * Calculate total alliance power for leaderboards and comparisons\n   */\n  async calculateAllianceTotalPower(allianceId: string): Promise<{\n    totalPower: number;\n    memberCount: number;\n    territoryCount: number;\n    aggregateStats: {\n      totalLevel: number;\n      totalXp: number;\n      totalReputation: number;\n      totalWins: number;\n    };\n    powerBreakdown: {\n      memberPower: number;\n      territoryPower: number;\n      coordinationBonus: number;\n    };\n  }> {\n    // Get all alliance member stats\n    const memberStats = await db\n      .select({\n        totalLevel: sql<number>`SUM(${users.level})`,\n        totalXp: sql<number>`SUM(${users.xp})`,\n        totalReputation: sql<number>`SUM(${users.reputation})`,\n        totalWins: sql<number>`SUM(${users.wins})`,\n        memberCount: count(),\n      })\n      .from(users)\n      .innerJoin(allianceMembers, eq(users.id, allianceMembers.userId))\n      .where(eq(allianceMembers.allianceId, allianceId))\n      .groupBy(allianceMembers.allianceId);\n\n    // Get alliance territory count\n    const territoryStats = await db\n      .select({\n        territoryCount: count(),\n      })\n      .from(territories)\n      .where(eq(territories.allianceId, allianceId));\n\n    const stats = memberStats[0] || {\n      totalLevel: 0,\n      totalXp: 0,\n      totalReputation: 0,\n      totalWins: 0,\n      memberCount: 0,\n    };\n\n    const territoryCount = territoryStats[0]?.territoryCount || 0;\n\n    // Calculate power components\n    const memberPower = this.calculateMemberPower(stats);\n    const territoryPower = this.calculateTerritoryPower(territoryCount);\n    const coordinationBonus = this.calculateCoordinationBonus(stats);\n\n    const totalPower = memberPower + territoryPower + coordinationBonus;\n\n    return {\n      totalPower,\n      memberCount: stats.memberCount,\n      territoryCount,\n      aggregateStats: {\n        totalLevel: stats.totalLevel,\n        totalXp: stats.totalXp,\n        totalReputation: stats.totalReputation,\n        totalWins: stats.totalWins,\n      },\n      powerBreakdown: {\n        memberPower,\n        territoryPower,\n        coordinationBonus,\n      },\n    };\n  }\n\n  /**\n   * Get alliance power rankings for the entire server\n   */\n  async getAlliancePowerRankings(): Promise<Array<{\n    allianceId: string;\n    allianceName: string;\n    allianceTag: string;\n    totalPower: number;\n    memberCount: number;\n    territoryCount: number;\n    avgPowerPerMember: number;\n  }>> {\n    // Get all alliances\n    const allAlliances = await db.select().from(alliances);\n    \n    const rankings = [];\n    \n    for (const alliance of allAlliances) {\n      const powerData = await this.calculateAllianceTotalPower(alliance.id);\n      \n      rankings.push({\n        allianceId: alliance.id,\n        allianceName: alliance.name,\n        allianceTag: alliance.tag,\n        totalPower: powerData.totalPower,\n        memberCount: powerData.memberCount,\n        territoryCount: powerData.territoryCount,\n        avgPowerPerMember: powerData.memberCount > 0 ? Math.round(powerData.totalPower / powerData.memberCount) : 0,\n      });\n    }\n\n    // Sort by total power descending\n    return rankings.sort((a, b) => b.totalPower - a.totalPower);\n  }\n\n  /**\n   * Predict battle outcome between two alliances\n   */\n  async predictAllianceBattle(alliance1Id: string, alliance2Id: string): Promise<{\n    predictedWinner: string;\n    powerDifference: number;\n    victoryMargin: number;\n    alliance1Power: number;\n    alliance2Power: number;\n    isDecisive: boolean;\n  }> {\n    const alliance1Power = await this.calculateAllianceTotalPower(alliance1Id);\n    const alliance2Power = await this.calculateAllianceTotalPower(alliance2Id);\n\n    const powerDifference = Math.abs(alliance1Power.totalPower - alliance2Power.totalPower);\n    const predictedWinner = alliance1Power.totalPower > alliance2Power.totalPower ? alliance1Id : alliance2Id;\n    const loserPower = Math.min(alliance1Power.totalPower, alliance2Power.totalPower);\n    const victoryMargin = loserPower > 0 ? powerDifference / loserPower : 1;\n    const isDecisive = victoryMargin > 0.3; // 30%+ power advantage\n\n    return {\n      predictedWinner,\n      powerDifference,\n      victoryMargin,\n      alliance1Power: alliance1Power.totalPower,\n      alliance2Power: alliance2Power.totalPower,\n      isDecisive,\n    };\n  }\n\n  private calculateMemberPower(stats: any): number {\n    // Raw aggregate member power\n    const rawPower = stats.totalLevel * 40 + Math.sqrt(stats.totalXp) + stats.totalReputation * 3;\n    \n    // Member count multiplier\n    const memberMultiplier = 1 + (stats.memberCount * 0.1);\n    \n    return rawPower * memberMultiplier;\n  }\n\n  private calculateTerritoryPower(territoryCount: number): number {\n    // Territory power scales exponentially\n    const basePower = territoryCount * 50;\n    const exponentialBonus = territoryCount > 5 ? Math.pow(territoryCount - 5, 1.5) * 20 : 0;\n    \n    return basePower + exponentialBonus;\n  }\n\n  private calculateCoordinationBonus(stats: any): number {\n    // Coordination bonus based on collective wins and member count\n    const baseCoordination = stats.totalWins * 2;\n    const teamworkMultiplier = stats.memberCount > 3 ? 1.2 : 1.0;\n    \n    return baseCoordination * teamworkMultiplier;\n  }\n}","size_bytes":5618},"client/src/components/nft-minting-interface.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { RealisticText, RealisticButton, RealisticWastelandCard } from \"@/components/realistic-wasteland\";\nimport { useWeb3, useNftMinting } from \"@/hooks/use-web3\";\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { apiRequest } from '@/lib/queryClient';\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\ninterface Territory {\n  x: number;\n  y: number;\n  strategicValue: number;\n  resources: string;\n  threat_level: number;\n  nearby_alliances: number;\n}\n\ninterface NftEligibility {\n  eligible: boolean;\n  reason?: string;\n}\n\ninterface NftMint {\n  id: string;\n  tokenId: string;\n  walletAddress: string;\n  userId: string;\n  selectedTerritoryX: number;\n  selectedTerritoryY: number;\n  mintTxHash: string;\n  status: string;\n  metadata?: any;\n  mintedAt: string;\n}\n\nexport function NftMintingInterface() {\n  // DEVELOPMENT MODE: Bypass wallet requirements\n  const DEVELOPMENT_MODE = true; // Set to false when ready for Web3 testing\n  \n  const { account, isConnected, connectWallet } = useWeb3();\n  const { mintNft } = useNftMinting();\n  const queryClient = useQueryClient();\n  const [selectedTerritory, setSelectedTerritory] = useState<Territory | null>(null);\n  const [mintingStep, setMintingStep] = useState<'check' | 'select' | 'mint' | 'confirm'>('check');\n  const [mintTxHash, setMintTxHash] = useState<string>('');\n\n  // Check NFT eligibility\n  const { data: eligibility, isLoading: checkingEligibility } = useQuery({\n    queryKey: ['/api/nft/eligibility', account],\n    queryFn: async () => {\n      const response = await fetch(`/api/nft/eligibility/${account}`);\n      if (!response.ok) throw new Error('Failed to check eligibility');\n      return await response.json() as NftEligibility;\n    },\n    enabled: !!account && isConnected && !DEVELOPMENT_MODE, // Disabled in dev mode\n  });\n\n  // Get available territories\n  const { data: territories = [], isLoading: loadingTerritories } = useQuery({\n    queryKey: ['/api/nft/available-territories'],\n    queryFn: async () => {\n      const response = await fetch('/api/nft/available-territories');\n      if (!response.ok) throw new Error('Failed to fetch territories');\n      return await response.json() as Territory[];\n    },\n    enabled: (eligibility?.eligible === true) && !DEVELOPMENT_MODE, // Disabled in dev mode\n  });\n\n  // Get user's existing NFT\n  const { data: existingNft } = useQuery({\n    queryKey: ['/api/nft/user', account],\n    queryFn: async () => {\n      const response = await fetch(`/api/nft/user/${account}`);\n      if (!response.ok) throw new Error('Failed to fetch NFT status');\n      return await response.json() as NftMint | { hasNft: false };\n    },\n    enabled: !!account && isConnected && !DEVELOPMENT_MODE, // Disabled in dev mode\n  });\n\n  // Create NFT mint mutation\n  const createMintMutation = useMutation({\n    mutationFn: async (mintData: any) => {\n      const response = await fetch('/api/nft/mint', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(mintData),\n      });\n      if (!response.ok) throw new Error('Failed to mint NFT');\n      return response.json();\n    },\n    onSuccess: () => {\n      setMintingStep('mint');\n    },\n  });\n\n  // Confirm NFT mint mutation\n  const confirmMintMutation = useMutation({\n    mutationFn: async (confirmData: any) => {\n      const response = await fetch('/api/nft/confirm', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(confirmData),\n      });\n      if (!response.ok) throw new Error('Failed to confirm NFT');\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/nft/user'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/users'] });\n      setMintingStep('confirm');\n    },\n  });\n\n  // DEVELOPMENT MODE: Show development notice\n  if (DEVELOPMENT_MODE) {\n    return (\n      <RealisticWastelandCard variant=\"default\" className=\"p-8 text-center max-w-md mx-auto\">\n        <RealisticText variant=\"subtitle\" className=\"mb-4 text-amber-400\">\n          Development Mode Active\n        </RealisticText>\n        <RealisticText variant=\"body\" className=\"mb-6 text-neutral-300\">\n          NFT minting is disabled in development mode. Web3 features will be enabled in the final testing phase.\n        </RealisticText>\n        <RealisticText variant=\"caption\" className=\"text-neutral-400\">\n          You can access the game directly without minting an NFT during development.\n        </RealisticText>\n        <div className=\"mt-6\">\n          <RealisticButton \n            onClick={() => window.location.href = '/'}\n            data-testid=\"button-return-dashboard\"\n          >\n            Return to Dashboard\n          </RealisticButton>\n        </div>\n      </RealisticWastelandCard>\n    );\n  }\n\n  // Show wallet connection if not connected\n  if (!isConnected) {\n    return (\n      <RealisticWastelandCard variant=\"default\" className=\"p-8 text-center max-w-md mx-auto\">\n        <RealisticText variant=\"subtitle\" className=\"mb-4\">\n          Connect Wallet to Mint OCSH NFT\n        </RealisticText>\n        <RealisticText variant=\"body\" className=\"mb-6 text-neutral-400\">\n          Connect your Web3 wallet to mint your On-Chain Survival Handbook NFT and claim your territory.\n        </RealisticText>\n        <RealisticButton onClick={connectWallet} data-testid=\"button-connect-wallet\">\n          Connect Wallet\n        </RealisticButton>\n      </RealisticWastelandCard>\n    );\n  }\n\n  // Show existing NFT status\n  if (existingNft && 'id' in existingNft) {\n    return (\n      <RealisticWastelandCard variant=\"default\" className=\"p-8 text-center max-w-md mx-auto\">\n        <RealisticText variant=\"subtitle\" className=\"mb-4 text-emerald-400\">\n          OCSH NFT Owned\n        </RealisticText>\n        <RealisticText variant=\"body\" className=\"mb-4 text-neutral-300\">\n          You already own an OCSH NFT #{existingNft.tokenId}\n        </RealisticText>\n        <RealisticText variant=\"caption\" className=\"text-neutral-400\">\n          Territory: ({existingNft.selectedTerritoryX}, {existingNft.selectedTerritoryY})\n        </RealisticText>\n        <div className=\"mt-6\">\n          <RealisticButton \n            onClick={() => window.location.href = '/dashboard'}\n            data-testid=\"button-enter-game\"\n          >\n            Enter Wasteland\n          </RealisticButton>\n        </div>\n      </RealisticWastelandCard>\n    );\n  }\n\n  // Show ineligible status\n  if (eligibility && !eligibility.eligible) {\n    return (\n      <RealisticWastelandCard variant=\"default\" className=\"p-8 text-center max-w-md mx-auto\">\n        <RealisticText variant=\"subtitle\" className=\"mb-4 text-red-400\">\n          Ineligible for Minting\n        </RealisticText>\n        <RealisticText variant=\"body\" className=\"mb-6 text-neutral-300\">\n          {eligibility.reason}\n        </RealisticText>\n        <RealisticText variant=\"caption\" className=\"text-neutral-400\">\n          Only 1 OCSH NFT per wallet is allowed. Each NFT grants access to the wasteland survival game.\n        </RealisticText>\n      </RealisticWastelandCard>\n    );\n  }\n\n  const handleTerritorySelect = (territory: Territory) => {\n    setSelectedTerritory(territory);\n  };\n\n  const handleMintNft = async () => {\n    if (!selectedTerritory || !account) return;\n\n    try {\n      // Create mint record in database\n      await createMintMutation.mutateAsync({\n        walletAddress: account,\n        userId: 'temp-user-id', // This should come from authenticated user\n        selectedTerritoryX: selectedTerritory.x,\n        selectedTerritoryY: selectedTerritory.y,\n        tokenId: `OCSH-${Date.now()}`, // Generate unique token ID\n        mintTxHash: 'pending',\n        status: 'pending',\n        metadata: {\n          territory: selectedTerritory,\n          mintedBy: account,\n          traits: {\n            strategicValue: selectedTerritory.strategicValue,\n            resources: selectedTerritory.resources,\n            threatLevel: selectedTerritory.threat_level\n          }\n        }\n      });\n\n      // Mint NFT on blockchain\n      const mintResult = await mintNft(\n        account,\n        selectedTerritory.x,\n        selectedTerritory.y,\n        {\n          strategicValue: selectedTerritory.strategicValue,\n          resources: selectedTerritory.resources,\n          threatLevel: selectedTerritory.threat_level\n        }\n      );\n      \n      setMintTxHash(mintResult.txHash);\n      \n      // Confirm mint in database\n      setTimeout(() => {\n        confirmMintMutation.mutate({\n          tokenId: mintResult.tokenId,\n          userId: 'temp-user-id', // This should come from auth context\n          txHash: mintResult.txHash\n        });\n      }, 2000);\n\n    } catch (error) {\n      console.error('Minting failed:', error);\n    }\n  };\n\n  const getResourceColor = (resource: string) => {\n    switch (resource) {\n      case 'water': return 'text-blue-400 border-blue-400/30';\n      case 'tech': return 'text-purple-400 border-purple-400/30';\n      case 'fuel': return 'text-orange-400 border-orange-400/30';\n      case 'weapons': return 'text-red-400 border-red-400/30';\n      default: return 'text-neutral-400 border-neutral-400/30';\n    }\n  };\n\n  const getThreatColor = (level: number) => {\n    if (level <= 2) return 'text-emerald-400 border-emerald-400/30';\n    if (level <= 3) return 'text-amber-400 border-amber-400/30';\n    return 'text-red-400 border-red-400/30';\n  };\n\n  return (\n    <div className=\"container mx-auto p-6 max-w-4xl\">\n      <div className=\"text-center mb-8\">\n        <RealisticText variant=\"title\" className=\"mb-2\">\n          OCSH NFT Minting Protocol\n        </RealisticText>\n        <RealisticText variant=\"subtitle\" className=\"text-neutral-400\">\n          Claim your On-Chain Survival Handbook and stake your territory\n        </RealisticText>\n      </div>\n\n      <Tabs value={mintingStep} className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-4 mb-8\">\n          <TabsTrigger value=\"check\" disabled={checkingEligibility}>\n            1. Eligibility\n          </TabsTrigger>\n          <TabsTrigger value=\"select\" disabled={!eligibility?.eligible}>\n            2. Territory\n          </TabsTrigger>\n          <TabsTrigger value=\"mint\" disabled={!selectedTerritory}>\n            3. Mint NFT\n          </TabsTrigger>\n          <TabsTrigger value=\"confirm\" disabled={mintingStep !== 'confirm'}>\n            4. Confirmed\n          </TabsTrigger>\n        </TabsList>\n\n        {/* Eligibility Check */}\n        <TabsContent value=\"check\">\n          <RealisticWastelandCard className=\"p-6 text-center\">\n            {checkingEligibility ? (\n              <RealisticText variant=\"body\" className=\"text-neutral-400\">\n                Checking wallet eligibility...\n              </RealisticText>\n            ) : eligibility?.eligible ? (\n              <>\n                <RealisticText variant=\"subtitle\" className=\"mb-4 text-emerald-400\">\n                  Wallet Eligible for Minting\n                </RealisticText>\n                <RealisticText variant=\"body\" className=\"mb-6 text-neutral-300\">\n                  Your wallet {account?.substring(0, 8)}...{account?.substring(-6)} is eligible to mint an OCSH NFT.\n                </RealisticText>\n                <RealisticButton \n                  onClick={() => setMintingStep('select')}\n                  data-testid=\"button-proceed-to-territory\"\n                >\n                  Select Territory\n                </RealisticButton>\n              </>\n            ) : (\n              <RealisticText variant=\"body\" className=\"text-red-400\">\n                {eligibility?.reason || 'Checking eligibility...'}\n              </RealisticText>\n            )}\n          </RealisticWastelandCard>\n        </TabsContent>\n\n        {/* Territory Selection */}\n        <TabsContent value=\"select\">\n          <div className=\"space-y-6\">\n            <RealisticText variant=\"body\" className=\"text-neutral-300 text-center\">\n              Choose your starting territory wisely. This will be your home base in the wasteland.\n            </RealisticText>\n\n            {selectedTerritory && (\n              <RealisticWastelandCard className=\"p-4 border-amber-400/30\">\n                <RealisticText variant=\"body\" className=\"mb-2 text-amber-400\">\n                  Selected Territory: ({selectedTerritory.x}, {selectedTerritory.y})\n                </RealisticText>\n                <div className=\"flex flex-wrap gap-2\">\n                  <Badge variant=\"outline\" className={getResourceColor(selectedTerritory.resources)}>\n                    {selectedTerritory.resources}\n                  </Badge>\n                  <Badge variant=\"outline\" className=\"text-amber-400 border-amber-400/30\">\n                    Value: {selectedTerritory.strategicValue}\n                  </Badge>\n                  <Badge variant=\"outline\" className={getThreatColor(selectedTerritory.threat_level)}>\n                    Threat: {selectedTerritory.threat_level}/5\n                  </Badge>\n                </div>\n                <div className=\"mt-4\">\n                  <RealisticButton \n                    onClick={() => setMintingStep('mint')}\n                    data-testid=\"button-confirm-territory\"\n                  >\n                    Confirm Territory Selection\n                  </RealisticButton>\n                </div>\n              </RealisticWastelandCard>\n            )}\n\n            <ScrollArea className=\"h-96\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {loadingTerritories ? (\n                  <div className=\"col-span-full text-center text-neutral-400\">\n                    Loading available territories...\n                  </div>\n                ) : territories.length === 0 ? (\n                  <div className=\"col-span-full text-center text-neutral-400\">\n                    No territories available for minting\n                  </div>\n                ) : territories.map((territory) => (\n                  <Card \n                    key={`${territory.x}-${territory.y}`}\n                    className={`bg-neutral-800 border-neutral-700 cursor-pointer transition-all hover:border-amber-400/50 ${\n                      selectedTerritory?.x === territory.x && selectedTerritory?.y === territory.y \n                        ? 'border-amber-400 bg-amber-400/5' \n                        : ''\n                    }`}\n                    onClick={() => handleTerritorySelect(territory)}\n                    data-testid={`territory-${territory.x}-${territory.y}`}\n                  >\n                    <CardHeader className=\"pb-3\">\n                      <CardTitle className=\"text-neutral-100 text-sm\">\n                        Sector ({territory.x}, {territory.y})\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-3\">\n                      <div className=\"flex flex-wrap gap-1\">\n                        <Badge variant=\"outline\" className={getResourceColor(territory.resources)}>\n                          {territory.resources}\n                        </Badge>\n                        <Badge variant=\"outline\" className=\"text-amber-400 border-amber-400/30\">\n                          {territory.strategicValue}\n                        </Badge>\n                      </div>\n                      <div className=\"space-y-1 text-xs\">\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-neutral-400\">Threat Level:</span>\n                          <span className={getThreatColor(territory.threat_level).split(' ')[0]}>\n                            {territory.threat_level}/5\n                          </span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-neutral-400\">Nearby Alliances:</span>\n                          <span className=\"text-neutral-100\">{territory.nearby_alliances}</span>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </ScrollArea>\n          </div>\n        </TabsContent>\n\n        {/* Minting Process */}\n        <TabsContent value=\"mint\">\n          <RealisticWastelandCard className=\"p-6 text-center\">\n            <RealisticText variant=\"subtitle\" className=\"mb-4\">\n              Mint Your OCSH NFT\n            </RealisticText>\n            <RealisticText variant=\"body\" className=\"mb-6 text-neutral-300\">\n              Territory: ({selectedTerritory?.x}, {selectedTerritory?.y})\n            </RealisticText>\n            <RealisticText variant=\"caption\" className=\"mb-8 text-neutral-400\">\n              This will mint your unique On-Chain Survival Handbook NFT and claim your selected territory.\n              You will own this territory for 24 hours initially.\n            </RealisticText>\n            <RealisticButton \n              onClick={handleMintNft}\n              disabled={createMintMutation.isPending}\n              data-testid=\"button-mint-nft\"\n            >\n              {createMintMutation.isPending ? 'Minting...' : 'Mint OCSH NFT'}\n            </RealisticButton>\n          </RealisticWastelandCard>\n        </TabsContent>\n\n        {/* Confirmation */}\n        <TabsContent value=\"confirm\">\n          <RealisticWastelandCard className=\"p-6 text-center\">\n            <RealisticText variant=\"subtitle\" className=\"mb-4 text-emerald-400\">\n              NFT Minted Successfully!\n            </RealisticText>\n            <RealisticText variant=\"body\" className=\"mb-4 text-neutral-300\">\n              Your OCSH NFT has been minted and your territory has been claimed.\n            </RealisticText>\n            {mintTxHash && (\n              <RealisticText variant=\"caption\" className=\"mb-6 text-neutral-400 font-mono\">\n                Transaction: {mintTxHash.substring(0, 20)}...\n              </RealisticText>\n            )}\n            <RealisticButton \n              onClick={() => window.location.href = '/dashboard'}\n              data-testid=\"button-enter-wasteland\"\n            >\n              Enter the Wasteland\n            </RealisticButton>\n          </RealisticWastelandCard>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":18620},"client/src/components/trading-interface.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { RealisticText, RealisticButton, RealisticWastelandCard } from \"@/components/realistic-wasteland\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { STRATEGIC_ITEMS, getItemsByCategory, getItemsByTier, type GameItem, type ItemCategory, type ItemTier } from \"@shared/game-items\";\n\n// Strategic Item Listing for marketplace\ninterface StrategicListing {\n  id: string;\n  item: GameItem;\n  sellerId: string;\n  sellerName: string;\n  quantity: number;\n  priceETH?: string; // Base ETH price in wei\n  priceARCX?: string; // ARCx token price\n  currency: 'ETH' | 'ARCX';\n  status: 'active' | 'sold' | 'cancelled';\n  createdAt: string;\n  expiresAt?: string;\n}\n\ninterface MarketplaceListing {\n  id: string;\n  item: Item;\n  sellerId: string;\n  sellerName: string;\n  price: string; // in wei\n  currency: string;\n  listingType: 'fixed' | 'auction' | 'bundle';\n  status: 'active' | 'sold' | 'cancelled' | 'expired';\n  auctionEndTime?: string;\n  reservePrice?: string;\n  highestBid?: string;\n  bidCount: number;\n  createdAt: string;\n}\n\ninterface TradeOffer {\n  id: string;\n  fromUserId: string;\n  fromUserName: string;\n  toUserId: string;\n  toUserName: string;\n  offeredItems: Item[];\n  requestedItems: Item[];\n  offeredTokens: string; // in wei\n  requestedTokens: string;\n  message?: string;\n  status: 'pending' | 'accepted' | 'declined' | 'cancelled' | 'executed';\n  expiresAt?: string;\n  createdAt: string;\n}\n\ninterface TradingPost {\n  id: string;\n  territoryId: string;\n  territoryName: string;\n  ownerId: string;\n  ownerName: string;\n  name: string;\n  description: string;\n  taxRate: number; // percentage * 100\n  specializations: string[];\n  volume24h: string; // in wei\n  status: 'active' | 'inactive' | 'destroyed';\n  distance: number; // from player location\n}\n\nexport function TradingInterface() {\n  const currentUserId = \"user1\"; // This would come from auth context\n  \n  const {\n    activeTab,\n    selectedCategory,\n    sortBy,\n    searchQuery,\n    selectedItems,\n    setActiveTab,\n    setSelectedCategory,\n    setSortBy,\n    setSearchQuery,\n    toggleItemSelection,\n    clearSelection\n  } = useTradingState();\n\n  const { account, isConnected, connectWallet } = useWeb3();\n  const { listItemForSale, buyItem, createTradeEscrow } = useTradingContracts();\n\n  // API queries\n  const { data: userItems = [], isLoading: itemsLoading } = useUserItems(currentUserId);\n  const { data: marketplaceListings = [], isLoading: listingsLoading } = useMarketplaceListings(selectedCategory, sortBy);\n  const { data: tradeOffers = [], isLoading: offersLoading } = useTradeOffers(currentUserId);\n  const { data: tradingPosts = [], isLoading: postsLoading } = useTradingPosts();\n  const { data: escrowContracts = [], isLoading: escrowLoading } = useEscrowContracts(currentUserId);\n\n  // Show wallet connection prompt if not connected\n  if (!isConnected) {\n    return (\n      <RealisticWastelandCard variant=\"default\" className=\"p-8 text-center\">\n        <RealisticText variant=\"subtitle\" className=\"mb-4\">\n          Connect Wallet to Access Trading\n        </RealisticText>\n        <RealisticText variant=\"body\" className=\"mb-6 text-neutral-400\">\n          Connect your Web3 wallet to access the wasteland trading hub and manage your NFT inventory.\n        </RealisticText>\n        <RealisticButton onClick={connectWallet} data-testid=\"button-connect-wallet\">\n          Connect Wallet\n        </RealisticButton>\n      </RealisticWastelandCard>\n    );\n  }\n\n  const getRarityColor = (rarity: string) => {\n    switch (rarity) {\n      case 'common': return 'text-neutral-400 border-neutral-400/30';\n      case 'uncommon': return 'text-emerald-400 border-emerald-400/30';\n      case 'rare': return 'text-blue-400 border-blue-400/30';\n      case 'epic': return 'text-purple-400 border-purple-400/30';\n      case 'legendary': return 'text-amber-400 border-amber-400/30';\n      case 'artifact': return 'text-red-400 border-red-400/30';\n      default: return 'text-neutral-400 border-neutral-400/30';\n    }\n  };\n\n  const getCategoryIcon = (category: string) => {\n    switch (category) {\n      case 'weapon': return '⚔️';\n      case 'armor': return '🛡️';\n      case 'tool': return '🔧';\n      case 'consumable': return '⚗️';\n      case 'blueprint': return '📋';\n      case 'territory_deed': return '📜';\n      default: return '📦';\n    }\n  };\n\n  const formatPrice = (priceWei: string): string => {\n    const eth = parseFloat(priceWei) / 1e18;\n    return `${eth.toFixed(2)} ETH`;\n  };\n\n  const handleBuyItem = (listingId: string) => {\n    console.log('Buying item from listing:', listingId);\n    // Implementation would create escrow contract and initiate purchase\n  };\n\n  const handlePlaceBid = (listingId: string, amount: string) => {\n    console.log('Placing bid on listing:', listingId, 'Amount:', amount);\n    // Implementation would place bid on auction\n  };\n\n  const handleCreateListing = (itemId: string, price: string, listingType: string) => {\n    console.log('Creating listing for item:', itemId, 'Price:', price, 'Type:', listingType);\n    // Implementation would create marketplace listing\n  };\n\n  const handleCreateTradeOffer = (offer: Partial<TradeOffer>) => {\n    console.log('Creating trade offer:', offer);\n    // Implementation would create trade offer\n  };\n\n  const handleRespondToOffer = (offerId: string, response: 'accept' | 'decline') => {\n    console.log('Responding to offer:', offerId, 'Response:', response);\n    // Implementation would accept/decline trade offer\n  };\n\n  return (\n    <RealisticWastelandCard variant=\"default\" className=\"p-6\">\n      <RealisticText variant=\"subtitle\" className=\"mb-6\">\n        Wasteland Trading Hub\n      </RealisticText>\n\n      <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-5 bg-neutral-900 border border-neutral-700\">\n          <TabsTrigger \n            value=\"marketplace\" \n            className=\"text-xs font-mono data-[state=active]:bg-neutral-700 data-[state=active]:text-neutral-100\"\n          >\n            Marketplace\n          </TabsTrigger>\n          <TabsTrigger \n            value=\"inventory\" \n            className=\"text-xs font-mono data-[state=active]:bg-neutral-700 data-[state=active]:text-neutral-100\"\n          >\n            Inventory\n          </TabsTrigger>\n          <TabsTrigger \n            value=\"trades\" \n            className=\"text-xs font-mono data-[state=active]:bg-neutral-700 data-[state=active]:text-neutral-100\"\n          >\n            Trade Offers\n          </TabsTrigger>\n          <TabsTrigger \n            value=\"posts\" \n            className=\"text-xs font-mono data-[state=active]:bg-neutral-700 data-[state=active]:text-neutral-100\"\n          >\n            Trading Posts\n          </TabsTrigger>\n          <TabsTrigger \n            value=\"escrow\" \n            className=\"text-xs font-mono data-[state=active]:bg-neutral-700 data-[state=active]:text-neutral-100\"\n          >\n            Escrow\n          </TabsTrigger>\n        </TabsList>\n\n        {/* Marketplace Tab */}\n        <TabsContent value=\"marketplace\" className=\"mt-4\">\n          <div className=\"space-y-4\">\n            {/* Filters */}\n            <div className=\"flex gap-4 items-center\">\n              <Input\n                placeholder=\"Search items...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"bg-neutral-800 border-neutral-700 text-neutral-100 max-w-xs\"\n                data-testid=\"input-search-marketplace\"\n              />\n              <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n                <SelectTrigger className=\"w-48 bg-neutral-800 border-neutral-700\">\n                  <SelectValue placeholder=\"Category\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Categories</SelectItem>\n                  <SelectItem value=\"weapon\">Weapons</SelectItem>\n                  <SelectItem value=\"armor\">Armor</SelectItem>\n                  <SelectItem value=\"tool\">Tools</SelectItem>\n                  <SelectItem value=\"consumable\">Consumables</SelectItem>\n                  <SelectItem value=\"blueprint\">Blueprints</SelectItem>\n                  <SelectItem value=\"territory_deed\">Territory Deeds</SelectItem>\n                </SelectContent>\n              </Select>\n              <Select value={sortBy} onValueChange={setSortBy}>\n                <SelectTrigger className=\"w-48 bg-neutral-800 border-neutral-700\">\n                  <SelectValue placeholder=\"Sort by\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"price_asc\">Price: Low to High</SelectItem>\n                  <SelectItem value=\"price_desc\">Price: High to Low</SelectItem>\n                  <SelectItem value=\"rarity_desc\">Rarity: High to Low</SelectItem>\n                  <SelectItem value=\"newest\">Newest First</SelectItem>\n                  <SelectItem value=\"ending_soon\">Ending Soon</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Marketplace Listings */}\n            <ScrollArea className=\"h-96\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                {listingsLoading ? (\n                  <div className=\"col-span-2 text-center text-neutral-400\">Loading marketplace...</div>\n                ) : marketplaceListings.length === 0 ? (\n                  <div className=\"col-span-2 text-center text-neutral-400\">No marketplace listings found</div>\n                ) : marketplaceListings.map((listing) => (\n                  <Card key={listing.id} className=\"bg-neutral-800 border-neutral-700\">\n                    <CardHeader className=\"pb-3\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-2\">\n                          <span className=\"text-lg\">{getCategoryIcon(listing.item.category)}</span>\n                          <CardTitle className=\"text-neutral-100 text-sm\">\n                            {listing.item.name}\n                          </CardTitle>\n                        </div>\n                        <Badge variant=\"outline\" className={getRarityColor(listing.item.rarity)}>\n                          {listing.item.rarity}\n                        </Badge>\n                      </div>\n                    </CardHeader>\n                    <CardContent className=\"space-y-3\">\n                      <RealisticText variant=\"caption\" className=\"text-neutral-400 line-clamp-2\">\n                        {listing.item.description}\n                      </RealisticText>\n                      \n                      <div className=\"space-y-2\">\n                        <div className=\"flex justify-between text-sm\">\n                          <span className=\"text-neutral-400\">Seller:</span>\n                          <span className=\"text-neutral-100\">{listing.sellerName}</span>\n                        </div>\n                        <div className=\"flex justify-between text-sm\">\n                          <span className=\"text-neutral-400\">Price:</span>\n                          <span className=\"text-emerald-400 font-mono\">{formatPrice(listing.price)}</span>\n                        </div>\n                        {listing.listingType === 'auction' && (\n                          <>\n                            <div className=\"flex justify-between text-sm\">\n                              <span className=\"text-neutral-400\">Highest Bid:</span>\n                              <span className=\"text-amber-400 font-mono\">\n                                {listing.highestBid ? formatPrice(listing.highestBid) : 'No bids'}\n                              </span>\n                            </div>\n                            <div className=\"flex justify-between text-sm\">\n                              <span className=\"text-neutral-400\">Ends in:</span>\n                              <span className=\"text-red-400\">{listing.auctionEndTime}</span>\n                            </div>\n                          </>\n                        )}\n                      </div>\n\n                      <div className=\"flex gap-2\">\n                        {listing.listingType === 'fixed' ? (\n                          <RealisticButton \n                            size=\"sm\" \n                            className=\"flex-1\"\n                            onClick={() => handleBuyItem(listing.id)}\n                            data-testid={`button-buy-${listing.id}`}\n                          >\n                            Buy Now\n                          </RealisticButton>\n                        ) : (\n                          <RealisticButton \n                            size=\"sm\" \n                            className=\"flex-1\"\n                            onClick={() => handlePlaceBid(listing.id, '')}\n                            data-testid={`button-bid-${listing.id}`}\n                          >\n                            Place Bid\n                          </RealisticButton>\n                        )}\n                        <RealisticButton \n                          size=\"sm\" \n                          variant=\"secondary\"\n                          data-testid={`button-details-${listing.id}`}\n                        >\n                          Details\n                        </RealisticButton>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </ScrollArea>\n          </div>\n        </TabsContent>\n\n        {/* Inventory Tab */}\n        <TabsContent value=\"inventory\" className=\"mt-4\">\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <RealisticText variant=\"body\" className=\"text-neutral-300\">\n                Your Items ({userItems.length})\n              </RealisticText>\n              <RealisticButton size=\"sm\" data-testid=\"button-list-selected\">\n                List Selected ({selectedItems.length})\n              </RealisticButton>\n            </div>\n\n            <ScrollArea className=\"h-96\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                {itemsLoading ? (\n                  <div className=\"col-span-2 text-center text-neutral-400\">Loading your items...</div>\n                ) : userItems.length === 0 ? (\n                  <div className=\"col-span-2 text-center text-neutral-400\">No items in your inventory</div>\n                ) : userItems.map((item) => (\n                  <Card key={item.id} className=\"bg-neutral-800 border-neutral-700\">\n                    <CardHeader className=\"pb-3\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-2\">\n                          <input\n                            type=\"checkbox\"\n                            checked={selectedItems.includes(item.id)}\n                            onChange={(e) => {\n                              if (e.target.checked) {\n                                setSelectedItems([...selectedItems, item.id]);\n                              } else {\n                                setSelectedItems(selectedItems.filter(id => id !== item.id));\n                              }\n                            }}\n                            className=\"rounded border-neutral-600\"\n                          />\n                          <span className=\"text-lg\">{getCategoryIcon(item.category)}</span>\n                          <CardTitle className=\"text-neutral-100 text-sm\">\n                            {item.name}\n                          </CardTitle>\n                        </div>\n                        <div className=\"flex gap-2\">\n                          <Badge variant=\"outline\" className={getRarityColor(item.rarity)}>\n                            {item.rarity}\n                          </Badge>\n                          {item.isListed && (\n                            <Badge variant=\"outline\" className=\"text-amber-400 border-amber-400/30\">\n                              Listed\n                            </Badge>\n                          )}\n                        </div>\n                      </div>\n                    </CardHeader>\n                    <CardContent className=\"space-y-3\">\n                      <RealisticText variant=\"caption\" className=\"text-neutral-400 line-clamp-2\">\n                        {item.description}\n                      </RealisticText>\n                      \n                      <div className=\"space-y-1\">\n                        <div className=\"flex justify-between text-sm\">\n                          <span className=\"text-neutral-400\">Est. Value:</span>\n                          <span className=\"text-emerald-400 font-mono\">{item.estimatedValue} ETH</span>\n                        </div>\n                        <div className=\"flex justify-between text-sm\">\n                          <span className=\"text-neutral-400\">Token ID:</span>\n                          <span className=\"text-neutral-100 font-mono\">#{item.tokenId}</span>\n                        </div>\n                      </div>\n\n                      <div className=\"flex gap-2\">\n                        <RealisticButton \n                          size=\"sm\" \n                          variant=\"secondary\"\n                          disabled={item.isListed}\n                          data-testid={`button-list-item-${item.id}`}\n                        >\n                          {item.isListed ? 'Listed' : 'List for Sale'}\n                        </RealisticButton>\n                        <RealisticButton \n                          size=\"sm\" \n                          variant=\"secondary\"\n                          data-testid={`button-trade-item-${item.id}`}\n                        >\n                          Trade\n                        </RealisticButton>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </ScrollArea>\n          </div>\n        </TabsContent>\n\n        {/* Trade Offers Tab */}\n        <TabsContent value=\"trades\" className=\"mt-4\">\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <RealisticText variant=\"body\" className=\"text-neutral-300\">\n                Trade Offers ({tradeOffers.length})\n              </RealisticText>\n              <RealisticButton size=\"sm\" data-testid=\"button-create-offer\">\n                Create Trade Offer\n              </RealisticButton>\n            </div>\n\n            <ScrollArea className=\"h-96\">\n              <div className=\"space-y-4\">\n                {offersLoading ? (\n                  <div className=\"text-center text-neutral-400\">Loading trade offers...</div>\n                ) : tradeOffers.length === 0 ? (\n                  <div className=\"text-center text-neutral-400\">No trade offers</div>\n                ) : tradeOffers.map((offer) => (\n                  <Card key={offer.id} className=\"bg-neutral-800 border-neutral-700\">\n                    <CardHeader className=\"pb-3\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <CardTitle className=\"text-neutral-100 text-sm\">\n                            Trade with {offer.fromUserName}\n                          </CardTitle>\n                          <RealisticText variant=\"caption\" className=\"text-neutral-400\">\n                            {offer.createdAt} • Expires in {offer.expiresAt}\n                          </RealisticText>\n                        </div>\n                        <Badge \n                          variant=\"outline\" \n                          className={\n                            offer.status === 'pending' ? 'text-amber-400 border-amber-400/30' :\n                            offer.status === 'accepted' ? 'text-emerald-400 border-emerald-400/30' :\n                            'text-red-400 border-red-400/30'\n                          }\n                        >\n                          {offer.status}\n                        </Badge>\n                      </div>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      {offer.message && (\n                        <div className=\"p-3 bg-neutral-900 border border-neutral-700 rounded\">\n                          <RealisticText variant=\"caption\" className=\"text-neutral-300\">\n                            \"{offer.message}\"\n                          </RealisticText>\n                        </div>\n                      )}\n\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <div>\n                          <RealisticText variant=\"caption\" className=\"text-neutral-400 mb-2\">\n                            They Offer:\n                          </RealisticText>\n                          <div className=\"space-y-2\">\n                            {offer.offeredItems.map((item) => (\n                              <div key={item.id} className=\"flex items-center gap-2 p-2 bg-neutral-900 rounded\">\n                                <span>{getCategoryIcon(item.category)}</span>\n                                <div className=\"flex-1 min-w-0\">\n                                  <div className=\"text-xs text-neutral-100 truncate\">{item.name}</div>\n                                  <div className=\"text-xs text-neutral-400\">~{item.estimatedValue} ETH</div>\n                                </div>\n                              </div>\n                            ))}\n                            {offer.offeredTokens !== '0' && (\n                              <div className=\"flex items-center gap-2 p-2 bg-neutral-900 rounded\">\n                                <span>💰</span>\n                                <div className=\"flex-1\">\n                                  <div className=\"text-xs text-emerald-400 font-mono\">\n                                    +{formatPrice(offer.offeredTokens)}\n                                  </div>\n                                </div>\n                              </div>\n                            )}\n                          </div>\n                        </div>\n\n                        <div>\n                          <RealisticText variant=\"caption\" className=\"text-neutral-400 mb-2\">\n                            For Your:\n                          </RealisticText>\n                          <div className=\"space-y-2\">\n                            {offer.requestedItems.map((item) => (\n                              <div key={item.id} className=\"flex items-center gap-2 p-2 bg-neutral-900 rounded\">\n                                <span>{getCategoryIcon(item.category)}</span>\n                                <div className=\"flex-1 min-w-0\">\n                                  <div className=\"text-xs text-neutral-100 truncate\">{item.name}</div>\n                                  <div className=\"text-xs text-neutral-400\">~{item.estimatedValue} ETH</div>\n                                </div>\n                              </div>\n                            ))}\n                            {offer.requestedTokens !== '0' && (\n                              <div className=\"flex items-center gap-2 p-2 bg-neutral-900 rounded\">\n                                <span>💰</span>\n                                <div className=\"flex-1\">\n                                  <div className=\"text-xs text-red-400 font-mono\">\n                                    -{formatPrice(offer.requestedTokens)}\n                                  </div>\n                                </div>\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n\n                      {offer.status === 'pending' && (\n                        <div className=\"flex gap-2\">\n                          <RealisticButton \n                            size=\"sm\" \n                            onClick={() => handleRespondToOffer(offer.id, 'accept')}\n                            data-testid={`button-accept-${offer.id}`}\n                          >\n                            Accept\n                          </RealisticButton>\n                          <RealisticButton \n                            size=\"sm\" \n                            variant=\"secondary\"\n                            onClick={() => handleRespondToOffer(offer.id, 'decline')}\n                            data-testid={`button-decline-${offer.id}`}\n                          >\n                            Decline\n                          </RealisticButton>\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </ScrollArea>\n          </div>\n        </TabsContent>\n\n        {/* Trading Posts Tab */}\n        <TabsContent value=\"posts\" className=\"mt-4\">\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center justify-between\">\n              <RealisticText variant=\"body\" className=\"text-neutral-300\">\n                Nearby Trading Posts ({tradingPosts.length})\n              </RealisticText>\n              <RealisticButton size=\"sm\" data-testid=\"button-create-post\">\n                Establish Trading Post\n              </RealisticButton>\n            </div>\n\n            <ScrollArea className=\"h-96\">\n              <div className=\"space-y-4\">\n                {postsLoading ? (\n                  <div className=\"text-center text-neutral-400\">Loading trading posts...</div>\n                ) : tradingPosts.length === 0 ? (\n                  <div className=\"text-center text-neutral-400\">No trading posts found</div>\n                ) : tradingPosts.map((post) => (\n                  <Card key={post.id} className=\"bg-neutral-800 border-neutral-700\">\n                    <CardHeader className=\"pb-3\">\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <CardTitle className=\"text-neutral-100 text-sm\">\n                            {post.name}\n                          </CardTitle>\n                          <RealisticText variant=\"caption\" className=\"text-neutral-400\">\n                            {post.territoryName} • {post.distance}km away\n                          </RealisticText>\n                        </div>\n                        <Badge \n                          variant=\"outline\" \n                          className={\n                            post.status === 'active' ? 'text-emerald-400 border-emerald-400/30' :\n                            'text-red-400 border-red-400/30'\n                          }\n                        >\n                          {post.status}\n                        </Badge>\n                      </div>\n                    </CardHeader>\n                    <CardContent className=\"space-y-3\">\n                      <RealisticText variant=\"caption\" className=\"text-neutral-400\">\n                        {post.description}\n                      </RealisticText>\n\n                      <div className=\"space-y-1 text-sm\">\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-neutral-400\">Owner:</span>\n                          <span className=\"text-neutral-100\">{post.ownerName}</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-neutral-400\">Tax Rate:</span>\n                          <span className=\"text-amber-400\">{(post.taxRate / 100).toFixed(1)}%</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-neutral-400\">24h Volume:</span>\n                          <span className=\"text-emerald-400 font-mono\">{formatPrice(post.volume24h)}</span>\n                        </div>\n                      </div>\n\n                      <div>\n                        <RealisticText variant=\"caption\" className=\"text-neutral-400 mb-1\">\n                          Specializations:\n                        </RealisticText>\n                        <div className=\"flex gap-1 flex-wrap\">\n                          {post.specializations.map((spec) => (\n                            <Badge key={spec} variant=\"outline\" className=\"text-xs text-neutral-300 border-neutral-600\">\n                              {getCategoryIcon(spec)} {spec}\n                            </Badge>\n                          ))}\n                        </div>\n                      </div>\n\n                      <div className=\"flex gap-2\">\n                        <RealisticButton \n                          size=\"sm\"\n                          data-testid={`button-visit-${post.id}`}\n                        >\n                          Visit Post\n                        </RealisticButton>\n                        <RealisticButton \n                          size=\"sm\" \n                          variant=\"secondary\"\n                          data-testid={`button-details-post-${post.id}`}\n                        >\n                          View Details\n                        </RealisticButton>\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            </ScrollArea>\n          </div>\n        </TabsContent>\n\n        {/* Escrow Tab */}\n        <TabsContent value=\"escrow\" className=\"mt-4\">\n          <div className=\"space-y-4\">\n            <RealisticText variant=\"body\" className=\"text-neutral-300\">\n              Active Escrow Contracts ({escrowContracts.length})\n            </RealisticText>\n\n            {escrowLoading ? (\n              <div className=\"p-6 bg-neutral-900 border border-neutral-700 rounded text-center\">\n                <RealisticText variant=\"caption\" className=\"text-neutral-400\">\n                  Loading escrow contracts...\n                </RealisticText>\n              </div>\n            ) : escrowContracts.length === 0 ? (\n              <div className=\"p-6 bg-neutral-900 border border-neutral-700 rounded text-center\">\n                <RealisticText variant=\"caption\" className=\"text-neutral-400\">\n                  No active escrow contracts\n                </RealisticText>\n                <RealisticText variant=\"caption\" className=\"text-neutral-500 mt-2\">\n                  Escrow contracts are automatically created when you buy items or accept trade offers\n                </RealisticText>\n              </div>\n            ) : (\n              <ScrollArea className=\"h-96\">\n                <div className=\"space-y-4\">\n                  {escrowContracts.map((contract) => (\n                    <Card key={contract.id} className=\"bg-neutral-800 border-neutral-700\">\n                      <CardHeader className=\"pb-3\">\n                        <div className=\"flex items-center justify-between\">\n                          <CardTitle className=\"text-neutral-100 text-sm\">\n                            Escrow #{contract.id.substring(0, 8)}\n                          </CardTitle>\n                          <Badge \n                            variant=\"outline\" \n                            className={\n                              contract.status === 'active' ? 'text-amber-400 border-amber-400/30' :\n                              contract.status === 'completed' ? 'text-emerald-400 border-emerald-400/30' :\n                              contract.status === 'disputed' ? 'text-red-400 border-red-400/30' :\n                              'text-neutral-400 border-neutral-400/30'\n                            }\n                          >\n                            {contract.status}\n                          </Badge>\n                        </div>\n                      </CardHeader>\n                      <CardContent className=\"space-y-3\">\n                        <div className=\"space-y-1 text-sm\">\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-neutral-400\">Amount:</span>\n                            <span className=\"text-emerald-400 font-mono\">{formatPrice(contract.amount)}</span>\n                          </div>\n                          <div className=\"flex justify-between\">\n                            <span className=\"text-neutral-400\">Created:</span>\n                            <span className=\"text-neutral-100\">{new Date(contract.createdAt).toLocaleDateString()}</span>\n                          </div>\n                        </div>\n                        \n                        {contract.status === 'active' && (\n                          <div className=\"flex gap-2\">\n                            <RealisticButton \n                              size=\"sm\"\n                              data-testid={`button-complete-escrow-${contract.id}`}\n                            >\n                              Complete\n                            </RealisticButton>\n                            <RealisticButton \n                              size=\"sm\" \n                              variant=\"secondary\"\n                              data-testid={`button-dispute-escrow-${contract.id}`}\n                            >\n                              Dispute\n                            </RealisticButton>\n                          </div>\n                        )}\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </ScrollArea>\n            )}\n\n            <div className=\"p-4 bg-neutral-900 border border-neutral-700 rounded\">\n              <RealisticText variant=\"subtitle\" className=\"mb-3 text-neutral-100\">\n                Escrow System Features\n              </RealisticText>\n              <div className=\"space-y-2 text-sm text-neutral-400\">\n                <div>• Automated smart contract protection for all trades</div>\n                <div>• Dispute resolution system with community arbitrators</div>\n                <div>• Item verification and authenticity checks</div>\n                <div>• Automatic release upon successful delivery</div>\n                <div>• Emergency cancellation with full refunds</div>\n              </div>\n            </div>\n          </div>\n        </TabsContent>\n      </Tabs>\n    </RealisticWastelandCard>\n  );\n}","size_bytes":34966},"client/src/pages/nft-gate.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { useWeb3 } from \"@/hooks/use-web3\";\nimport { apiRequest } from '@/lib/queryClient';\nimport { NftMintingInterface } from \"@/components/nft-minting-interface\";\nimport { RealisticText, RealisticButton, RealisticWastelandCard } from \"@/components/realistic-wasteland\";\n\ninterface NftStatus {\n  hasNft: boolean;\n  id?: string;\n  tokenId?: string;\n  selectedTerritoryX?: number;\n  selectedTerritoryY?: number;\n  status?: string;\n}\n\ninterface NFTGateProps {\n  children: React.ReactNode;\n}\n\nexport function NFTGate({ children }: NFTGateProps) {\n  // DEVELOPMENT MODE: Bypass wallet connection requirement\n  const DEVELOPMENT_MODE = true; // Set to false when ready for Web3 testing\n  \n  const { account, isConnected, connectWallet } = useWeb3();\n\n  // Check user's NFT status\n  const { data: nftStatus, isLoading } = useQuery({\n    queryKey: ['/api/nft/user', account],\n    queryFn: async () => {\n      if (!account) return { hasNft: false };\n      const response = await fetch(`/api/nft/user/${account}`);\n      if (!response.ok) throw new Error('Failed to fetch NFT status');\n      return await response.json() as NftStatus;\n    },\n    enabled: !!account && isConnected && !DEVELOPMENT_MODE, // Disabled in dev mode\n  });\n\n  // DEVELOPMENT MODE: Skip all checks and show app directly\n  if (DEVELOPMENT_MODE) {\n    return <>{children}</>;\n  }\n\n  // Show loading state\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-black\">\n        <RealisticWastelandCard className=\"p-8 text-center\">\n          <RealisticText variant=\"body\" className=\"text-neutral-400\">\n            Checking OCSH NFT status...\n          </RealisticText>\n        </RealisticWastelandCard>\n      </div>\n    );\n  }\n\n  // Show wallet connection if not connected\n  if (!isConnected) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-black p-4\">\n        <RealisticWastelandCard className=\"p-8 text-center max-w-md\">\n          <RealisticText variant=\"title\" className=\"mb-4 text-amber-400\">\n            BLOKBOY 1000\n          </RealisticText>\n          <RealisticText variant=\"subtitle\" className=\"mb-4\">\n            Access Restricted\n          </RealisticText>\n          <RealisticText variant=\"body\" className=\"mb-6 text-neutral-400\">\n            Connect your Web3 wallet to verify OCSH NFT ownership and access the wasteland.\n          </RealisticText>\n          <RealisticButton onClick={connectWallet} data-testid=\"button-connect-wallet\">\n            Connect Wallet\n          </RealisticButton>\n        </RealisticWastelandCard>\n      </div>\n    );\n  }\n\n  // Show NFT requirement if user doesn't have NFT\n  if (!nftStatus?.hasNft && !nftStatus?.id) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-black p-4\">\n        <RealisticWastelandCard className=\"p-8 text-center max-w-md\">\n          <RealisticText variant=\"title\" className=\"mb-4 text-amber-400\">\n            BLOKBOY 1000\n          </RealisticText>\n          <RealisticText variant=\"subtitle\" className=\"mb-4 text-red-400\">\n            OCSH NFT Required\n          </RealisticText>\n          <RealisticText variant=\"body\" className=\"mb-6 text-neutral-400\">\n            You need to mint an OCSH (On-Chain Survival Handbook) NFT to access the wasteland. \n            Only 1 NFT per wallet is allowed.\n          </RealisticText>\n          <div className=\"space-y-3\">\n            <RealisticButton \n              onClick={() => window.location.href = '/mint'}\n              data-testid=\"button-mint-nft\"\n            >\n              Mint OCSH NFT\n            </RealisticButton>\n            <RealisticText variant=\"caption\" className=\"text-neutral-500\">\n              Price: Free | Network: Base\n            </RealisticText>\n          </div>\n        </RealisticWastelandCard>\n      </div>\n    );\n  }\n\n  // Show minting interface if on mint page\n  if (window.location.pathname === '/mint') {\n    return <NftMintingInterface />;\n  }\n\n  // User has NFT, allow access to game\n  return <>{children}</>;\n}","size_bytes":4093},"client/src/pages/pwa-interface.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { Link } from 'wouter';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { \n  RealisticWastelandCard,\n  RealisticText,\n  RealisticButton,\n  RealisticCommunications\n} from \"@/components/realistic-wasteland\";\nimport { ContinuumTerminal } from \"@/components/continuum-terminal\";\nimport { PWAInventory } from \"@/components/pwa-inventory\";\n\n\nexport default function PWAInterface() {\n  const [activeTab, setActiveTab] = useState('overview');\n  const [isOnline, setIsOnline] = useState(true);\n  const [screenMode, setScreenMode] = useState<'wasteland' | 'terminal'>('wasteland');\n  \n  // PWA Detection\n  const [isPWA, setIsPWA] = useState(false);\n  useEffect(() => {\n    const isStandalone = window.matchMedia('(display-mode: standalone)').matches;\n    const isFullscreen = window.matchMedia('(display-mode: fullscreen)').matches;\n    setIsPWA(isStandalone || isFullscreen);\n  }, []);\n\n  // Network status monitoring\n  useEffect(() => {\n    const handleOnline = () => setIsOnline(true);\n    const handleOffline = () => setIsOnline(false);\n    \n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n    \n    return () => {\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n    };\n  }, []);\n\n  // Stats data\n  const stats = {\n    survivors: '2,847',\n    zones: '156',\n    factions: '89',\n    engagements: '12,439'\n  };\n\n  // OCSH Protocol data\n  const protocols = [\n    { name: 'BONE NET', description: 'Mesh networking for P2P comms', status: 'OPERATIONAL' },\n    { name: 'RADIO BURST', description: 'Emergency broadcast system', status: 'OPERATIONAL' },\n    { name: 'SATELLITE LINK', description: 'High-orbit relay network', status: 'DEGRADED' },\n    { name: 'USB SNEAKERNET', description: 'Physical data transport', status: 'OPERATIONAL' },\n    { name: 'HAM RADIO', description: 'Low-frequency voice comms', status: 'OPERATIONAL' },\n    { name: 'SMS GATEWAY', description: 'Cellular backup channel', status: 'OFFLINE' }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-black text-neutral-100\">\n      {/* Header with mode toggle */}\n      <header className=\"bg-neutral-900 border-b border-neutral-800\">\n        <div className=\"px-4 py-3\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-10 h-10 bg-neutral-800 border border-neutral-700 flex items-center justify-center\">\n                <span className=\"text-neutral-400\">📱</span>\n              </div>\n              <div>\n                <h1 className=\"text-lg font-bold font-mono\">OCSH</h1>\n                <p className=\"text-xs text-neutral-500 uppercase\">\n                  {screenMode === 'wasteland' ? 'Wasteland Operations' : 'Terminal'}\n                </p>\n              </div>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <div className=\"flex bg-neutral-800 border border-neutral-700 rounded\">\n                <button\n                  onClick={() => setScreenMode('wasteland')}\n                  className={`px-3 py-1.5 text-xs font-mono uppercase ${\n                    screenMode === 'wasteland' \n                      ? 'bg-amber-600 text-black' \n                      : 'text-neutral-400'\n                  }`}\n                >\n                  WASTELAND\n                </button>\n                <button\n                  onClick={() => setScreenMode('terminal')}\n                  className={`px-3 py-1.5 text-xs font-mono uppercase ${\n                    screenMode === 'terminal' \n                      ? 'bg-amber-600 text-black' \n                      : 'text-neutral-400'\n                  }`}\n                >\n                  TERMINAL\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Subheader with title */}\n      <div className=\"bg-neutral-900/50 border-b border-neutral-800 px-4 py-3\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-3\">\n            <div className=\"w-8 h-8 bg-neutral-800 border border-neutral-700 p-1\">\n              <div className=\"w-full h-full bg-neutral-700\"></div>\n            </div>\n            <div>\n              <h2 className=\"text-base font-semibold\">Onchain Survival Kit</h2>\n              <p className=\"text-xs text-neutral-500\">WASTELAND OPERATIONS TERMINAL</p>\n            </div>\n          </div>\n          <div className=\"flex items-center gap-2 text-xs\">\n            <span className=\"text-neutral-500\">Network:</span>\n            <span className={isOnline ? 'text-emerald-400' : 'text-red-400'}>\n              {isOnline ? 'CONNECTED' : 'OFFLINE'}\n            </span>\n            <Link href=\"/handheld\">\n              <button className=\"ml-2 px-3 py-1 bg-neutral-800 border border-neutral-700 text-xs\">\n                Handheld Terminal\n              </button>\n            </Link>\n          </div>\n        </div>\n      </div>\n\n      {/* Stats Grid */}\n      <div className=\"px-4 py-4\">\n        <div className=\"grid grid-cols-2 gap-3\">\n          <div className=\"bg-neutral-900 border border-neutral-800 p-3 text-center\">\n            <div className=\"text-xl font-bold font-mono\">{stats.survivors}</div>\n            <div className=\"text-xs text-neutral-500 uppercase\">Active Survivors</div>\n          </div>\n          <div className=\"bg-neutral-900 border border-neutral-800 p-3 text-center\">\n            <div className=\"text-xl font-bold font-mono\">{stats.zones}</div>\n            <div className=\"text-xs text-neutral-500 uppercase\">Controlled Zones</div>\n          </div>\n          <div className=\"bg-neutral-900 border border-neutral-800 p-3 text-center\">\n            <div className=\"text-xl font-bold font-mono\">{stats.factions}</div>\n            <div className=\"text-xs text-neutral-500 uppercase\">Active Factions</div>\n          </div>\n          <div className=\"bg-neutral-900 border border-neutral-800 p-3 text-center\">\n            <div className=\"text-xl font-bold font-mono\">{stats.engagements}</div>\n            <div className=\"text-xs text-neutral-500 uppercase\">Total Engagements</div>\n          </div>\n        </div>\n      </div>\n\n      {/* Main Content Tabs */}\n      <div className=\"px-4 pb-4\">\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-7 bg-neutral-900 border border-neutral-700 h-10\">\n            <TabsTrigger \n              value=\"overview\" \n              className=\"text-xs font-mono uppercase data-[state=active]:bg-neutral-700\"\n            >\n              Overview\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"territories\" \n              className=\"text-xs font-mono uppercase data-[state=active]:bg-neutral-700\"\n            >\n              Territories\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"combat\" \n              className=\"text-xs font-mono uppercase data-[state=active]:bg-neutral-700\"\n            >\n              Combat\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"factions\" \n              className=\"text-xs font-mono uppercase data-[state=active]:bg-neutral-700\"\n            >\n              Factions\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"inventory\" \n              className=\"text-xs font-mono uppercase data-[state=active]:bg-blue-600\"\n            >\n              Inventory\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"continuum\" \n              className=\"text-xs font-mono uppercase data-[state=active]:bg-amber-600\"\n            >\n              Continuum\n            </TabsTrigger>\n            <TabsTrigger \n              value=\"comms\" \n              className=\"text-xs font-mono uppercase data-[state=active]:bg-neutral-700\"\n            >\n              Comms\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"overview\" className=\"mt-4 space-y-4\">\n            <RealisticWastelandCard variant=\"dark\" className=\"p-4\">\n              <h3 className=\"text-sm font-semibold mb-3\">Survivor Status</h3>\n              <div className=\"space-y-3\">\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-xs text-neutral-400\">CallSign</span>\n                  <span className=\"text-xs font-mono text-neutral-100\">GHOST_PROTOCOL</span>\n                </div>\n                <div>\n                  <div className=\"flex justify-between items-center mb-1\">\n                    <span className=\"text-xs text-neutral-400\">Experience</span>\n                    <span className=\"text-xs text-neutral-400\">2,847 XP</span>\n                  </div>\n                  <div className=\"w-full bg-neutral-800 h-2\">\n                    <div className=\"bg-amber-600 h-2\" style={{ width: '65%' }}></div>\n                  </div>\n                </div>\n                <div className=\"grid grid-cols-3 gap-3 pt-2\">\n                  <div className=\"text-center\">\n                    <div className=\"text-lg font-bold font-mono\">12</div>\n                    <div className=\"text-xs text-neutral-500\">Territories</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-lg font-bold font-mono\">8</div>\n                    <div className=\"text-xs text-neutral-500\">Victories</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div className=\"text-lg font-bold font-mono\">45</div>\n                    <div className=\"text-xs text-neutral-500\">Rank</div>\n                  </div>\n                </div>\n              </div>\n            </RealisticWastelandCard>\n\n            <RealisticWastelandCard variant=\"dark\" className=\"p-4\">\n              <h3 className=\"text-sm font-semibold mb-3\">Recent Activity</h3>\n              <div className=\"space-y-2\">\n                <div className=\"flex items-center gap-2 text-xs\">\n                  <span className=\"text-amber-400\">⚔</span>\n                  <span className=\"text-neutral-400\">Victory at Sector 7</span>\n                  <span className=\"text-neutral-600 ml-auto\">2h ago</span>\n                </div>\n                <div className=\"flex items-center gap-2 text-xs\">\n                  <span className=\"text-emerald-400\">🏴</span>\n                  <span className=\"text-neutral-400\">Territory claimed: Zone A-12</span>\n                  <span className=\"text-neutral-600 ml-auto\">5h ago</span>\n                </div>\n                <div className=\"flex items-center gap-2 text-xs\">\n                  <span className=\"text-blue-400\">📡</span>\n                  <span className=\"text-neutral-400\">Alliance message received</span>\n                  <span className=\"text-neutral-600 ml-auto\">8h ago</span>\n                </div>\n              </div>\n            </RealisticWastelandCard>\n          </TabsContent>\n\n          <TabsContent value=\"territories\" className=\"mt-4\">\n            <RealisticWastelandCard variant=\"dark\" className=\"p-4\">\n              <h3 className=\"text-sm font-semibold mb-3\">Territory Control</h3>\n              <div className=\"grid grid-cols-4 gap-2\">\n                {Array.from({ length: 16 }).map((_, i) => (\n                  <div\n                    key={i}\n                    className={`aspect-square border ${\n                      i % 3 === 0 \n                        ? 'bg-amber-900/20 border-amber-600' \n                        : i % 5 === 0\n                        ? 'bg-red-900/20 border-red-600'\n                        : 'bg-neutral-900 border-neutral-700'\n                    }`}\n                  >\n                    <div className=\"text-xs text-center mt-1 text-neutral-600\">\n                      {String.fromCharCode(65 + Math.floor(i / 4))}{i % 4 + 1}\n                    </div>\n                  </div>\n                ))}\n              </div>\n              <div className=\"mt-3 flex gap-3 text-xs\">\n                <div className=\"flex items-center gap-1\">\n                  <div className=\"w-3 h-3 bg-amber-900/20 border border-amber-600\"></div>\n                  <span className=\"text-neutral-500\">Controlled</span>\n                </div>\n                <div className=\"flex items-center gap-1\">\n                  <div className=\"w-3 h-3 bg-red-900/20 border border-red-600\"></div>\n                  <span className=\"text-neutral-500\">Enemy</span>\n                </div>\n                <div className=\"flex items-center gap-1\">\n                  <div className=\"w-3 h-3 bg-neutral-900 border border-neutral-700\"></div>\n                  <span className=\"text-neutral-500\">Neutral</span>\n                </div>\n              </div>\n            </RealisticWastelandCard>\n          </TabsContent>\n\n          <TabsContent value=\"combat\" className=\"mt-4\">\n            <RealisticWastelandCard variant=\"dark\" className=\"p-4\">\n              <h3 className=\"text-sm font-semibold mb-3\">Battle Interface</h3>\n              <div className=\"space-y-3\">\n                <div className=\"bg-neutral-900 border border-neutral-700 p-3\">\n                  <div className=\"flex justify-between items-center mb-2\">\n                    <span className=\"text-xs text-neutral-400\">Target Zone</span>\n                    <span className=\"text-xs font-mono text-amber-400\">B-7</span>\n                  </div>\n                  <div className=\"flex justify-between items-center mb-2\">\n                    <span className=\"text-xs text-neutral-400\">Alliance Power</span>\n                    <span className=\"text-xs font-mono text-emerald-400\">8,450</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-xs text-neutral-400\">Enemy Power</span>\n                    <span className=\"text-xs font-mono text-red-400\">7,200</span>\n                  </div>\n                </div>\n                <button className=\"w-full py-2 bg-red-600 text-black font-bold text-sm uppercase\">\n                  Initiate Attack\n                </button>\n                <div className=\"text-xs text-neutral-500 text-center\">\n                  Victory chance: 73% • Cost: 500 resources\n                </div>\n              </div>\n            </RealisticWastelandCard>\n          </TabsContent>\n\n          <TabsContent value=\"factions\" className=\"mt-4\">\n            <RealisticWastelandCard variant=\"dark\" className=\"p-4\">\n              <h3 className=\"text-sm font-semibold mb-3\">Alliance Management</h3>\n              <div className=\"space-y-3\">\n                <div className=\"bg-neutral-900 border border-neutral-700 p-3\">\n                  <div className=\"flex justify-between items-center mb-2\">\n                    <span className=\"text-xs text-neutral-400\">Current Alliance</span>\n                    <span className=\"text-xs font-mono text-neutral-100\">WASTELAND_BROTHERHOOD</span>\n                  </div>\n                  <div className=\"flex justify-between items-center mb-2\">\n                    <span className=\"text-xs text-neutral-400\">Role</span>\n                    <span className=\"text-xs font-mono text-amber-400\">LIEUTENANT</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-xs text-neutral-400\">Members Online</span>\n                    <span className=\"text-xs font-mono text-emerald-400\">24/45</span>\n                  </div>\n                </div>\n                <div className=\"grid grid-cols-2 gap-2\">\n                  <button className=\"py-2 bg-neutral-800 border border-neutral-700 text-xs\">\n                    Alliance Ops\n                  </button>\n                  <button className=\"py-2 bg-neutral-800 border border-neutral-700 text-xs text-red-400\">\n                    Leave Alliance\n                  </button>\n                </div>\n              </div>\n            </RealisticWastelandCard>\n          </TabsContent>\n\n          <TabsContent value=\"inventory\" className=\"mt-4\">\n            <PWAInventory />\n          </TabsContent>\n\n          <TabsContent value=\"continuum\" className=\"mt-4\">\n            <div className=\"px-0\">\n              <ContinuumTerminal />\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"comms\" className=\"mt-4\">\n            <RealisticCommunications />\n            <RealisticWastelandCard variant=\"dark\" className=\"p-4 mt-4\">\n              <h3 className=\"text-sm font-semibold mb-3\">Alliance Channel</h3>\n              <div className=\"space-y-2\">\n                <div className=\"bg-neutral-900 border border-neutral-700 p-2\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-xs text-neutral-400\">Active Members</span>\n                    <span className=\"text-xs font-mono text-emerald-400\">24 Online</span>\n                  </div>\n                </div>\n                <div className=\"bg-neutral-900 border border-neutral-700 p-2\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-xs text-neutral-400\">Territory Status</span>\n                    <span className=\"text-xs font-mono text-amber-400\">Secured</span>\n                  </div>\n                </div>\n                <button className=\"w-full py-2 bg-neutral-800 border border-neutral-700 text-xs\">\n                  Open Alliance Channel\n                </button>\n              </div>\n            </RealisticWastelandCard>\n          </TabsContent>\n        </Tabs>\n      </div>\n\n      {/* Bottom Status Bar */}\n      <div className=\"fixed bottom-0 left-0 right-0 bg-neutral-900 border-t border-neutral-800 px-4 py-2\">\n        <div className=\"flex items-center justify-between text-xs\">\n          <div className=\"flex items-center gap-3\">\n            <span className=\"text-amber-400\">⚡ POWER: 85%</span>\n            <span className=\"text-neutral-400\">📡 SIGNAL: SEARCHING...</span>\n          </div>\n          <div className=\"flex items-center gap-3\">\n            <span className=\"text-red-400\">☢ RAD: LOW</span>\n            <span className=\"text-neutral-500 font-mono\">23:04:46 UTC</span>\n          </div>\n        </div>\n      </div>\n\n      {/* Handheld Terminal Section */}\n      {screenMode === 'terminal' && (\n        <div className=\"fixed inset-0 bg-black z-50 flex flex-col\">\n          <div className=\"bg-neutral-900 border-b border-neutral-800 p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <h2 className=\"text-lg font-bold\">Handheld Terminal</h2>\n                <p className=\"text-xs text-neutral-500\">Offline transaction processing via radio/mesh networks</p>\n              </div>\n              <button\n                onClick={() => setScreenMode('wasteland')}\n                className=\"px-3 py-1.5 bg-neutral-800 border border-neutral-700 text-xs\"\n              >\n                Back\n              </button>\n            </div>\n          </div>\n          \n          <div className=\"flex-1 flex items-center justify-center p-8\">\n            <div className=\"text-center\">\n              <div className=\"w-32 h-48 bg-neutral-800 border-2 border-neutral-600 mx-auto mb-6 flex items-center justify-center\">\n                <span className=\"text-4xl\">📱</span>\n              </div>\n              <h3 className=\"text-xl font-bold mb-2\">AV Blokboy 1000</h3>\n              <p className=\"text-sm text-neutral-400 mb-6\">\n                Offline transaction processing via radio/mesh networks\n              </p>\n              <Link href=\"/handheld\">\n                <button className=\"px-6 py-3 bg-amber-600 text-black font-bold uppercase\">\n                  Launch Terminal Interface\n                </button>\n              </Link>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":20041},"client/src/components/strategic-trading-interface.tsx":{"content":"import { useState } from \"react\";\nimport { RealisticText, RealisticButton, RealisticWastelandCard } from \"@/components/realistic-wasteland\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { ALL_GAME_ITEMS, STRATEGIC_ITEMS, CONSUMABLE_ITEMS, COLLECTIBLE_ITEMS, getItemsByCategory, getItemsByTier, type GameItem, type ItemCategory, type ItemTier, type MintCost } from \"@shared/game-items\";\nimport { CrossChainBridge } from './cross-chain-bridge';\nimport { MeshNetworkManager } from './mesh-network-protocols';\nimport { AIFactionManager } from './ai-npc-factions';\n\n// Strategic Item Listing for marketplace\ninterface StrategicListing {\n  id: string;\n  item: GameItem;\n  sellerId: string;\n  sellerName: string;\n  quantity: number;\n  priceETH?: string; // Base ETH price in wei\n  priceARCX?: string; // ARCx token price\n  currency: 'ETH' | 'ARCX';\n  status: 'active' | 'sold' | 'cancelled';\n  createdAt: string;\n  expiresAt?: string;\n}\n\nexport function StrategicTradingInterface() {\n  const [selectedTab, setSelectedTab] = useState(\"marketplace\");\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState<ItemCategory | \"all\">(\"all\");\n  const [selectedTier, setSelectedTier] = useState<ItemTier | \"all\">(\"all\");\n  const [selectedCurrency, setSelectedCurrency] = useState<'ETH' | 'ARCX' | 'all'>('all');\n  const [playerLevel] = useState(12); // Mock player level - replace with actual data\n\n  // Strategic Items Marketplace Data  \n  const strategicListings: StrategicListing[] = [\n    {\n      id: \"1\",\n      item: STRATEGIC_ITEMS.find(item => item.id === 'tactical_processor')!,\n      sellerId: \"user1\",\n      sellerName: \"CommanderAlpha\",\n      quantity: 3,\n      priceETH: \"12000000000000000\", // 0.012 ETH\n      priceARCX: \"360\",\n      currency: \"ETH\",\n      status: \"active\",\n      createdAt: new Date().toISOString()\n    },\n    {\n      id: \"2\", \n      item: STRATEGIC_ITEMS.find(item => item.id === 'signal_amplifier_mk1')!,\n      sellerId: \"user2\",\n      sellerName: \"TechSavage\",\n      quantity: 1,\n      priceETH: \"5000000000000000\", // 0.005 ETH\n      priceARCX: \"150\",\n      currency: \"ARCX\",\n      status: \"active\",\n      createdAt: new Date().toISOString()\n    },\n    {\n      id: \"3\",\n      item: STRATEGIC_ITEMS.find(item => item.id === 'territory_beacon')!,\n      sellerId: \"user3\", \n      sellerName: \"WastelandKing\",\n      quantity: 2,\n      priceETH: \"8000000000000000\", // 0.008 ETH\n      priceARCX: \"240\", \n      currency: \"ETH\",\n      status: \"active\",\n      createdAt: new Date().toISOString()\n    },\n    {\n      id: \"4\",\n      item: STRATEGIC_ITEMS.find(item => item.id === 'war_machine_core')!,\n      sellerId: \"user4\",\n      sellerName: \"IronCommander\",\n      quantity: 1,\n      priceETH: \"35000000000000000\", // 0.035 ETH\n      priceARCX: \"1050\",\n      currency: \"ETH\", \n      status: \"active\",\n      createdAt: new Date().toISOString()\n    },\n    {\n      id: \"5\",\n      item: STRATEGIC_ITEMS.find(item => item.id === 'resource_extractor')!,\n      sellerId: \"user5\",\n      sellerName: \"ScavengerLord\",\n      quantity: 5,\n      priceETH: \"6000000000000000\", // 0.006 ETH\n      priceARCX: \"180\",\n      currency: \"ARCX\",\n      status: \"active\",\n      createdAt: new Date().toISOString()\n    }\n  ];\n\n  // Filter items based on search and filters\n  const filteredListings = strategicListings.filter(listing => {\n    const item = listing.item;\n    const matchesSearch = item.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         item.description.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesCategory = selectedCategory === 'all' || item.category === selectedCategory;\n    const matchesTier = selectedTier === 'all' || item.tier === selectedTier;\n    const matchesCurrency = selectedCurrency === 'all' || listing.currency === selectedCurrency;\n    \n    return matchesSearch && matchesCategory && matchesTier && matchesCurrency;\n  });\n\n  const formatPrice = (listing: StrategicListing) => {\n    if (listing.currency === 'ETH') {\n      const ethPrice = parseFloat(listing.priceETH || \"0\") / 1e18;\n      return `${ethPrice.toFixed(4)} ETH`;\n    } else {\n      return `${listing.priceARCX} ARCx`;\n    }\n  };\n\n  const canAffordItem = (listing: StrategicListing) => {\n    return listing.item.requiredLevel ? playerLevel >= listing.item.requiredLevel : true;\n  };\n\n  const getTierColor = (tier: ItemTier) => {\n    switch (tier) {\n      case 'basic': return 'text-gray-400 border-gray-400/30';\n      case 'advanced': return 'text-blue-400 border-blue-400/30';\n      case 'military': return 'text-purple-400 border-purple-400/30'; \n      case 'experimental': return 'text-amber-400 border-amber-400/30';\n      default: return 'text-gray-400 border-gray-400/30';\n    }\n  };\n\n  const getRarityColor = (rarity: string) => {\n    switch (rarity) {\n      case 'common': return 'text-gray-400';\n      case 'uncommon': return 'text-green-400';\n      case 'rare': return 'text-blue-400';\n      case 'epic': return 'text-purple-400';\n      case 'legendary': return 'text-amber-400';\n      default: return 'text-gray-400';\n    }\n  };\n\n  const getCategoryIcon = (category: ItemCategory) => {\n    switch (category) {\n      case 'communication': return '📡';\n      case 'territory_control': return '🏰';\n      case 'battle_enhancement': return '⚔️';\n      case 'alliance_management': return '🤝';\n      case 'resource_generation': return '⚡';\n      case 'intelligence': return '🔍';\n      case 'defense_systems': return '🛡️';\n      case 'consumables': return '⚗️';\n      case 'collectibles': return '💎';\n      case 'materials': return '🔧';\n      default: return '📦';\n    }\n  };\n\n  const getEffectDescription = (item: GameItem) => {\n    const effects = item.gameplayEffects.map(effect => {\n      switch (effect.type) {\n        case 'battle_power_boost': return `+${effect.value}% Battle Power${effect.duration ? ` (${effect.duration}h)` : ''}`;\n        case 'territory_defense_bonus': return `+${effect.value}% Territory Defense${effect.duration ? ` (${effect.duration}h)` : ''}`;\n        case 'alliance_coordination_bonus': return `+${effect.value}% Alliance Coordination`;\n        case 'message_cost_reduction': return `${effect.value}% Cheaper Messages`;\n        case 'resource_generation_rate': return `+${effect.value}% Resource Generation`;\n        case 'intel_gathering_range': return `+${effect.value}% Intel Range${effect.duration ? ` (${effect.duration}h)` : ''}`;\n        case 'communication_encryption': return `Level ${effect.value} Encryption`;\n        case 'supply_line_efficiency': return `+${effect.value}% Supply Efficiency`;\n        default: return `${effect.type}: ${effect.value}`;\n      }\n    });\n    return effects.join(', ');\n  };\n\n  return (\n    <RealisticWastelandCard variant=\"default\" className=\"p-6\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <div>\n          <RealisticText variant=\"subtitle\" className=\"text-neutral-100\">\n            Strategic Equipment Marketplace\n          </RealisticText>\n          <RealisticText variant=\"caption\" className=\"text-neutral-400\">\n            Essential gear for competitive warfare • Base ETH & ARCx tokens accepted\n          </RealisticText>\n        </div>\n        <div className=\"flex items-center gap-2\">\n          <Badge variant=\"outline\" className=\"text-blue-400 border-blue-400/30\">\n            Player Level {playerLevel}\n          </Badge>\n        </div>\n      </div>\n\n      <Tabs value={selectedTab} onValueChange={setSelectedTab} className=\"w-full\">\n        <TabsList className=\"grid w-full grid-cols-7 bg-neutral-900 border border-neutral-700\">\n          <TabsTrigger \n            value=\"marketplace\" \n            className=\"text-xs font-mono uppercase tracking-wider data-[state=active]:bg-neutral-700\"\n          >\n            Marketplace\n          </TabsTrigger>\n          <TabsTrigger \n            value=\"mint\" \n            className=\"text-xs font-mono uppercase tracking-wider data-[state=active]:bg-neutral-700\"\n          >\n            Mint Items\n          </TabsTrigger>\n          <TabsTrigger \n            value=\"inventory\" \n            className=\"text-xs font-mono uppercase tracking-wider data-[state=active]:bg-neutral-700\"\n          >\n            Inventory\n          </TabsTrigger>\n          <TabsTrigger \n            value=\"crafting\" \n            className=\"text-xs font-mono uppercase tracking-wider data-[state=active]:bg-neutral-700\"\n          >\n            Crafting\n          </TabsTrigger>\n          <TabsTrigger \n            value=\"bridge\" \n            className=\"text-xs font-mono uppercase tracking-wider data-[state=active]:bg-amber-600\"\n          >\n            Bridge\n          </TabsTrigger>\n          <TabsTrigger \n            value=\"networks\" \n            className=\"text-xs font-mono uppercase tracking-wider data-[state=active]:bg-neutral-700\"\n          >\n            Networks\n          </TabsTrigger>\n          <TabsTrigger \n            value=\"ai-factions\" \n            className=\"text-xs font-mono uppercase tracking-wider data-[state=active]:bg-red-600\"\n          >\n            AI Factions\n          </TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"marketplace\" className=\"space-y-6 mt-6\">\n          {/* Filters */}\n          <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4\">\n            <Input\n              placeholder=\"Search items...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"bg-neutral-800 border-neutral-700\"\n              data-testid=\"input-search-items\"\n            />\n            <Select value={selectedCategory} onValueChange={(value) => setSelectedCategory(value as ItemCategory | \"all\")}>\n              <SelectTrigger className=\"bg-neutral-800 border-neutral-700\">\n                <SelectValue placeholder=\"Category\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Categories</SelectItem>\n                <SelectItem value=\"communication\">Communication</SelectItem>\n                <SelectItem value=\"territory_control\">Territory Control</SelectItem>\n                <SelectItem value=\"battle_enhancement\">Battle Enhancement</SelectItem>\n                <SelectItem value=\"alliance_management\">Alliance Management</SelectItem>\n                <SelectItem value=\"resource_generation\">Resource Generation</SelectItem>\n                <SelectItem value=\"intelligence\">Intelligence</SelectItem>\n                <SelectItem value=\"defense_systems\">Defense Systems</SelectItem>\n                <SelectItem value=\"consumables\">Consumables</SelectItem>\n                <SelectItem value=\"collectibles\">Collectibles</SelectItem>\n                <SelectItem value=\"materials\">Materials</SelectItem>\n              </SelectContent>\n            </Select>\n            <Select value={selectedTier} onValueChange={(value) => setSelectedTier(value as ItemTier | \"all\")}>\n              <SelectTrigger className=\"bg-neutral-800 border-neutral-700\">\n                <SelectValue placeholder=\"Tier\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Tiers</SelectItem>\n                <SelectItem value=\"basic\">Basic</SelectItem>\n                <SelectItem value=\"advanced\">Advanced</SelectItem>\n                <SelectItem value=\"military\">Military</SelectItem>\n                <SelectItem value=\"experimental\">Experimental</SelectItem>\n              </SelectContent>\n            </Select>\n            <Select value={selectedCurrency} onValueChange={(value) => setSelectedCurrency(value as 'ETH' | 'ARCX' | 'all')}>\n              <SelectTrigger className=\"bg-neutral-800 border-neutral-700\">\n                <SelectValue placeholder=\"Currency\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Currencies</SelectItem>\n                <SelectItem value=\"ETH\">Base ETH</SelectItem>\n                <SelectItem value=\"ARCX\">ARCx Tokens</SelectItem>\n              </SelectContent>\n            </Select>\n            <RealisticButton variant=\"ghost\" onClick={() => {\n              setSearchQuery(\"\");\n              setSelectedCategory(\"all\");\n              setSelectedTier(\"all\");\n              setSelectedCurrency(\"all\");\n            }}>\n              Clear Filters\n            </RealisticButton>\n          </div>\n\n          {/* Marketplace Listings */}\n          <ScrollArea className=\"h-96\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              {filteredListings.map((listing) => (\n                <RealisticWastelandCard \n                  key={listing.id} \n                  variant=\"dark\" \n                  className={`p-4 border ${getTierColor(listing.item.tier)}`}\n                >\n                  <div className=\"flex items-start justify-between mb-3\">\n                    <div className=\"flex items-center gap-2\">\n                      <span className=\"text-lg\">{getCategoryIcon(listing.item.category)}</span>\n                      <div>\n                        <RealisticText variant=\"body\" className=\"font-semibold text-neutral-100\">\n                          {listing.item.name}\n                        </RealisticText>\n                        <div className=\"flex items-center gap-2\">\n                          <Badge variant=\"outline\" className={getTierColor(listing.item.tier)}>\n                            {listing.item.tier.toUpperCase()}\n                          </Badge>\n                          <Badge variant=\"outline\" className={getRarityColor(listing.item.rarity)}>\n                            {listing.item.rarity.toUpperCase()}\n                          </Badge>\n                        </div>\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      <RealisticText variant=\"body\" className=\"font-mono text-neutral-100\">\n                        {formatPrice(listing)}\n                      </RealisticText>\n                      <RealisticText variant=\"caption\" className=\"text-neutral-500\">\n                        x{listing.quantity} available\n                      </RealisticText>\n                    </div>\n                  </div>\n\n                  <RealisticText variant=\"caption\" className=\"text-neutral-400 mb-3\">\n                    {listing.item.description}\n                  </RealisticText>\n\n                  <div className=\"mb-3\">\n                    <RealisticText variant=\"caption\" className=\"text-amber-400 font-semibold\">\n                      Effects: {getEffectDescription(listing.item)}\n                    </RealisticText>\n                  </div>\n\n                  <Separator className=\"my-3 bg-neutral-700\" />\n\n                  <div className=\"flex items-center justify-between\">\n                    <RealisticText variant=\"caption\" className=\"text-neutral-500\">\n                      Seller: {listing.sellerName}\n                    </RealisticText>\n                    <div className=\"flex gap-2\">\n                      {listing.item.requiredLevel && listing.item.requiredLevel > playerLevel && (\n                        <Badge variant=\"destructive\" className=\"text-xs\">\n                          Requires Level {listing.item.requiredLevel}\n                        </Badge>\n                      )}\n                      <RealisticButton \n                        size=\"sm\" \n                        variant={canAffordItem(listing) ? \"primary\" : \"ghost\"}\n                        disabled={!canAffordItem(listing)}\n                        data-testid={`button-buy-${listing.item.id}`}\n                      >\n                        {listing.currency === 'ETH' ? 'Buy with ETH' : 'Buy with ARCx'}\n                      </RealisticButton>\n                    </div>\n                  </div>\n                </RealisticWastelandCard>\n              ))}\n            </div>\n          </ScrollArea>\n\n          {filteredListings.length === 0 && (\n            <RealisticWastelandCard variant=\"dark\" className=\"p-8 text-center\">\n              <RealisticText variant=\"body\" className=\"text-neutral-400\">\n                No strategic items match your current filters\n              </RealisticText>\n            </RealisticWastelandCard>\n          )}\n        </TabsContent>\n\n        <TabsContent value=\"mint\" className=\"space-y-6 mt-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n            {/* Strategic Items Minting */}\n            <RealisticWastelandCard variant=\"dark\" className=\"p-4\">\n              <RealisticText variant=\"body\" className=\"font-semibold mb-3 text-center\">Strategic Equipment</RealisticText>\n              <ScrollArea className=\"h-64\">\n                <div className=\"space-y-2\">\n                  {STRATEGIC_ITEMS.filter(item => item.mintable).map((item) => (\n                    <div key={item.id} className=\"p-2 bg-neutral-800 border border-neutral-700 rounded\">\n                      <div className=\"flex items-center justify-between mb-1\">\n                        <RealisticText variant=\"caption\" className=\"font-medium\">{item.name}</RealisticText>\n                        <Badge variant=\"outline\" className={getTierColor(item.tier)}>\n                          {item.tier.toUpperCase()}\n                        </Badge>\n                      </div>\n                      <RealisticText variant=\"caption\" className=\"text-neutral-400 text-xs mb-2\">\n                        {item.description}\n                      </RealisticText>\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-xs text-emerald-400\">\n                          Mint: {item.mintCost?.baseETH ? `${parseFloat(item.mintCost.baseETH) / 1e18} ETH` : 'Free'}\n                        </span>\n                        <RealisticButton size=\"sm\" variant=\"primary\" disabled={!canAffordItem({ item, currency: 'ETH' } as StrategicListing)}>\n                          Mint\n                        </RealisticButton>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </ScrollArea>\n            </RealisticWastelandCard>\n\n            {/* Consumable Items Minting */}\n            <RealisticWastelandCard variant=\"dark\" className=\"p-4\">\n              <RealisticText variant=\"body\" className=\"font-semibold mb-3 text-center\">Consumables</RealisticText>\n              <ScrollArea className=\"h-64\">\n                <div className=\"space-y-2\">\n                  {CONSUMABLE_ITEMS.filter(item => item.mintable).map((item) => (\n                    <div key={item.id} className=\"p-2 bg-neutral-800 border border-neutral-700 rounded\">\n                      <div className=\"flex items-center justify-between mb-1\">\n                        <RealisticText variant=\"caption\" className=\"font-medium\">{item.name}</RealisticText>\n                        <Badge variant=\"outline\" className={getRarityColor(item.rarity)}>\n                          {item.rarity.toUpperCase()}\n                        </Badge>\n                      </div>\n                      <RealisticText variant=\"caption\" className=\"text-neutral-400 text-xs mb-2\">\n                        Single use: {getEffectDescription(item)}\n                      </RealisticText>\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-xs text-emerald-400\">\n                          Mint: {item.mintCost?.baseETH ? `${parseFloat(item.mintCost.baseETH) / 1e18} ETH` : 'Free'}\n                        </span>\n                        <RealisticButton size=\"sm\" variant=\"primary\" disabled={!canAffordItem({ item, currency: 'ETH' } as StrategicListing)}>\n                          Mint\n                        </RealisticButton>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </ScrollArea>\n            </RealisticWastelandCard>\n\n            {/* Materials Minting */}\n            <RealisticWastelandCard variant=\"dark\" className=\"p-4\">\n              <RealisticText variant=\"body\" className=\"font-semibold mb-3 text-center\">Crafting Materials</RealisticText>\n              <ScrollArea className=\"h-64\">\n                <div className=\"space-y-2\">\n                  {ALL_GAME_ITEMS.filter(item => item.category === 'materials' && item.mintable).map((item) => (\n                    <div key={item.id} className=\"p-2 bg-neutral-800 border border-neutral-700 rounded\">\n                      <div className=\"flex items-center justify-between mb-1\">\n                        <RealisticText variant=\"caption\" className=\"font-medium\">{item.name}</RealisticText>\n                        <Badge variant=\"outline\" className=\"text-gray-400\">\n                          MATERIAL\n                        </Badge>\n                      </div>\n                      <RealisticText variant=\"caption\" className=\"text-neutral-400 text-xs mb-2\">\n                        Stack: {item.maxStack} • {item.description}\n                      </RealisticText>\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-xs text-emerald-400\">\n                          Mint: {item.mintCost?.baseETH ? `${parseFloat(item.mintCost.baseETH) / 1e18} ETH` : 'Free'}\n                        </span>\n                        <div className=\"flex gap-1\">\n                          <Input \n                            type=\"number\" \n                            placeholder=\"Qty\" \n                            className=\"w-16 h-6 text-xs bg-neutral-700 border-neutral-600\"\n                            min=\"1\"\n                            max={item.maxStack}\n                          />\n                          <RealisticButton size=\"sm\" variant=\"primary\">\n                            Mint\n                          </RealisticButton>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </ScrollArea>\n            </RealisticWastelandCard>\n          </div>\n\n          <RealisticWastelandCard variant=\"default\" className=\"p-4 mt-6\">\n            <RealisticText variant=\"subtitle\" className=\"mb-3\">Minting Information</RealisticText>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n              <div>\n                <RealisticText variant=\"body\" className=\"text-amber-400 font-semibold\">Strategic Equipment</RealisticText>\n                <RealisticText variant=\"caption\" className=\"text-neutral-400\">\n                  Permanent items that enhance your capabilities. Most require materials and energy.\n                </RealisticText>\n              </div>\n              <div>\n                <RealisticText variant=\"body\" className=\"text-blue-400 font-semibold\">Consumables</RealisticText>\n                <RealisticText variant=\"caption\" className=\"text-neutral-400\">\n                  Single-use items with powerful temporary effects. Perfect for critical battles.\n                </RealisticText>\n              </div>\n              <div>\n                <RealisticText variant=\"body\" className=\"text-green-400 font-semibold\">Materials</RealisticText>\n                <RealisticText variant=\"caption\" className=\"text-neutral-400\">\n                  Essential components for crafting advanced equipment. Cheaply mintable in bulk.\n                </RealisticText>\n              </div>\n            </div>\n          </RealisticWastelandCard>\n        </TabsContent>\n\n        <TabsContent value=\"inventory\" className=\"space-y-6 mt-6\">\n          <RealisticWastelandCard variant=\"dark\" className=\"p-6 text-center\">\n            <RealisticText variant=\"subtitle\" className=\"mb-4\">Strategic Equipment Inventory</RealisticText>\n            <RealisticText variant=\"body\" className=\"text-neutral-400 mb-4\">\n              Your active strategic equipment and consumables\n            </RealisticText>\n            <RealisticText variant=\"caption\" className=\"text-neutral-500\">\n              Inventory system integration coming soon\n            </RealisticText>\n          </RealisticWastelandCard>\n        </TabsContent>\n\n        <TabsContent value=\"crafting\" className=\"space-y-6 mt-6\">\n          <RealisticWastelandCard variant=\"dark\" className=\"p-6 text-center\">\n            <RealisticText variant=\"subtitle\" className=\"mb-4\">Strategic Equipment Crafting</RealisticText>\n            <RealisticText variant=\"body\" className=\"text-neutral-400 mb-4\">\n              Craft advanced military-grade equipment from raw materials\n            </RealisticText>\n            <RealisticText variant=\"caption\" className=\"text-neutral-500\">\n              Crafting system integration coming soon\n            </RealisticText>\n          </RealisticWastelandCard>\n        </TabsContent>\n\n        <TabsContent value=\"bridge\" className=\"space-y-6 mt-6\">\n          <CrossChainBridge />\n        </TabsContent>\n\n        <TabsContent value=\"networks\" className=\"space-y-6 mt-6\">\n          <MeshNetworkManager />\n        </TabsContent>\n\n        <TabsContent value=\"ai-factions\" className=\"space-y-6 mt-6\">\n          <AIFactionManager />\n        </TabsContent>\n      </Tabs>\n    </RealisticWastelandCard>\n  );\n}","size_bytes":25640},"client/src/components/ai-npc-factions.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { \n  RealisticWastelandCard,\n  RealisticText,\n  RealisticButton\n} from \"@/components/realistic-wasteland\";\n\ninterface NPCFaction {\n  id: string;\n  name: string;\n  type: 'raider' | 'merchant' | 'military' | 'tech' | 'nomad';\n  powerLevel: number;\n  territories: string[];\n  behavior: 'aggressive' | 'defensive' | 'neutral' | 'trading' | 'expansionist';\n  aiDifficulty: 'relentless' | 'adaptive' | 'strategic';\n  onlineMembers: number;\n  totalMembers: number;\n  resources: number;\n  reputation: number;\n  lastAction: string;\n  timestamp: number;\n}\n\nconst NPC_FACTIONS: NPCFaction[] = [\n  {\n    id: 'steel_legion',\n    name: 'STEEL LEGION',\n    type: 'military',\n    powerLevel: 8750,\n    territories: ['A-1', 'A-2', 'B-1', 'C-1'],\n    behavior: 'aggressive',\n    aiDifficulty: 'relentless',\n    onlineMembers: 45,\n    totalMembers: 67,\n    resources: 125000,\n    reputation: -85,\n    lastAction: 'Fortified sector A-1 with automated defenses',\n    timestamp: Date.now() - 1200000\n  },\n  {\n    id: 'data_merchants',\n    name: 'DATA MERCHANTS',\n    type: 'tech',\n    powerLevel: 6200,\n    territories: ['D-3', 'E-3'],\n    behavior: 'trading',\n    aiDifficulty: 'strategic',\n    onlineMembers: 28,\n    totalMembers: 34,\n    resources: 89000,\n    reputation: 45,\n    lastAction: 'Established trading post in neutral zone',\n    timestamp: Date.now() - 800000\n  },\n  {\n    id: 'wasteland_nomads',\n    name: 'WASTELAND NOMADS',\n    type: 'nomad',\n    powerLevel: 5800,\n    territories: ['F-5', 'G-4'],\n    behavior: 'defensive',\n    aiDifficulty: 'adaptive',\n    onlineMembers: 32,\n    totalMembers: 45,\n    resources: 67000,\n    reputation: 12,\n    lastAction: 'Migrated convoy to avoid Steel Legion patrol',\n    timestamp: Date.now() - 600000\n  },\n  {\n    id: 'cyber_raiders',\n    name: 'CYBER RAIDERS',\n    type: 'raider',\n    powerLevel: 7100,\n    territories: ['H-2', 'H-3'],\n    behavior: 'expansionist',\n    aiDifficulty: 'relentless',\n    onlineMembers: 38,\n    totalMembers: 52,\n    resources: 95000,\n    reputation: -92,\n    lastAction: 'Launched coordinated attack on merchant convoy',\n    timestamp: Date.now() - 400000\n  },\n  {\n    id: 'free_engineers',\n    name: 'FREE ENGINEERS',\n    type: 'tech',\n    powerLevel: 4900,\n    territories: ['C-4'],\n    behavior: 'neutral',\n    aiDifficulty: 'strategic',\n    onlineMembers: 22,\n    totalMembers: 28,\n    resources: 78000,\n    reputation: 78,\n    lastAction: 'Completed mesh network relay installation',\n    timestamp: Date.now() - 300000\n  }\n];\n\ninterface AIFactionManagerProps {\n  className?: string;\n}\n\nexport const AIFactionManager = ({ className = \"\" }: AIFactionManagerProps) => {\n  const [factions, setFactions] = useState<NPCFaction[]>(NPC_FACTIONS);\n  const [selectedFaction, setSelectedFaction] = useState<NPCFaction | null>(null);\n  const [isSimulating, setIsSimulating] = useState(false);\n  const [relationshipStatus, setRelationshipStatus] = useState<Record<string, 'hostile' | 'neutral' | 'allied'>>({\n    steel_legion: 'hostile',\n    data_merchants: 'neutral',\n    wasteland_nomads: 'neutral',\n    cyber_raiders: 'hostile',\n    free_engineers: 'allied'\n  });\n\n  // AI faction behavior simulation\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setFactions(prev => prev.map(faction => {\n        const updatedFaction = { ...faction };\n        \n        // AI decision making based on faction type and behavior\n        switch (faction.behavior) {\n          case 'aggressive':\n            // Aggressive factions gain power but lose reputation\n            updatedFaction.powerLevel += Math.random() * 100;\n            updatedFaction.reputation -= Math.random() * 5;\n            break;\n          case 'trading':\n            // Trading factions gain resources and reputation\n            updatedFaction.resources += Math.random() * 5000;\n            updatedFaction.reputation += Math.random() * 3;\n            break;\n          case 'defensive':\n            // Defensive factions maintain stability\n            updatedFaction.powerLevel += Math.random() * 50;\n            break;\n          case 'expansionist':\n            // Expansionist factions try to gain territories\n            if (Math.random() > 0.8) {\n              const newTerritory = `${String.fromCharCode(65 + Math.floor(Math.random() * 8))}-${Math.floor(Math.random() * 8) + 1}`;\n              if (!updatedFaction.territories.includes(newTerritory)) {\n                updatedFaction.territories.push(newTerritory);\n              }\n            }\n            break;\n        }\n\n        // Online member fluctuation\n        const memberChange = Math.floor((Math.random() - 0.5) * 6);\n        updatedFaction.onlineMembers = Math.max(10, Math.min(updatedFaction.totalMembers, updatedFaction.onlineMembers + memberChange));\n\n        return updatedFaction;\n      }));\n    }, 30000); // Update every 30 seconds\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const calculateThreatLevel = (faction: NPCFaction): string => {\n    const relationship = relationshipStatus[faction.id];\n    if (relationship === 'allied') return 'ALLIED';\n    if (relationship === 'neutral') return 'NEUTRAL';\n    \n    const threat = faction.powerLevel + (faction.onlineMembers * 100);\n    if (threat > 10000) return 'EXTREME';\n    if (threat > 7000) return 'HIGH';\n    if (threat > 4000) return 'MEDIUM';\n    return 'LOW';\n  };\n\n  const getThreatColor = (threatLevel: string): string => {\n    switch (threatLevel) {\n      case 'EXTREME': return 'text-red-400';\n      case 'HIGH': return 'text-orange-400';\n      case 'MEDIUM': return 'text-yellow-400';\n      case 'LOW': return 'text-green-400';\n      case 'ALLIED': return 'text-blue-400';\n      case 'NEUTRAL': return 'text-neutral-400';\n      default: return 'text-neutral-400';\n    }\n  };\n\n  const engageFaction = (factionId: string, action: 'attack' | 'negotiate' | 'trade') => {\n    setIsSimulating(true);\n    \n    setTimeout(() => {\n      setFactions(prev => prev.map(f => {\n        if (f.id === factionId) {\n          const updated = { ...f };\n          switch (action) {\n            case 'attack':\n              updated.reputation -= 20;\n              updated.powerLevel -= Math.random() * 500;\n              updated.lastAction = 'Under attack from human alliance';\n              setRelationshipStatus(prev => ({ ...prev, [factionId]: 'hostile' }));\n              break;\n            case 'negotiate':\n              updated.reputation += 10;\n              setRelationshipStatus(prev => ({ ...prev, [factionId]: 'neutral' }));\n              updated.lastAction = 'Entered diplomatic negotiations';\n              break;\n            case 'trade':\n              updated.resources += 5000;\n              updated.reputation += 15;\n              setRelationshipStatus(prev => ({ ...prev, [factionId]: 'allied' }));\n              updated.lastAction = 'Established trade agreement';\n              break;\n          }\n          updated.timestamp = Date.now();\n          return updated;\n        }\n        return f;\n      }));\n      setIsSimulating(false);\n    }, 2000);\n  };\n\n  const getTimeSince = (timestamp: number): string => {\n    const diff = Date.now() - timestamp;\n    const minutes = Math.floor(diff / 60000);\n    if (minutes < 60) return `${minutes}m ago`;\n    const hours = Math.floor(minutes / 60);\n    return `${hours}h ago`;\n  };\n\n  return (\n    <div className={`space-y-6 ${className}`}>\n      <RealisticWastelandCard variant=\"dark\" className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <div>\n            <RealisticText variant=\"title\" className=\"text-neutral-100\">\n              AI Faction Network\n            </RealisticText>\n            <RealisticText variant=\"caption\" className=\"text-neutral-500\">\n              Relentless Difficulty • Autonomous NPCs\n            </RealisticText>\n          </div>\n          <div className=\"text-right\">\n            <div className=\"text-xs text-neutral-400\">Active Factions</div>\n            <div className=\"text-xl font-bold text-amber-400\">{factions.length}</div>\n          </div>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4\">\n          {factions.map((faction) => {\n            const threatLevel = calculateThreatLevel(faction);\n            const threatColor = getThreatColor(threatLevel);\n            \n            return (\n              <div\n                key={faction.id}\n                className={`bg-neutral-900 border p-4 cursor-pointer transition-colors ${\n                  selectedFaction?.id === faction.id \n                    ? 'border-amber-600 bg-amber-900/10' \n                    : 'border-neutral-700 hover:border-neutral-600'\n                }`}\n                onClick={() => setSelectedFaction(faction)}\n              >\n                <div className=\"flex justify-between items-start mb-3\">\n                  <div>\n                    <div className=\"font-bold text-sm text-neutral-100\">{faction.name}</div>\n                    <div className=\"text-xs text-neutral-400 uppercase\">{faction.type} FACTION</div>\n                  </div>\n                  <div className={`text-xs font-bold ${threatColor}`}>\n                    {threatLevel}\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <div className=\"flex justify-between text-xs\">\n                    <span className=\"text-neutral-400\">Power Level</span>\n                    <span className=\"text-neutral-100 font-mono\">{Math.floor(faction.powerLevel).toLocaleString()}</span>\n                  </div>\n                  <div className=\"flex justify-between text-xs\">\n                    <span className=\"text-neutral-400\">Online/Total</span>\n                    <span className=\"text-emerald-400 font-mono\">{faction.onlineMembers}/{faction.totalMembers}</span>\n                  </div>\n                  <div className=\"flex justify-between text-xs\">\n                    <span className=\"text-neutral-400\">Territories</span>\n                    <span className=\"text-amber-400 font-mono\">{faction.territories.length}</span>\n                  </div>\n                  <div className=\"flex justify-between text-xs\">\n                    <span className=\"text-neutral-400\">Reputation</span>\n                    <span className={`font-mono ${faction.reputation > 0 ? 'text-green-400' : 'text-red-400'}`}>\n                      {faction.reputation > 0 ? '+' : ''}{Math.floor(faction.reputation)}\n                    </span>\n                  </div>\n                </div>\n\n                <div className=\"mt-3 pt-2 border-t border-neutral-700\">\n                  <div className=\"text-xs text-neutral-500 mb-1\">Last Action:</div>\n                  <div className=\"text-xs text-neutral-300\">{faction.lastAction}</div>\n                  <div className=\"text-xs text-neutral-600 mt-1\">{getTimeSince(faction.timestamp)}</div>\n                </div>\n              </div>\n            );\n          })}\n        </div>\n\n        {selectedFaction && (\n          <div className=\"mt-6 p-4 bg-black border border-neutral-700\">\n            <div className=\"flex justify-between items-center mb-4\">\n              <div>\n                <RealisticText variant=\"subtitle\" className=\"text-neutral-100\">\n                  {selectedFaction.name} - Engagement Options\n                </RealisticText>\n                <RealisticText variant=\"caption\" className=\"text-neutral-500\">\n                  Difficulty: {selectedFaction.aiDifficulty.toUpperCase()} • Behavior: {selectedFaction.behavior.toUpperCase()}\n                </RealisticText>\n              </div>\n              <RealisticButton \n                variant=\"ghost\" \n                size=\"sm\" \n                onClick={() => setSelectedFaction(null)}\n              >\n                Close\n              </RealisticButton>\n            </div>\n\n            <div className=\"grid grid-cols-3 gap-3\">\n              <RealisticButton\n                variant=\"destructive\"\n                size=\"sm\"\n                disabled={isSimulating}\n                onClick={() => engageFaction(selectedFaction.id, 'attack')}\n                className=\"w-full\"\n              >\n                {isSimulating ? 'Processing...' : 'Attack'}\n              </RealisticButton>\n              <RealisticButton\n                variant=\"secondary\"\n                size=\"sm\"\n                disabled={isSimulating}\n                onClick={() => engageFaction(selectedFaction.id, 'negotiate')}\n                className=\"w-full\"\n              >\n                {isSimulating ? 'Processing...' : 'Negotiate'}\n              </RealisticButton>\n              <RealisticButton\n                variant=\"primary\"\n                size=\"sm\"\n                disabled={isSimulating}\n                onClick={() => engageFaction(selectedFaction.id, 'trade')}\n                className=\"w-full\"\n              >\n                {isSimulating ? 'Processing...' : 'Trade'}\n              </RealisticButton>\n            </div>\n\n            <div className=\"mt-4 grid grid-cols-2 gap-4 text-xs\">\n              <div>\n                <div className=\"text-neutral-400 mb-1\">Controlled Territories:</div>\n                <div className=\"text-neutral-100 font-mono\">\n                  {selectedFaction.territories.join(', ')}\n                </div>\n              </div>\n              <div>\n                <div className=\"text-neutral-400 mb-1\">Resources:</div>\n                <div className=\"text-neutral-100 font-mono\">\n                  {Math.floor(selectedFaction.resources).toLocaleString()} credits\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        <div className=\"mt-6 p-4 bg-neutral-900 border border-neutral-700\">\n          <RealisticText variant=\"caption\" className=\"text-neutral-400 leading-relaxed\">\n            AI factions operate autonomously with relentless difficulty. They adapt strategies, form temporary alliances, \n            and respond dynamically to player actions. Stronger alliances can team up against dominant factions, \n            but be prepared for coordinated AI counter-attacks.\n          </RealisticText>\n        </div>\n      </RealisticWastelandCard>\n    </div>\n  );\n};","size_bytes":14211},"client/src/components/cross-chain-bridge.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { \n  RealisticWastelandCard,\n  RealisticText,\n  RealisticButton\n} from \"@/components/realistic-wasteland\";\n\ninterface ChainConfig {\n  id: string;\n  name: string;\n  symbol: string;\n  rpcUrl: string;\n  chainId: number;\n  blockExplorer: string;\n  nativeCurrency: {\n    name: string;\n    symbol: string;\n    decimals: number;\n  };\n  status: 'active' | 'degraded' | 'offline';\n  gasPrice: string;\n  blockTime: number;\n}\n\ninterface BridgeTransaction {\n  id: string;\n  fromChain: string;\n  toChain: string;\n  asset: string;\n  amount: string;\n  status: 'pending' | 'processing' | 'completed' | 'failed';\n  hash?: string;\n  timestamp: number;\n  estimatedTime: number;\n  fees: {\n    networkFee: string;\n    bridgeFee: string;\n    total: string;\n  };\n}\n\ninterface SupportedAsset {\n  symbol: string;\n  name: string;\n  decimals: number;\n  addresses: {\n    [chainId: number]: string;\n  };\n  icon: string;\n  minAmount: string;\n  maxAmount: string;\n}\n\nconst SUPPORTED_CHAINS: ChainConfig[] = [\n  {\n    id: 'ethereum',\n    name: 'Ethereum',\n    symbol: 'ETH',\n    rpcUrl: 'https://eth-mainnet.alchemyapi.io/v2/demo',\n    chainId: 1,\n    blockExplorer: 'https://etherscan.io',\n    nativeCurrency: {\n      name: 'Ethereum',\n      symbol: 'ETH',\n      decimals: 18\n    },\n    status: 'active',\n    gasPrice: '25.4 gwei',\n    blockTime: 12\n  },\n  {\n    id: 'base',\n    name: 'Base',\n    symbol: 'ETH',\n    rpcUrl: 'https://mainnet.base.org',\n    chainId: 8453,\n    blockExplorer: 'https://basescan.org',\n    nativeCurrency: {\n      name: 'Ethereum',\n      symbol: 'ETH',\n      decimals: 18\n    },\n    status: 'active',\n    gasPrice: '0.8 gwei',\n    blockTime: 2\n  }\n];\n\nconst SUPPORTED_ASSETS: SupportedAsset[] = [\n  {\n    symbol: 'ETH',\n    name: 'Ethereum',\n    decimals: 18,\n    addresses: {\n      1: '0x0000000000000000000000000000000000000000', // Native ETH\n      8453: '0x0000000000000000000000000000000000000000' // Native ETH on Base\n    },\n    icon: '⟠',\n    minAmount: '0.001',\n    maxAmount: '100'\n  },\n  {\n    symbol: 'USDC',\n    name: 'USD Coin',\n    decimals: 6,\n    addresses: {\n      1: '0xA0b86a33E6A58D4a73C92E4c9cD7e1a1B9B5A7E1', // Example USDC on Ethereum\n      8453: '0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913' // USDC on Base\n    },\n    icon: '💵',\n    minAmount: '1',\n    maxAmount: '100000'\n  }\n];\n\ninterface CrossChainBridgeProps {\n  className?: string;\n}\n\nexport const CrossChainBridge = ({ className = \"\" }: CrossChainBridgeProps) => {\n  const [fromChain, setFromChain] = useState<ChainConfig>(SUPPORTED_CHAINS[0]);\n  const [toChain, setToChain] = useState<ChainConfig>(SUPPORTED_CHAINS[1]);\n  const [selectedAsset, setSelectedAsset] = useState<SupportedAsset>(SUPPORTED_ASSETS[0]);\n  const [amount, setAmount] = useState<string>('');\n  const [recipientAddress, setRecipientAddress] = useState<string>('');\n  const [transactions, setTransactions] = useState<BridgeTransaction[]>([]);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [estimatedFees, setEstimatedFees] = useState<{\n    networkFee: string;\n    bridgeFee: string;\n    total: string;\n  } | null>(null);\n  const [walletConnected, setWalletConnected] = useState(false);\n  const [walletAddress, setWalletAddress] = useState<string>('');\n\n  // Simulate wallet connection\n  useEffect(() => {\n    // In development mode, simulate wallet connection\n    setTimeout(() => {\n      setWalletConnected(true);\n      setWalletAddress('0x742d35Cc6651B24B5F7E1E2A4B2E2F5F5D5D5D5D');\n    }, 1000);\n  }, []);\n\n  // Calculate fees when amount or chains change\n  useEffect(() => {\n    if (amount && parseFloat(amount) > 0) {\n      const networkFee = fromChain.id === 'ethereum' ? '0.003' : '0.0001';\n      const bridgeFee = (parseFloat(amount) * 0.001).toFixed(6); // 0.1% bridge fee\n      const total = (parseFloat(networkFee) + parseFloat(bridgeFee)).toFixed(6);\n      \n      setEstimatedFees({\n        networkFee: `${networkFee} ${fromChain.symbol}`,\n        bridgeFee: `${bridgeFee} ${selectedAsset.symbol}`,\n        total: `${total} ${fromChain.symbol}`\n      });\n    } else {\n      setEstimatedFees(null);\n    }\n  }, [amount, fromChain, selectedAsset]);\n\n  const swapChains = () => {\n    const temp = fromChain;\n    setFromChain(toChain);\n    setToChain(temp);\n  };\n\n  const isValidAmount = (value: string): boolean => {\n    const numValue = parseFloat(value);\n    const min = parseFloat(selectedAsset.minAmount);\n    const max = parseFloat(selectedAsset.maxAmount);\n    return numValue >= min && numValue <= max;\n  };\n\n  const isValidAddress = (address: string): boolean => {\n    return /^0x[a-fA-F0-9]{40}$/.test(address);\n  };\n\n  const initiateBridge = async () => {\n    if (!isValidAmount(amount) || !isValidAddress(recipientAddress)) {\n      return;\n    }\n\n    setIsProcessing(true);\n\n    // Simulate bridge transaction\n    const newTransaction: BridgeTransaction = {\n      id: `bridge_${Date.now()}`,\n      fromChain: fromChain.name,\n      toChain: toChain.name,\n      asset: selectedAsset.symbol,\n      amount: amount,\n      status: 'pending',\n      timestamp: Date.now(),\n      estimatedTime: fromChain.id === 'ethereum' ? 900 : 180, // 15 min for ETH, 3 min for Base\n      fees: estimatedFees || {\n        networkFee: '0.001 ETH',\n        bridgeFee: '0.001 USDC',\n        total: '0.002 ETH'\n      }\n    };\n\n    setTransactions(prev => [newTransaction, ...prev]);\n\n    // Simulate transaction progression\n    setTimeout(() => {\n      setTransactions(prev => prev.map(tx => \n        tx.id === newTransaction.id \n          ? { ...tx, status: 'processing', hash: `0x${Math.random().toString(16).substr(2, 64)}` }\n          : tx\n      ));\n    }, 2000);\n\n    setTimeout(() => {\n      setTransactions(prev => prev.map(tx => \n        tx.id === newTransaction.id \n          ? { ...tx, status: 'completed' }\n          : tx\n      ));\n      setIsProcessing(false);\n      setAmount('');\n      setRecipientAddress('');\n    }, 8000);\n  };\n\n  const getStatusColor = (status: string): string => {\n    switch (status) {\n      case 'completed': return 'text-emerald-400';\n      case 'processing': return 'text-amber-400';\n      case 'pending': return 'text-blue-400';\n      case 'failed': return 'text-red-400';\n      default: return 'text-neutral-400';\n    }\n  };\n\n  const getChainStatusColor = (status: string): string => {\n    switch (status) {\n      case 'active': return 'text-emerald-400';\n      case 'degraded': return 'text-yellow-400';\n      case 'offline': return 'text-red-400';\n      default: return 'text-neutral-400';\n    }\n  };\n\n  const formatTime = (seconds: number): string => {\n    const minutes = Math.floor(seconds / 60);\n    const remainingSeconds = seconds % 60;\n    return `${minutes}:${remainingSeconds.toString().padStart(2, '0')}`;\n  };\n\n  const getTimeAgo = (timestamp: number): string => {\n    const diff = Date.now() - timestamp;\n    const minutes = Math.floor(diff / 60000);\n    if (minutes < 60) return `${minutes}m ago`;\n    const hours = Math.floor(minutes / 60);\n    return `${hours}h ago`;\n  };\n\n  return (\n    <div className={`space-y-6 ${className}`}>\n      <RealisticWastelandCard variant=\"dark\" className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <div>\n            <RealisticText variant=\"title\" className=\"text-neutral-100\">\n              Cross-Chain Bridge\n            </RealisticText>\n            <RealisticText variant=\"caption\" className=\"text-neutral-500\">\n              Secure multi-chain asset transfers\n            </RealisticText>\n          </div>\n          <div className=\"flex items-center gap-3\">\n            <div className={`w-2 h-2 rounded-full ${walletConnected ? 'bg-emerald-400' : 'bg-red-400'}`}></div>\n            <RealisticText variant=\"caption\" className=\"text-neutral-400\">\n              {walletConnected ? `Connected: ${walletAddress.slice(0, 6)}...${walletAddress.slice(-4)}` : 'Wallet Disconnected'}\n            </RealisticText>\n          </div>\n        </div>\n\n        {/* Chain Status */}\n        <div className=\"grid grid-cols-2 gap-4 mb-6\">\n          {SUPPORTED_CHAINS.map((chain) => (\n            <div key={chain.id} className=\"bg-neutral-900 border border-neutral-700 p-4\">\n              <div className=\"flex justify-between items-start mb-2\">\n                <div>\n                  <div className=\"font-semibold text-sm text-neutral-100\">{chain.name}</div>\n                  <div className=\"text-xs text-neutral-400\">Chain ID: {chain.chainId}</div>\n                </div>\n                <div className={`text-xs font-bold ${getChainStatusColor(chain.status)}`}>\n                  {chain.status.toUpperCase()}\n                </div>\n              </div>\n              <div className=\"space-y-1 text-xs\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-neutral-400\">Gas Price:</span>\n                  <span className=\"text-neutral-100\">{chain.gasPrice}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-neutral-400\">Block Time:</span>\n                  <span className=\"text-neutral-100\">{chain.blockTime}s</span>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n\n        {/* Bridge Interface */}\n        <div className=\"space-y-4\">\n          {/* From Chain */}\n          <div className=\"bg-neutral-900 border border-neutral-700 p-4\">\n            <RealisticText variant=\"caption\" className=\"text-neutral-400 mb-2\">From</RealisticText>\n            <div className=\"flex justify-between items-center\">\n              <select\n                value={fromChain.id}\n                onChange={(e) => setFromChain(SUPPORTED_CHAINS.find(c => c.id === e.target.value) || SUPPORTED_CHAINS[0])}\n                className=\"bg-neutral-800 border border-neutral-600 text-neutral-100 px-3 py-2 text-sm\"\n              >\n                {SUPPORTED_CHAINS.map((chain) => (\n                  <option key={chain.id} value={chain.id}>\n                    {chain.name} ({chain.symbol})\n                  </option>\n                ))}\n              </select>\n              <RealisticButton variant=\"ghost\" size=\"sm\" onClick={swapChains}>\n                ⇅ Swap\n              </RealisticButton>\n            </div>\n          </div>\n\n          {/* To Chain */}\n          <div className=\"bg-neutral-900 border border-neutral-700 p-4\">\n            <RealisticText variant=\"caption\" className=\"text-neutral-400 mb-2\">To</RealisticText>\n            <select\n              value={toChain.id}\n              onChange={(e) => setToChain(SUPPORTED_CHAINS.find(c => c.id === e.target.value) || SUPPORTED_CHAINS[1])}\n              className=\"bg-neutral-800 border border-neutral-600 text-neutral-100 px-3 py-2 text-sm w-full\"\n            >\n              {SUPPORTED_CHAINS.filter(c => c.id !== fromChain.id).map((chain) => (\n                <option key={chain.id} value={chain.id}>\n                  {chain.name} ({chain.symbol})\n                </option>\n              ))}\n            </select>\n          </div>\n\n          {/* Asset Selection */}\n          <div className=\"bg-neutral-900 border border-neutral-700 p-4\">\n            <RealisticText variant=\"caption\" className=\"text-neutral-400 mb-2\">Asset</RealisticText>\n            <div className=\"flex gap-3\">\n              {SUPPORTED_ASSETS.map((asset) => (\n                <button\n                  key={asset.symbol}\n                  onClick={() => setSelectedAsset(asset)}\n                  className={`flex items-center gap-2 px-3 py-2 border text-sm ${\n                    selectedAsset.symbol === asset.symbol\n                      ? 'border-amber-600 bg-amber-900/20 text-amber-400'\n                      : 'border-neutral-600 bg-neutral-800 text-neutral-300 hover:border-neutral-500'\n                  }`}\n                >\n                  <span>{asset.icon}</span>\n                  <span>{asset.symbol}</span>\n                </button>\n              ))}\n            </div>\n          </div>\n\n          {/* Amount Input */}\n          <div className=\"bg-neutral-900 border border-neutral-700 p-4\">\n            <RealisticText variant=\"caption\" className=\"text-neutral-400 mb-2\">Amount</RealisticText>\n            <div className=\"flex gap-3\">\n              <input\n                type=\"number\"\n                value={amount}\n                onChange={(e) => setAmount(e.target.value)}\n                placeholder={`Min: ${selectedAsset.minAmount}, Max: ${selectedAsset.maxAmount}`}\n                className=\"flex-1 bg-neutral-800 border border-neutral-600 text-neutral-100 px-3 py-2 text-sm\"\n                step=\"0.000001\"\n                min={selectedAsset.minAmount}\n                max={selectedAsset.maxAmount}\n              />\n              <button\n                onClick={() => setAmount(selectedAsset.maxAmount)}\n                className=\"px-3 py-2 bg-neutral-800 border border-neutral-600 text-neutral-300 text-sm hover:bg-neutral-700\"\n              >\n                MAX\n              </button>\n            </div>\n            {amount && !isValidAmount(amount) && (\n              <div className=\"text-red-400 text-xs mt-1\">\n                Amount must be between {selectedAsset.minAmount} and {selectedAsset.maxAmount}\n              </div>\n            )}\n          </div>\n\n          {/* Recipient Address */}\n          <div className=\"bg-neutral-900 border border-neutral-700 p-4\">\n            <RealisticText variant=\"caption\" className=\"text-neutral-400 mb-2\">Recipient Address</RealisticText>\n            <input\n              type=\"text\"\n              value={recipientAddress}\n              onChange={(e) => setRecipientAddress(e.target.value)}\n              placeholder=\"0x...\"\n              className=\"w-full bg-neutral-800 border border-neutral-600 text-neutral-100 px-3 py-2 text-sm font-mono\"\n            />\n            {recipientAddress && !isValidAddress(recipientAddress) && (\n              <div className=\"text-red-400 text-xs mt-1\">\n                Invalid address format\n              </div>\n            )}\n          </div>\n\n          {/* Fee Estimation */}\n          {estimatedFees && (\n            <div className=\"bg-neutral-900 border border-neutral-700 p-4\">\n              <RealisticText variant=\"caption\" className=\"text-neutral-400 mb-2\">Estimated Fees</RealisticText>\n              <div className=\"space-y-1 text-xs\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-neutral-400\">Network Fee:</span>\n                  <span className=\"text-neutral-100\">{estimatedFees.networkFee}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-neutral-400\">Bridge Fee:</span>\n                  <span className=\"text-neutral-100\">{estimatedFees.bridgeFee}</span>\n                </div>\n                <div className=\"flex justify-between font-semibold\">\n                  <span className=\"text-neutral-300\">Total:</span>\n                  <span className=\"text-neutral-100\">{estimatedFees.total}</span>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Bridge Button */}\n          <RealisticButton\n            variant=\"primary\"\n            onClick={initiateBridge}\n            disabled={!walletConnected || isProcessing || !amount || !recipientAddress || !isValidAmount(amount) || !isValidAddress(recipientAddress)}\n            className=\"w-full\"\n          >\n            {isProcessing ? 'Processing Bridge...' : `Bridge ${selectedAsset.symbol}`}\n          </RealisticButton>\n        </div>\n\n        {/* Transaction History */}\n        {transactions.length > 0 && (\n          <div className=\"mt-6\">\n            <RealisticText variant=\"subtitle\" className=\"mb-3\">Recent Transactions</RealisticText>\n            <div className=\"space-y-3\">\n              {transactions.slice(0, 5).map((tx) => (\n                <div key={tx.id} className=\"bg-neutral-900 border border-neutral-700 p-4\">\n                  <div className=\"flex justify-between items-start mb-2\">\n                    <div>\n                      <div className=\"text-sm text-neutral-100\">\n                        {tx.amount} {tx.asset} • {tx.fromChain} → {tx.toChain}\n                      </div>\n                      <div className=\"text-xs text-neutral-400\">{getTimeAgo(tx.timestamp)}</div>\n                    </div>\n                    <div className={`text-xs font-bold ${getStatusColor(tx.status)}`}>\n                      {tx.status.toUpperCase()}\n                    </div>\n                  </div>\n                  {tx.hash && (\n                    <div className=\"text-xs text-neutral-500 font-mono\">\n                      Hash: {tx.hash.slice(0, 10)}...{tx.hash.slice(-8)}\n                    </div>\n                  )}\n                  <div className=\"flex justify-between items-center text-xs mt-2\">\n                    <span className=\"text-neutral-400\">Fee: {tx.fees.total}</span>\n                    {tx.status === 'processing' && (\n                      <span className=\"text-amber-400\">ETA: {formatTime(tx.estimatedTime)}</span>\n                    )}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        <div className=\"mt-6 p-4 bg-neutral-900 border border-neutral-700\">\n          <RealisticText variant=\"caption\" className=\"text-neutral-400 leading-relaxed\">\n            Cross-chain bridge enables secure asset transfers between Ethereum and Base networks. \n            Transactions are processed through verified smart contracts with minimal fees and fast confirmation times. \n            Always verify recipient addresses before confirming transfers.\n          </RealisticText>\n        </div>\n      </RealisticWastelandCard>\n    </div>\n  );\n};","size_bytes":17801},"client/src/components/mesh-network-protocols.tsx":{"content":"import { useState, useEffect } from 'react';\nimport { \n  RealisticWastelandCard,\n  RealisticText,\n  RealisticButton\n} from \"@/components/realistic-wasteland\";\n\ninterface MeshNode {\n  id: string;\n  name: string;\n  type: 'relay' | 'gateway' | 'terminal' | 'repeater';\n  status: 'online' | 'offline' | 'degraded';\n  location: string;\n  connections: string[];\n  bandwidth: number;\n  latency: number;\n  lastSeen: number;\n  encryption: 'AES-256' | 'RSA-2048' | 'QUANTUM' | 'LEGACY';\n  powerLevel: number;\n  range: number;\n}\n\ninterface NetworkProtocol {\n  id: string;\n  name: string;\n  frequency: string;\n  status: 'active' | 'standby' | 'offline';\n  throughput: string;\n  description: string;\n  security: 'HIGH' | 'MEDIUM' | 'LOW';\n}\n\nconst MESH_NODES: MeshNode[] = [\n  {\n    id: 'node_alpha',\n    name: 'ALPHA RELAY',\n    type: 'gateway',\n    status: 'online',\n    location: 'Sector A-1',\n    connections: ['node_beta', 'node_gamma', 'node_delta'],\n    bandwidth: 850,\n    latency: 45,\n    lastSeen: Date.now(),\n    encryption: 'AES-256',\n    powerLevel: 95,\n    range: 5200\n  },\n  {\n    id: 'node_beta',\n    name: 'BETA TERMINAL',\n    type: 'terminal',\n    status: 'online',\n    location: 'Sector B-3',\n    connections: ['node_alpha', 'node_echo'],\n    bandwidth: 420,\n    latency: 78,\n    lastSeen: Date.now() - 30000,\n    encryption: 'RSA-2048',\n    powerLevel: 72,\n    range: 3800\n  },\n  {\n    id: 'node_gamma',\n    name: 'GAMMA REPEATER',\n    type: 'repeater',\n    status: 'degraded',\n    location: 'Sector C-2',\n    connections: ['node_alpha', 'node_delta'],\n    bandwidth: 180,\n    latency: 120,\n    lastSeen: Date.now() - 120000,\n    encryption: 'LEGACY',\n    powerLevel: 34,\n    range: 2100\n  },\n  {\n    id: 'node_delta',\n    name: 'DELTA GATEWAY',\n    type: 'gateway',\n    status: 'online',\n    location: 'Sector D-4',\n    connections: ['node_alpha', 'node_gamma', 'node_foxtrot'],\n    bandwidth: 720,\n    latency: 52,\n    lastSeen: Date.now() - 15000,\n    encryption: 'QUANTUM',\n    powerLevel: 88,\n    range: 4900\n  },\n  {\n    id: 'node_echo',\n    name: 'ECHO RELAY',\n    type: 'relay',\n    status: 'offline',\n    location: 'Sector E-1',\n    connections: ['node_beta'],\n    bandwidth: 0,\n    latency: 999,\n    lastSeen: Date.now() - 600000,\n    encryption: 'AES-256',\n    powerLevel: 0,\n    range: 0\n  },\n  {\n    id: 'node_foxtrot',\n    name: 'FOXTROT TERMINAL',\n    type: 'terminal',\n    status: 'online',\n    location: 'Sector F-5',\n    connections: ['node_delta'],\n    bandwidth: 320,\n    latency: 95,\n    lastSeen: Date.now() - 45000,\n    encryption: 'RSA-2048',\n    powerLevel: 61,\n    range: 2800\n  }\n];\n\nconst NETWORK_PROTOCOLS: NetworkProtocol[] = [\n  {\n    id: 'bone_net',\n    name: 'BONE NET',\n    frequency: '2.4-5.8 GHz',\n    status: 'active',\n    throughput: '850 kbps',\n    description: 'Primary mesh networking protocol with automatic routing',\n    security: 'HIGH'\n  },\n  {\n    id: 'radio_burst',\n    name: 'RADIO BURST',\n    frequency: '430-440 MHz',\n    status: 'active',\n    throughput: '1.2 kbps',\n    description: 'Emergency broadcast system for critical messages',\n    security: 'MEDIUM'\n  },\n  {\n    id: 'lora_mesh',\n    name: 'LORA MESH',\n    frequency: '902-928 MHz',\n    status: 'standby',\n    throughput: '250 kbps',\n    description: 'Long-range mesh network for remote operations',\n    security: 'HIGH'\n  },\n  {\n    id: 'satellite_uplink',\n    name: 'SATELLITE UPLINK',\n    frequency: '14.0-14.5 GHz',\n    status: 'offline',\n    throughput: '2.5 Mbps',\n    description: 'High-orbit relay network (currently degraded)',\n    security: 'HIGH'\n  }\n];\n\ninterface MeshNetworkManagerProps {\n  className?: string;\n}\n\nexport const MeshNetworkManager = ({ className = \"\" }: MeshNetworkManagerProps) => {\n  const [nodes, setNodes] = useState<MeshNode[]>(MESH_NODES);\n  const [protocols, setProtocols] = useState<NetworkProtocol[]>(NETWORK_PROTOCOLS);\n  const [selectedNode, setSelectedNode] = useState<MeshNode | null>(null);\n  const [isScanning, setIsScanning] = useState(false);\n  const [networkMap, setNetworkMap] = useState<boolean>(false);\n\n  // Simulate network activity\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setNodes(prev => prev.map(node => {\n        const updated = { ...node };\n        \n        // Simulate network fluctuations\n        if (node.status === 'online') {\n          updated.bandwidth += (Math.random() - 0.5) * 50;\n          updated.latency += (Math.random() - 0.5) * 10;\n          updated.powerLevel += (Math.random() - 0.5) * 5;\n          \n          // Keep within realistic bounds\n          updated.bandwidth = Math.max(0, Math.min(1000, updated.bandwidth));\n          updated.latency = Math.max(20, Math.min(500, updated.latency));\n          updated.powerLevel = Math.max(0, Math.min(100, updated.powerLevel));\n          \n          // Random status changes\n          if (Math.random() < 0.02) {\n            updated.status = updated.powerLevel < 30 ? 'degraded' : 'online';\n          }\n        }\n        \n        return updated;\n      }));\n    }, 5000);\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const getNodeStatusColor = (status: string): string => {\n    switch (status) {\n      case 'online': return 'text-emerald-400';\n      case 'degraded': return 'text-yellow-400';\n      case 'offline': return 'text-red-400';\n      default: return 'text-neutral-400';\n    }\n  };\n\n  const getProtocolStatusColor = (status: string): string => {\n    switch (status) {\n      case 'active': return 'text-emerald-400';\n      case 'standby': return 'text-yellow-400';\n      case 'offline': return 'text-red-400';\n      default: return 'text-neutral-400';\n    }\n  };\n\n  const getSecurityColor = (security: string): string => {\n    switch (security) {\n      case 'HIGH': return 'text-emerald-400';\n      case 'MEDIUM': return 'text-yellow-400';\n      case 'LOW': return 'text-red-400';\n      default: return 'text-neutral-400';\n    }\n  };\n\n  const scanNetwork = () => {\n    setIsScanning(true);\n    setTimeout(() => {\n      setNodes(prev => prev.map(node => ({\n        ...node,\n        lastSeen: node.status !== 'offline' ? Date.now() : node.lastSeen\n      })));\n      setIsScanning(false);\n    }, 3000);\n  };\n\n  const toggleProtocol = (protocolId: string) => {\n    setProtocols(prev => prev.map(protocol => {\n      if (protocol.id === protocolId) {\n        const newStatus = protocol.status === 'active' ? 'standby' : 'active';\n        return { ...protocol, status: newStatus };\n      }\n      return protocol;\n    }));\n  };\n\n  const repairNode = (nodeId: string) => {\n    setNodes(prev => prev.map(node => {\n      if (node.id === nodeId) {\n        return {\n          ...node,\n          status: 'online',\n          powerLevel: Math.min(100, node.powerLevel + 50),\n          bandwidth: Math.min(1000, node.bandwidth + 200),\n          latency: Math.max(20, node.latency - 30),\n          lastSeen: Date.now()\n        };\n      }\n      return node;\n    }));\n  };\n\n  const getTimeSince = (timestamp: number): string => {\n    const diff = Date.now() - timestamp;\n    const seconds = Math.floor(diff / 1000);\n    if (seconds < 60) return `${seconds}s ago`;\n    const minutes = Math.floor(seconds / 60);\n    if (minutes < 60) return `${minutes}m ago`;\n    const hours = Math.floor(minutes / 60);\n    return `${hours}h ago`;\n  };\n\n  const onlineNodes = nodes.filter(n => n.status === 'online').length;\n  const totalBandwidth = nodes.filter(n => n.status === 'online').reduce((sum, n) => sum + n.bandwidth, 0);\n  const averageLatency = nodes.filter(n => n.status === 'online').reduce((sum, n) => sum + n.latency, 0) / onlineNodes || 0;\n\n  return (\n    <div className={`space-y-6 ${className}`}>\n      <RealisticWastelandCard variant=\"dark\" className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <div>\n            <RealisticText variant=\"title\" className=\"text-neutral-100\">\n              Mesh Network Protocols\n            </RealisticText>\n            <RealisticText variant=\"caption\" className=\"text-neutral-500\">\n              Decentralized Communication Infrastructure\n            </RealisticText>\n          </div>\n          <div className=\"flex gap-3\">\n            <RealisticButton\n              variant=\"secondary\"\n              size=\"sm\"\n              onClick={() => setNetworkMap(!networkMap)}\n            >\n              {networkMap ? 'Node List' : 'Network Map'}\n            </RealisticButton>\n            <RealisticButton\n              variant=\"primary\"\n              size=\"sm\"\n              onClick={scanNetwork}\n              disabled={isScanning}\n            >\n              {isScanning ? 'Scanning...' : 'Network Scan'}\n            </RealisticButton>\n          </div>\n        </div>\n\n        {/* Network Status */}\n        <div className=\"grid grid-cols-3 gap-4 mb-6\">\n          <div className=\"bg-neutral-900 border border-neutral-700 p-4 text-center\">\n            <div className=\"text-xl font-bold text-emerald-400\">{onlineNodes}/{nodes.length}</div>\n            <div className=\"text-xs text-neutral-500\">Nodes Online</div>\n          </div>\n          <div className=\"bg-neutral-900 border border-neutral-700 p-4 text-center\">\n            <div className=\"text-xl font-bold text-amber-400\">{Math.floor(totalBandwidth)}</div>\n            <div className=\"text-xs text-neutral-500\">Total Bandwidth (kbps)</div>\n          </div>\n          <div className=\"bg-neutral-900 border border-neutral-700 p-4 text-center\">\n            <div className=\"text-xl font-bold text-blue-400\">{Math.floor(averageLatency)}</div>\n            <div className=\"text-xs text-neutral-500\">Avg Latency (ms)</div>\n          </div>\n        </div>\n\n        {/* Network Protocols */}\n        <div className=\"mb-6\">\n          <RealisticText variant=\"subtitle\" className=\"mb-3\">Active Protocols</RealisticText>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n            {protocols.map((protocol) => (\n              <div\n                key={protocol.id}\n                className=\"bg-neutral-900 border border-neutral-700 p-3\"\n              >\n                <div className=\"flex justify-between items-start mb-2\">\n                  <div>\n                    <div className=\"font-semibold text-sm text-neutral-100\">{protocol.name}</div>\n                    <div className=\"text-xs text-neutral-400\">{protocol.frequency}</div>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className={`text-xs font-bold ${getProtocolStatusColor(protocol.status)}`}>\n                      {protocol.status.toUpperCase()}\n                    </div>\n                    <div className={`text-xs ${getSecurityColor(protocol.security)}`}>\n                      {protocol.security}\n                    </div>\n                  </div>\n                </div>\n                <div className=\"text-xs text-neutral-500 mb-2\">{protocol.description}</div>\n                <div className=\"flex justify-between items-center\">\n                  <span className=\"text-xs text-neutral-400\">{protocol.throughput}</span>\n                  <RealisticButton\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => toggleProtocol(protocol.id)}\n                    className=\"text-xs px-2 py-1\"\n                  >\n                    {protocol.status === 'active' ? 'Disable' : 'Enable'}\n                  </RealisticButton>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {/* Network Nodes */}\n        <div>\n          <RealisticText variant=\"subtitle\" className=\"mb-3\">Mesh Nodes</RealisticText>\n          <div className=\"space-y-3\">\n            {nodes.map((node) => (\n              <div\n                key={node.id}\n                className={`bg-neutral-900 border p-4 cursor-pointer transition-colors ${\n                  selectedNode?.id === node.id \n                    ? 'border-amber-600 bg-amber-900/10' \n                    : 'border-neutral-700 hover:border-neutral-600'\n                }`}\n                onClick={() => setSelectedNode(node)}\n              >\n                <div className=\"flex justify-between items-start mb-3\">\n                  <div>\n                    <div className=\"font-semibold text-sm text-neutral-100\">{node.name}</div>\n                    <div className=\"text-xs text-neutral-400 uppercase\">{node.type} • {node.location}</div>\n                  </div>\n                  <div className=\"text-right\">\n                    <div className={`text-xs font-bold ${getNodeStatusColor(node.status)}`}>\n                      {node.status.toUpperCase()}\n                    </div>\n                    <div className=\"text-xs text-neutral-500\">{node.encryption}</div>\n                  </div>\n                </div>\n\n                <div className=\"grid grid-cols-4 gap-4 text-xs\">\n                  <div>\n                    <div className=\"text-neutral-400\">Bandwidth</div>\n                    <div className=\"text-neutral-100 font-mono\">{Math.floor(node.bandwidth)} kbps</div>\n                  </div>\n                  <div>\n                    <div className=\"text-neutral-400\">Latency</div>\n                    <div className=\"text-neutral-100 font-mono\">{Math.floor(node.latency)} ms</div>\n                  </div>\n                  <div>\n                    <div className=\"text-neutral-400\">Power</div>\n                    <div className=\"text-neutral-100 font-mono\">{Math.floor(node.powerLevel)}%</div>\n                  </div>\n                  <div>\n                    <div className=\"text-neutral-400\">Range</div>\n                    <div className=\"text-neutral-100 font-mono\">{node.range}m</div>\n                  </div>\n                </div>\n\n                <div className=\"flex justify-between items-center mt-3 pt-2 border-t border-neutral-700\">\n                  <div className=\"text-xs text-neutral-500\">\n                    Connections: {node.connections.length} • Last seen: {getTimeSince(node.lastSeen)}\n                  </div>\n                  {node.status !== 'online' && (\n                    <RealisticButton\n                      variant=\"primary\"\n                      size=\"sm\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        repairNode(node.id);\n                      }}\n                      className=\"text-xs px-3 py-1\"\n                    >\n                      Repair\n                    </RealisticButton>\n                  )}\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        {selectedNode && (\n          <div className=\"mt-6 p-4 bg-black border border-neutral-700\">\n            <div className=\"flex justify-between items-center mb-4\">\n              <RealisticText variant=\"subtitle\" className=\"text-neutral-100\">\n                {selectedNode.name} - Node Details\n              </RealisticText>\n              <RealisticButton \n                variant=\"ghost\" \n                size=\"sm\" \n                onClick={() => setSelectedNode(null)}\n              >\n                Close\n              </RealisticButton>\n            </div>\n\n            <div className=\"grid grid-cols-2 gap-4 text-xs\">\n              <div>\n                <div className=\"text-neutral-400 mb-1\">Connected Nodes:</div>\n                <div className=\"text-neutral-100 space-y-1\">\n                  {selectedNode.connections.map(conn => (\n                    <div key={conn} className=\"font-mono\">{conn}</div>\n                  ))}\n                </div>\n              </div>\n              <div>\n                <div className=\"text-neutral-400 mb-1\">Technical Specs:</div>\n                <div className=\"text-neutral-100 space-y-1\">\n                  <div>Type: {selectedNode.type.toUpperCase()}</div>\n                  <div>Encryption: {selectedNode.encryption}</div>\n                  <div>Range: {selectedNode.range}m</div>\n                  <div>Location: {selectedNode.location}</div>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        <div className=\"mt-6 p-4 bg-neutral-900 border border-neutral-700\">\n          <RealisticText variant=\"caption\" className=\"text-neutral-400 leading-relaxed\">\n            Mesh network protocols enable decentralized communication independent of traditional infrastructure. \n            Each node acts as both client and relay, creating redundant pathways for critical data transmission \n            including blockchain transactions, strategic communications, and real-time coordination.\n          </RealisticText>\n        </div>\n      </RealisticWastelandCard>\n    </div>\n  );\n};","size_bytes":16637}}}