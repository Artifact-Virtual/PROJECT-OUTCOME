/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace OCSH {
  export type ChainLinkStruct = {
    prevTokenId: BigNumberish;
    dataHash: BytesLike;
    timestamp: BigNumberish;
  };

  export type ChainLinkStructOutput = [
    prevTokenId: bigint,
    dataHash: string,
    timestamp: bigint
  ] & { prevTokenId: bigint; dataHash: string; timestamp: bigint };
}

export interface OCSHInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ACHIEVEMENT_ALLIANCE_BUILDER"
      | "ACHIEVEMENT_FIRST_WIN"
      | "ACHIEVEMENT_TERRITORY_MASTER"
      | "ALLIANCE_LEADER_ROLE"
      | "BASE_MSG_FEE"
      | "DEFAULT_ADMIN_ROLE"
      | "GAME_ADMIN_ROLE"
      | "MAX_MSG_LEN"
      | "MSG_COOLDOWN_BLOCKS"
      | "NUM_TERRITORIES"
      | "SBT_ROLE_COMMANDER"
      | "SBT_ROLE_TRADER"
      | "SBT_ROLE_VETERAN"
      | "acceptChallenge"
      | "acceptTrade"
      | "allianceOf"
      | "alliances"
      | "approve"
      | "balanceOf"
      | "calculateBattlePower"
      | "chain"
      | "challenges"
      | "claimTerritory"
      | "createAlliance"
      | "getApproved"
      | "getChain"
      | "getDarknetGuide"
      | "getPlayerStats"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "identitySBT"
      | "isApprovedForAll"
      | "issueChallenge"
      | "issueGameRole"
      | "joinAlliance"
      | "lastMsgBlock"
      | "levels"
      | "messages"
      | "mint"
      | "msgCount"
      | "name"
      | "nextAllianceId"
      | "nextChallengeId"
      | "nextTokenId"
      | "owner"
      | "ownerOf"
      | "proposeTrade"
      | "renounceOwnership"
      | "renounceRole"
      | "revokeRole"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "sendMessage"
      | "setApprovalForAll"
      | "supportsInterface"
      | "symbol"
      | "territories"
      | "tokenByIndex"
      | "tokenOfOwnerByIndex"
      | "tokenURI"
      | "totalSupply"
      | "tradeProposals"
      | "transferFrom"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AllianceCreated"
      | "AllianceJoined"
      | "Approval"
      | "ApprovalForAll"
      | "ChallengeIssued"
      | "ChallengeResolved"
      | "LeveledUp"
      | "MessageSent"
      | "Minted"
      | "OwnershipTransferred"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "TerritoryClaimed"
      | "TradeAccepted"
      | "TradeProposed"
      | "Transfer"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ACHIEVEMENT_ALLIANCE_BUILDER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ACHIEVEMENT_FIRST_WIN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ACHIEVEMENT_TERRITORY_MASTER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ALLIANCE_LEADER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BASE_MSG_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GAME_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_MSG_LEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MSG_COOLDOWN_BLOCKS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "NUM_TERRITORIES",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SBT_ROLE_COMMANDER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SBT_ROLE_TRADER",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SBT_ROLE_VETERAN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptChallenge",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "acceptTrade",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allianceOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "alliances",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateBattlePower",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "chain", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "challenges",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimTerritory",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createAlliance",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getChain",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDarknetGuide",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerStats",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "identitySBT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "issueChallenge",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "issueGameRole",
    values: [AddressLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "joinAlliance",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastMsgBlock",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "levels",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "messages",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "msgCount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nextAllianceId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextChallengeId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextTokenId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposeTrade",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sendMessage",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "territories",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenOfOwnerByIndex",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tradeProposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "ACHIEVEMENT_ALLIANCE_BUILDER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ACHIEVEMENT_FIRST_WIN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ACHIEVEMENT_TERRITORY_MASTER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ALLIANCE_LEADER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "BASE_MSG_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GAME_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_MSG_LEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MSG_COOLDOWN_BLOCKS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "NUM_TERRITORIES",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SBT_ROLE_COMMANDER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SBT_ROLE_TRADER",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SBT_ROLE_VETERAN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptChallenge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allianceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "alliances", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateBattlePower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "chain", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "challenges", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimTerritory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAlliance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getChain", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDarknetGuide",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "identitySBT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "issueChallenge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "issueGameRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "joinAlliance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastMsgBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "levels", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "messages", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "msgCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "nextAllianceId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextChallengeId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextTokenId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposeTrade",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sendMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "territories",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenOfOwnerByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tradeProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace AllianceCreatedEvent {
  export type InputTuple = [
    allianceId: BigNumberish,
    members: BigNumberish[],
    leader: AddressLike
  ];
  export type OutputTuple = [
    allianceId: bigint,
    members: bigint[],
    leader: string
  ];
  export interface OutputObject {
    allianceId: bigint;
    members: bigint[];
    leader: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace AllianceJoinedEvent {
  export type InputTuple = [allianceId: BigNumberish, tokenId: BigNumberish];
  export type OutputTuple = [allianceId: bigint, tokenId: bigint];
  export interface OutputObject {
    allianceId: bigint;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChallengeIssuedEvent {
  export type InputTuple = [
    challengeId: BigNumberish,
    challenger: BigNumberish,
    opponent: BigNumberish
  ];
  export type OutputTuple = [
    challengeId: bigint,
    challenger: bigint,
    opponent: bigint
  ];
  export interface OutputObject {
    challengeId: bigint;
    challenger: bigint;
    opponent: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ChallengeResolvedEvent {
  export type InputTuple = [challengeId: BigNumberish, winner: AddressLike];
  export type OutputTuple = [challengeId: bigint, winner: string];
  export interface OutputObject {
    challengeId: bigint;
    winner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LeveledUpEvent {
  export type InputTuple = [tokenId: BigNumberish, newLevel: BigNumberish];
  export type OutputTuple = [tokenId: bigint, newLevel: bigint];
  export interface OutputObject {
    tokenId: bigint;
    newLevel: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MessageSentEvent {
  export type InputTuple = [
    tokenId: BigNumberish,
    from: AddressLike,
    textHash: BytesLike,
    fee: BigNumberish
  ];
  export type OutputTuple = [
    tokenId: bigint,
    from: string,
    textHash: string,
    fee: bigint
  ];
  export interface OutputObject {
    tokenId: bigint;
    from: string;
    textHash: string;
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MintedEvent {
  export type InputTuple = [
    to: AddressLike,
    tokenId: BigNumberish,
    prevTokenId: BigNumberish,
    dataHash: BytesLike
  ];
  export type OutputTuple = [
    to: string,
    tokenId: bigint,
    prevTokenId: bigint,
    dataHash: string
  ];
  export interface OutputObject {
    to: string;
    tokenId: bigint;
    prevTokenId: bigint;
    dataHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TerritoryClaimedEvent {
  export type InputTuple = [
    territoryId: BigNumberish,
    tokenId: BigNumberish,
    allianceId: BigNumberish
  ];
  export type OutputTuple = [
    territoryId: bigint,
    tokenId: bigint,
    allianceId: bigint
  ];
  export interface OutputObject {
    territoryId: bigint;
    tokenId: bigint;
    allianceId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TradeAcceptedEvent {
  export type InputTuple = [fromToken: BigNumberish, toToken: BigNumberish];
  export type OutputTuple = [fromToken: bigint, toToken: bigint];
  export interface OutputObject {
    fromToken: bigint;
    toToken: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TradeProposedEvent {
  export type InputTuple = [fromToken: BigNumberish, toToken: BigNumberish];
  export type OutputTuple = [fromToken: bigint, toToken: bigint];
  export interface OutputObject {
    fromToken: bigint;
    toToken: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface OCSH extends BaseContract {
  connect(runner?: ContractRunner | null): OCSH;
  waitForDeployment(): Promise<this>;

  interface: OCSHInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ACHIEVEMENT_ALLIANCE_BUILDER: TypedContractMethod<[], [string], "view">;

  ACHIEVEMENT_FIRST_WIN: TypedContractMethod<[], [string], "view">;

  ACHIEVEMENT_TERRITORY_MASTER: TypedContractMethod<[], [string], "view">;

  ALLIANCE_LEADER_ROLE: TypedContractMethod<[], [string], "view">;

  BASE_MSG_FEE: TypedContractMethod<[], [bigint], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  GAME_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  MAX_MSG_LEN: TypedContractMethod<[], [bigint], "view">;

  MSG_COOLDOWN_BLOCKS: TypedContractMethod<[], [bigint], "view">;

  NUM_TERRITORIES: TypedContractMethod<[], [bigint], "view">;

  SBT_ROLE_COMMANDER: TypedContractMethod<[], [string], "view">;

  SBT_ROLE_TRADER: TypedContractMethod<[], [string], "view">;

  SBT_ROLE_VETERAN: TypedContractMethod<[], [string], "view">;

  acceptChallenge: TypedContractMethod<
    [challengeId: BigNumberish],
    [void],
    "nonpayable"
  >;

  acceptTrade: TypedContractMethod<
    [fromToken: BigNumberish, toToken: BigNumberish],
    [void],
    "nonpayable"
  >;

  allianceOf: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  alliances: TypedContractMethod<
    [arg0: BigNumberish],
    [[boolean, string] & { exists: boolean; leader: string }],
    "view"
  >;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  calculateBattlePower: TypedContractMethod<
    [tokenId: BigNumberish],
    [bigint],
    "view"
  >;

  chain: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint] & {
        prevTokenId: bigint;
        dataHash: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  challenges: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, string, bigint] & {
        challenger: bigint;
        opponent: bigint;
        status: bigint;
        winner: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  claimTerritory: TypedContractMethod<
    [territoryId: BigNumberish, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  createAlliance: TypedContractMethod<
    [memberTokenIds: BigNumberish[]],
    [bigint],
    "nonpayable"
  >;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getChain: TypedContractMethod<
    [tokenId: BigNumberish, depth: BigNumberish],
    [OCSH.ChainLinkStructOutput[]],
    "view"
  >;

  getDarknetGuide: TypedContractMethod<[], [[string, string, string]], "view">;

  getPlayerStats: TypedContractMethod<
    [player: AddressLike],
    [
      [bigint, bigint, boolean, boolean, boolean, bigint[]] & {
        reputation: bigint;
        ownedTerritories: bigint;
        isVeteran: boolean;
        isCommander: boolean;
        isTrader: boolean;
        achievements: bigint[];
      }
    ],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  identitySBT: TypedContractMethod<[], [string], "view">;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  issueChallenge: TypedContractMethod<
    [challenger: BigNumberish, opponent: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  issueGameRole: TypedContractMethod<
    [player: AddressLike, role: BytesLike, uid: BytesLike],
    [void],
    "nonpayable"
  >;

  joinAlliance: TypedContractMethod<
    [allianceId: BigNumberish, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  lastMsgBlock: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  levels: TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, bigint] & { xp: bigint; level: bigint }],
    "view"
  >;

  messages: TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [string, string, bigint] & {
        from: string;
        textHash: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  mint: TypedContractMethod<
    [to: AddressLike, customData: BytesLike],
    [void],
    "nonpayable"
  >;

  msgCount: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  name: TypedContractMethod<[], [string], "view">;

  nextAllianceId: TypedContractMethod<[], [bigint], "view">;

  nextChallengeId: TypedContractMethod<[], [bigint], "view">;

  nextTokenId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  proposeTrade: TypedContractMethod<
    [fromToken: BigNumberish, toToken: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  sendMessage: TypedContractMethod<
    [tokenId: BigNumberish, text: string],
    [void],
    "payable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  territories: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        ownerTokenId: bigint;
        allianceId: bigint;
        lastClaimed: bigint;
      }
    ],
    "view"
  >;

  tokenByIndex: TypedContractMethod<[index: BigNumberish], [bigint], "view">;

  tokenOfOwnerByIndex: TypedContractMethod<
    [owner: AddressLike, index: BigNumberish],
    [bigint],
    "view"
  >;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  tradeProposals: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ACHIEVEMENT_ALLIANCE_BUILDER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ACHIEVEMENT_FIRST_WIN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ACHIEVEMENT_TERRITORY_MASTER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ALLIANCE_LEADER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "BASE_MSG_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "GAME_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MAX_MSG_LEN"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MSG_COOLDOWN_BLOCKS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "NUM_TERRITORIES"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SBT_ROLE_COMMANDER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "SBT_ROLE_TRADER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "SBT_ROLE_VETERAN"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "acceptChallenge"
  ): TypedContractMethod<[challengeId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "acceptTrade"
  ): TypedContractMethod<
    [fromToken: BigNumberish, toToken: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "allianceOf"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "alliances"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[boolean, string] & { exists: boolean; leader: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateBattlePower"
  ): TypedContractMethod<[tokenId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "chain"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint] & {
        prevTokenId: bigint;
        dataHash: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "challenges"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, string, bigint] & {
        challenger: bigint;
        opponent: bigint;
        status: bigint;
        winner: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "claimTerritory"
  ): TypedContractMethod<
    [territoryId: BigNumberish, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createAlliance"
  ): TypedContractMethod<
    [memberTokenIds: BigNumberish[]],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getChain"
  ): TypedContractMethod<
    [tokenId: BigNumberish, depth: BigNumberish],
    [OCSH.ChainLinkStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDarknetGuide"
  ): TypedContractMethod<[], [[string, string, string]], "view">;
  getFunction(
    nameOrSignature: "getPlayerStats"
  ): TypedContractMethod<
    [player: AddressLike],
    [
      [bigint, bigint, boolean, boolean, boolean, bigint[]] & {
        reputation: bigint;
        ownedTerritories: bigint;
        isVeteran: boolean;
        isCommander: boolean;
        isTrader: boolean;
        achievements: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "identitySBT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "issueChallenge"
  ): TypedContractMethod<
    [challenger: BigNumberish, opponent: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "issueGameRole"
  ): TypedContractMethod<
    [player: AddressLike, role: BytesLike, uid: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "joinAlliance"
  ): TypedContractMethod<
    [allianceId: BigNumberish, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "lastMsgBlock"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "levels"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[bigint, bigint] & { xp: bigint; level: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "messages"
  ): TypedContractMethod<
    [arg0: BigNumberish, arg1: BigNumberish],
    [
      [string, string, bigint] & {
        from: string;
        textHash: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "mint"
  ): TypedContractMethod<
    [to: AddressLike, customData: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "msgCount"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nextAllianceId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nextChallengeId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nextTokenId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "proposeTrade"
  ): TypedContractMethod<
    [fromToken: BigNumberish, toToken: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "sendMessage"
  ): TypedContractMethod<
    [tokenId: BigNumberish, text: string],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "territories"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        ownerTokenId: bigint;
        allianceId: bigint;
        lastClaimed: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "tokenByIndex"
  ): TypedContractMethod<[index: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenOfOwnerByIndex"
  ): TypedContractMethod<
    [owner: AddressLike, index: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tradeProposals"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "AllianceCreated"
  ): TypedContractEvent<
    AllianceCreatedEvent.InputTuple,
    AllianceCreatedEvent.OutputTuple,
    AllianceCreatedEvent.OutputObject
  >;
  getEvent(
    key: "AllianceJoined"
  ): TypedContractEvent<
    AllianceJoinedEvent.InputTuple,
    AllianceJoinedEvent.OutputTuple,
    AllianceJoinedEvent.OutputObject
  >;
  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "ChallengeIssued"
  ): TypedContractEvent<
    ChallengeIssuedEvent.InputTuple,
    ChallengeIssuedEvent.OutputTuple,
    ChallengeIssuedEvent.OutputObject
  >;
  getEvent(
    key: "ChallengeResolved"
  ): TypedContractEvent<
    ChallengeResolvedEvent.InputTuple,
    ChallengeResolvedEvent.OutputTuple,
    ChallengeResolvedEvent.OutputObject
  >;
  getEvent(
    key: "LeveledUp"
  ): TypedContractEvent<
    LeveledUpEvent.InputTuple,
    LeveledUpEvent.OutputTuple,
    LeveledUpEvent.OutputObject
  >;
  getEvent(
    key: "MessageSent"
  ): TypedContractEvent<
    MessageSentEvent.InputTuple,
    MessageSentEvent.OutputTuple,
    MessageSentEvent.OutputObject
  >;
  getEvent(
    key: "Minted"
  ): TypedContractEvent<
    MintedEvent.InputTuple,
    MintedEvent.OutputTuple,
    MintedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "TerritoryClaimed"
  ): TypedContractEvent<
    TerritoryClaimedEvent.InputTuple,
    TerritoryClaimedEvent.OutputTuple,
    TerritoryClaimedEvent.OutputObject
  >;
  getEvent(
    key: "TradeAccepted"
  ): TypedContractEvent<
    TradeAcceptedEvent.InputTuple,
    TradeAcceptedEvent.OutputTuple,
    TradeAcceptedEvent.OutputObject
  >;
  getEvent(
    key: "TradeProposed"
  ): TypedContractEvent<
    TradeProposedEvent.InputTuple,
    TradeProposedEvent.OutputTuple,
    TradeProposedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;

  filters: {
    "AllianceCreated(uint40,uint40[],address)": TypedContractEvent<
      AllianceCreatedEvent.InputTuple,
      AllianceCreatedEvent.OutputTuple,
      AllianceCreatedEvent.OutputObject
    >;
    AllianceCreated: TypedContractEvent<
      AllianceCreatedEvent.InputTuple,
      AllianceCreatedEvent.OutputTuple,
      AllianceCreatedEvent.OutputObject
    >;

    "AllianceJoined(uint40,uint40)": TypedContractEvent<
      AllianceJoinedEvent.InputTuple,
      AllianceJoinedEvent.OutputTuple,
      AllianceJoinedEvent.OutputObject
    >;
    AllianceJoined: TypedContractEvent<
      AllianceJoinedEvent.InputTuple,
      AllianceJoinedEvent.OutputTuple,
      AllianceJoinedEvent.OutputObject
    >;

    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "ChallengeIssued(uint40,uint40,uint40)": TypedContractEvent<
      ChallengeIssuedEvent.InputTuple,
      ChallengeIssuedEvent.OutputTuple,
      ChallengeIssuedEvent.OutputObject
    >;
    ChallengeIssued: TypedContractEvent<
      ChallengeIssuedEvent.InputTuple,
      ChallengeIssuedEvent.OutputTuple,
      ChallengeIssuedEvent.OutputObject
    >;

    "ChallengeResolved(uint40,address)": TypedContractEvent<
      ChallengeResolvedEvent.InputTuple,
      ChallengeResolvedEvent.OutputTuple,
      ChallengeResolvedEvent.OutputObject
    >;
    ChallengeResolved: TypedContractEvent<
      ChallengeResolvedEvent.InputTuple,
      ChallengeResolvedEvent.OutputTuple,
      ChallengeResolvedEvent.OutputObject
    >;

    "LeveledUp(uint40,uint8)": TypedContractEvent<
      LeveledUpEvent.InputTuple,
      LeveledUpEvent.OutputTuple,
      LeveledUpEvent.OutputObject
    >;
    LeveledUp: TypedContractEvent<
      LeveledUpEvent.InputTuple,
      LeveledUpEvent.OutputTuple,
      LeveledUpEvent.OutputObject
    >;

    "MessageSent(uint40,address,bytes32,uint256)": TypedContractEvent<
      MessageSentEvent.InputTuple,
      MessageSentEvent.OutputTuple,
      MessageSentEvent.OutputObject
    >;
    MessageSent: TypedContractEvent<
      MessageSentEvent.InputTuple,
      MessageSentEvent.OutputTuple,
      MessageSentEvent.OutputObject
    >;

    "Minted(address,uint40,uint40,bytes32)": TypedContractEvent<
      MintedEvent.InputTuple,
      MintedEvent.OutputTuple,
      MintedEvent.OutputObject
    >;
    Minted: TypedContractEvent<
      MintedEvent.InputTuple,
      MintedEvent.OutputTuple,
      MintedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "TerritoryClaimed(uint40,uint40,uint40)": TypedContractEvent<
      TerritoryClaimedEvent.InputTuple,
      TerritoryClaimedEvent.OutputTuple,
      TerritoryClaimedEvent.OutputObject
    >;
    TerritoryClaimed: TypedContractEvent<
      TerritoryClaimedEvent.InputTuple,
      TerritoryClaimedEvent.OutputTuple,
      TerritoryClaimedEvent.OutputObject
    >;

    "TradeAccepted(uint40,uint40)": TypedContractEvent<
      TradeAcceptedEvent.InputTuple,
      TradeAcceptedEvent.OutputTuple,
      TradeAcceptedEvent.OutputObject
    >;
    TradeAccepted: TypedContractEvent<
      TradeAcceptedEvent.InputTuple,
      TradeAcceptedEvent.OutputTuple,
      TradeAcceptedEvent.OutputObject
    >;

    "TradeProposed(uint40,uint40)": TypedContractEvent<
      TradeProposedEvent.InputTuple,
      TradeProposedEvent.OutputTuple,
      TradeProposedEvent.OutputObject
    >;
    TradeProposed: TypedContractEvent<
      TradeProposedEvent.InputTuple,
      TradeProposedEvent.OutputTuple,
      TradeProposedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
  };
}
