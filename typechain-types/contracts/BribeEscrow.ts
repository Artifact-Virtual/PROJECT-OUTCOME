/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface BribeEscrowInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptBribe"
      | "cancelBribe"
      | "createErc20Bribe"
      | "createErc721Bribe"
      | "createEthBribe"
      | "declineBribe"
      | "nextOfferId"
      | "offers"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BribeAccepted"
      | "BribeCanceled"
      | "BribeCreated"
      | "BribeDeclined"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptBribe",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelBribe",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createErc20Bribe",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createErc721Bribe",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createEthBribe",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "declineBribe",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "nextOfferId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "offers",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptBribe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelBribe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createErc20Bribe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createErc721Bribe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createEthBribe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "declineBribe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "nextOfferId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "offers", data: BytesLike): Result;
}

export namespace BribeAcceptedEvent {
  export type InputTuple = [offerId: BigNumberish];
  export type OutputTuple = [offerId: bigint];
  export interface OutputObject {
    offerId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BribeCanceledEvent {
  export type InputTuple = [offerId: BigNumberish];
  export type OutputTuple = [offerId: bigint];
  export interface OutputObject {
    offerId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BribeCreatedEvent {
  export type InputTuple = [
    offerId: BigNumberish,
    sender: AddressLike,
    recipient: AddressLike,
    assetType: BigNumberish,
    token: AddressLike,
    amount: BigNumberish,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [
    offerId: bigint,
    sender: string,
    recipient: string,
    assetType: bigint,
    token: string,
    amount: bigint,
    tokenId: bigint
  ];
  export interface OutputObject {
    offerId: bigint;
    sender: string;
    recipient: string;
    assetType: bigint;
    token: string;
    amount: bigint;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BribeDeclinedEvent {
  export type InputTuple = [offerId: BigNumberish];
  export type OutputTuple = [offerId: bigint];
  export interface OutputObject {
    offerId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BribeEscrow extends BaseContract {
  connect(runner?: ContractRunner | null): BribeEscrow;
  waitForDeployment(): Promise<this>;

  interface: BribeEscrowInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptBribe: TypedContractMethod<
    [offerId: BigNumberish],
    [void],
    "nonpayable"
  >;

  cancelBribe: TypedContractMethod<
    [offerId: BigNumberish],
    [void],
    "nonpayable"
  >;

  createErc20Bribe: TypedContractMethod<
    [recipient: AddressLike, token: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  createErc721Bribe: TypedContractMethod<
    [recipient: AddressLike, token: AddressLike, tokenId: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  createEthBribe: TypedContractMethod<
    [recipient: AddressLike],
    [bigint],
    "payable"
  >;

  declineBribe: TypedContractMethod<
    [offerId: BigNumberish],
    [void],
    "nonpayable"
  >;

  nextOfferId: TypedContractMethod<[], [bigint], "view">;

  offers: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, string, bigint, bigint, boolean] & {
        sender: string;
        recipient: string;
        assetType: bigint;
        token: string;
        amount: bigint;
        tokenId: bigint;
        active: boolean;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptBribe"
  ): TypedContractMethod<[offerId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "cancelBribe"
  ): TypedContractMethod<[offerId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "createErc20Bribe"
  ): TypedContractMethod<
    [recipient: AddressLike, token: AddressLike, amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createErc721Bribe"
  ): TypedContractMethod<
    [recipient: AddressLike, token: AddressLike, tokenId: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createEthBribe"
  ): TypedContractMethod<[recipient: AddressLike], [bigint], "payable">;
  getFunction(
    nameOrSignature: "declineBribe"
  ): TypedContractMethod<[offerId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "nextOfferId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "offers"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, string, bigint, bigint, boolean] & {
        sender: string;
        recipient: string;
        assetType: bigint;
        token: string;
        amount: bigint;
        tokenId: bigint;
        active: boolean;
      }
    ],
    "view"
  >;

  getEvent(
    key: "BribeAccepted"
  ): TypedContractEvent<
    BribeAcceptedEvent.InputTuple,
    BribeAcceptedEvent.OutputTuple,
    BribeAcceptedEvent.OutputObject
  >;
  getEvent(
    key: "BribeCanceled"
  ): TypedContractEvent<
    BribeCanceledEvent.InputTuple,
    BribeCanceledEvent.OutputTuple,
    BribeCanceledEvent.OutputObject
  >;
  getEvent(
    key: "BribeCreated"
  ): TypedContractEvent<
    BribeCreatedEvent.InputTuple,
    BribeCreatedEvent.OutputTuple,
    BribeCreatedEvent.OutputObject
  >;
  getEvent(
    key: "BribeDeclined"
  ): TypedContractEvent<
    BribeDeclinedEvent.InputTuple,
    BribeDeclinedEvent.OutputTuple,
    BribeDeclinedEvent.OutputObject
  >;

  filters: {
    "BribeAccepted(uint256)": TypedContractEvent<
      BribeAcceptedEvent.InputTuple,
      BribeAcceptedEvent.OutputTuple,
      BribeAcceptedEvent.OutputObject
    >;
    BribeAccepted: TypedContractEvent<
      BribeAcceptedEvent.InputTuple,
      BribeAcceptedEvent.OutputTuple,
      BribeAcceptedEvent.OutputObject
    >;

    "BribeCanceled(uint256)": TypedContractEvent<
      BribeCanceledEvent.InputTuple,
      BribeCanceledEvent.OutputTuple,
      BribeCanceledEvent.OutputObject
    >;
    BribeCanceled: TypedContractEvent<
      BribeCanceledEvent.InputTuple,
      BribeCanceledEvent.OutputTuple,
      BribeCanceledEvent.OutputObject
    >;

    "BribeCreated(uint256,address,address,uint8,address,uint256,uint256)": TypedContractEvent<
      BribeCreatedEvent.InputTuple,
      BribeCreatedEvent.OutputTuple,
      BribeCreatedEvent.OutputObject
    >;
    BribeCreated: TypedContractEvent<
      BribeCreatedEvent.InputTuple,
      BribeCreatedEvent.OutputTuple,
      BribeCreatedEvent.OutputObject
    >;

    "BribeDeclined(uint256)": TypedContractEvent<
      BribeDeclinedEvent.InputTuple,
      BribeDeclinedEvent.OutputTuple,
      BribeDeclinedEvent.OutputObject
    >;
    BribeDeclined: TypedContractEvent<
      BribeDeclinedEvent.InputTuple,
      BribeDeclinedEvent.OutputTuple,
      BribeDeclinedEvent.OutputObject
    >;
  };
}
