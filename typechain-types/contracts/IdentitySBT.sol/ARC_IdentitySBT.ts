/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ARC_IdentitySBTInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "ISSUER_ROLE"
      | "LAYER_GRANTS"
      | "LAYER_MASK_ALL"
      | "LAYER_PARAMS"
      | "LAYER_RWA_CARBON"
      | "LAYER_RWA_ENERGY"
      | "LAYER_SBT"
      | "LAYER_TOKEN"
      | "LAYER_TREASURY"
      | "ROLE_AUDITOR"
      | "ROLE_CODE"
      | "ROLE_GOV"
      | "ROLE_ORACLE_OP"
      | "ROLE_RWA_CURATOR"
      | "ROLE_VALIDATOR"
      | "UPGRADE_INTERFACE_VERSION"
      | "addIssuer"
      | "analytics"
      | "approve"
      | "balanceOf"
      | "consumedUID"
      | "decay_T_seconds"
      | "decay_floorWad"
      | "eas"
      | "epochSeconds"
      | "getApproved"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole(bytes32,address)"
      | "hasRole(address,bytes32)"
      | "heartbeat"
      | "initialize"
      | "isApprovedForAll"
      | "isIssuer"
      | "issue"
      | "issuesInEpoch"
      | "locked"
      | "maxIssuesPerEpoch"
      | "maxRolesPerAddress"
      | "name"
      | "ownerOf"
      | "paused"
      | "proxiableUUID"
      | "removeIssuer"
      | "renounceRole"
      | "revoke"
      | "revokeRole"
      | "roleDefaultWeightWad"
      | "roleIndexPlus1"
      | "roleOf"
      | "roleTopicMask"
      | "roles"
      | "rolesList"
      | "rolesOf"
      | "safeExecutor"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "schemaId_IdentityRole"
      | "setApprovalForAll"
      | "setConfig"
      | "setRoleWeight"
      | "setTopicMask"
      | "supportsInterface"
      | "symbol"
      | "timelock"
      | "tokenURI"
      | "transferFrom"
      | "upgradeToAndCall"
      | "weightOf"
      | "weightOfForTopic"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ApprovalForAll"
      | "ConfigSet"
      | "Heartbeat"
      | "Initialized"
      | "IssuerAdded"
      | "IssuerRemoved"
      | "Locked"
      | "Paused"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleIssued"
      | "RoleRevoked(bytes32,address,address)"
      | "RoleRevoked(address,bytes32,uint256,string)"
      | "RoleWeightSet"
      | "TopicMaskSet"
      | "Transfer"
      | "Unpaused"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ISSUER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LAYER_GRANTS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LAYER_MASK_ALL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LAYER_PARAMS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LAYER_RWA_CARBON",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LAYER_RWA_ENERGY",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "LAYER_SBT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "LAYER_TOKEN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LAYER_TREASURY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_AUDITOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ROLE_CODE", values?: undefined): string;
  encodeFunctionData(functionFragment: "ROLE_GOV", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ROLE_ORACLE_OP",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_RWA_CURATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROLE_VALIDATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addIssuer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "analytics", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "consumedUID",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "decay_T_seconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decay_floorWad",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "eas", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "epochSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole(bytes32,address)",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole(address,bytes32)",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "heartbeat",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isIssuer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "issue",
    values: [AddressLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "issuesInEpoch",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "locked",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "maxIssuesPerEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "maxRolesPerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeIssuer",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revoke",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "roleDefaultWeightWad",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "roleIndexPlus1",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "roleOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "roleTopicMask",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "roles",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rolesList",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rolesOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "safeExecutor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "schemaId_IdentityRole",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setConfig",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoleWeight",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTopicMask",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "timelock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "weightOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "weightOfForTopic",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ISSUER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LAYER_GRANTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LAYER_MASK_ALL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LAYER_PARAMS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LAYER_RWA_CARBON",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LAYER_RWA_ENERGY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "LAYER_SBT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "LAYER_TOKEN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LAYER_TREASURY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_AUDITOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ROLE_CODE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ROLE_GOV", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_ORACLE_OP",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_RWA_CURATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROLE_VALIDATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addIssuer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "analytics", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "consumedUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decay_T_seconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decay_floorWad",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "eas", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "epochSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasRole(bytes32,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasRole(address,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "heartbeat", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isIssuer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "issue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "issuesInEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "locked", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maxIssuesPerEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxRolesPerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeIssuer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revoke", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "roleDefaultWeightWad",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "roleIndexPlus1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roleOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "roleTopicMask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roles", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rolesList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rolesOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "schemaId_IdentityRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRoleWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTopicMask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "timelock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weightOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "weightOfForTopic",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConfigSetEvent {
  export type InputTuple = [key: BytesLike, value: BigNumberish];
  export type OutputTuple = [key: string, value: bigint];
  export interface OutputObject {
    key: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HeartbeatEvent {
  export type InputTuple = [
    who: AddressLike,
    role: BytesLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [who: string, role: string, timestamp: bigint];
  export interface OutputObject {
    who: string;
    role: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IssuerAddedEvent {
  export type InputTuple = [issuer: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [issuer: string, timestamp: bigint];
  export interface OutputObject {
    issuer: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IssuerRemovedEvent {
  export type InputTuple = [issuer: AddressLike, timestamp: BigNumberish];
  export type OutputTuple = [issuer: string, timestamp: bigint];
  export interface OutputObject {
    issuer: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LockedEvent {
  export type InputTuple = [tokenId: BigNumberish];
  export type OutputTuple = [tokenId: bigint];
  export interface OutputObject {
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleIssuedEvent {
  export type InputTuple = [
    to: AddressLike,
    role: BytesLike,
    tokenId: BigNumberish,
    expiresAt: BigNumberish,
    uri: string,
    evidenceHash: BytesLike
  ];
  export type OutputTuple = [
    to: string,
    role: string,
    tokenId: bigint,
    expiresAt: bigint,
    uri: string,
    evidenceHash: string
  ];
  export interface OutputObject {
    to: string;
    role: string;
    tokenId: bigint;
    expiresAt: bigint;
    uri: string;
    evidenceHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevoked_bytes32_address_address_Event {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevoked_address_bytes32_uint256_string_Event {
  export type InputTuple = [
    from: AddressLike,
    role: BytesLike,
    tokenId: BigNumberish,
    reason: string
  ];
  export type OutputTuple = [
    from: string,
    role: string,
    tokenId: bigint,
    reason: string
  ];
  export interface OutputObject {
    from: string;
    role: string;
    tokenId: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleWeightSetEvent {
  export type InputTuple = [role: BytesLike, weightWad: BigNumberish];
  export type OutputTuple = [role: string, weightWad: bigint];
  export interface OutputObject {
    role: string;
    weightWad: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TopicMaskSetEvent {
  export type InputTuple = [role: BytesLike, topicMask: BigNumberish];
  export type OutputTuple = [role: string, topicMask: bigint];
  export interface OutputObject {
    role: string;
    topicMask: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ARC_IdentitySBT extends BaseContract {
  connect(runner?: ContractRunner | null): ARC_IdentitySBT;
  waitForDeployment(): Promise<this>;

  interface: ARC_IdentitySBTInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  ISSUER_ROLE: TypedContractMethod<[], [string], "view">;

  LAYER_GRANTS: TypedContractMethod<[], [bigint], "view">;

  LAYER_MASK_ALL: TypedContractMethod<[], [bigint], "view">;

  LAYER_PARAMS: TypedContractMethod<[], [bigint], "view">;

  LAYER_RWA_CARBON: TypedContractMethod<[], [bigint], "view">;

  LAYER_RWA_ENERGY: TypedContractMethod<[], [bigint], "view">;

  LAYER_SBT: TypedContractMethod<[], [bigint], "view">;

  LAYER_TOKEN: TypedContractMethod<[], [bigint], "view">;

  LAYER_TREASURY: TypedContractMethod<[], [bigint], "view">;

  ROLE_AUDITOR: TypedContractMethod<[], [string], "view">;

  ROLE_CODE: TypedContractMethod<[], [string], "view">;

  ROLE_GOV: TypedContractMethod<[], [string], "view">;

  ROLE_ORACLE_OP: TypedContractMethod<[], [string], "view">;

  ROLE_RWA_CURATOR: TypedContractMethod<[], [string], "view">;

  ROLE_VALIDATOR: TypedContractMethod<[], [string], "view">;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  addIssuer: TypedContractMethod<[issuer: AddressLike], [void], "nonpayable">;

  analytics: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        totalIssuances: bigint;
        totalRevocations: bigint;
        activeRoles: bigint;
        totalWeight: bigint;
        lastUpdate: bigint;
      }
    ],
    "view"
  >;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "view"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  consumedUID: TypedContractMethod<[arg0: BytesLike], [boolean], "view">;

  decay_T_seconds: TypedContractMethod<[], [bigint], "view">;

  decay_floorWad: TypedContractMethod<[], [bigint], "view">;

  eas: TypedContractMethod<[], [string], "view">;

  epochSeconds: TypedContractMethod<[], [bigint], "view">;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  "hasRole(bytes32,address)": TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  "hasRole(address,bytes32)": TypedContractMethod<
    [who: AddressLike, role_: BytesLike],
    [boolean],
    "view"
  >;

  heartbeat: TypedContractMethod<[role: BytesLike], [void], "nonpayable">;

  initialize: TypedContractMethod<
    [
      _timelock: AddressLike,
      _safeExecutor: AddressLike,
      _eas: AddressLike,
      _schemaId: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  isIssuer: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  issue: TypedContractMethod<
    [to: AddressLike, role: BytesLike, uid: BytesLike],
    [void],
    "nonpayable"
  >;

  issuesInEpoch: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  locked: TypedContractMethod<[tokenId: BigNumberish], [boolean], "view">;

  maxIssuesPerEpoch: TypedContractMethod<[], [bigint], "view">;

  maxRolesPerAddress: TypedContractMethod<[], [bigint], "view">;

  name: TypedContractMethod<[], [string], "view">;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  paused: TypedContractMethod<[], [boolean], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  removeIssuer: TypedContractMethod<
    [issuer: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revoke: TypedContractMethod<
    [tokenId: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  roleDefaultWeightWad: TypedContractMethod<
    [arg0: BytesLike],
    [bigint],
    "view"
  >;

  roleIndexPlus1: TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike],
    [bigint],
    "view"
  >;

  roleOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  roleTopicMask: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  roles: TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike],
    [
      [bigint, bigint, bigint, boolean, string, string, bigint] & {
        weightWad: bigint;
        expiresAt: bigint;
        lastBeat: bigint;
        active: boolean;
        uri: string;
        evidenceHash: string;
        version: bigint;
      }
    ],
    "view"
  >;

  rolesList: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;

  rolesOf: TypedContractMethod<[who: AddressLike], [string[]], "view">;

  safeExecutor: TypedContractMethod<[], [string], "view">;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  schemaId_IdentityRole: TypedContractMethod<[], [string], "view">;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "view"
  >;

  setConfig: TypedContractMethod<
    [key: BytesLike, value: BigNumberish],
    [void],
    "nonpayable"
  >;

  setRoleWeight: TypedContractMethod<
    [role: BytesLike, weightWad: BigNumberish],
    [void],
    "nonpayable"
  >;

  setTopicMask: TypedContractMethod<
    [role: BytesLike, topicMask: BigNumberish],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  timelock: TypedContractMethod<[], [string], "view">;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  weightOf: TypedContractMethod<[who: AddressLike], [bigint], "view">;

  weightOfForTopic: TypedContractMethod<
    [who: AddressLike, topicMask: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ISSUER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "LAYER_GRANTS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "LAYER_MASK_ALL"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "LAYER_PARAMS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "LAYER_RWA_CARBON"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "LAYER_RWA_ENERGY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "LAYER_SBT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "LAYER_TOKEN"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "LAYER_TREASURY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "ROLE_AUDITOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ROLE_CODE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ROLE_GOV"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ROLE_ORACLE_OP"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ROLE_RWA_CURATOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ROLE_VALIDATOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addIssuer"
  ): TypedContractMethod<[issuer: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "analytics"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint] & {
        totalIssuances: bigint;
        totalRevocations: bigint;
        activeRoles: bigint;
        totalWeight: bigint;
        lastUpdate: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "consumedUID"
  ): TypedContractMethod<[arg0: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "decay_T_seconds"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decay_floorWad"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "eas"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "epochSeconds"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole(bytes32,address)"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasRole(address,bytes32)"
  ): TypedContractMethod<
    [who: AddressLike, role_: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "heartbeat"
  ): TypedContractMethod<[role: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _timelock: AddressLike,
      _safeExecutor: AddressLike,
      _eas: AddressLike,
      _schemaId: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isIssuer"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "issue"
  ): TypedContractMethod<
    [to: AddressLike, role: BytesLike, uid: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "issuesInEpoch"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "locked"
  ): TypedContractMethod<[tokenId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "maxIssuesPerEpoch"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "maxRolesPerAddress"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeIssuer"
  ): TypedContractMethod<[issuer: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revoke"
  ): TypedContractMethod<
    [tokenId: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "roleDefaultWeightWad"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "roleIndexPlus1"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "roleOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "roleTopicMask"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "roles"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BytesLike],
    [
      [bigint, bigint, bigint, boolean, string, string, bigint] & {
        weightWad: bigint;
        expiresAt: bigint;
        lastBeat: bigint;
        active: boolean;
        uri: string;
        evidenceHash: string;
        version: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "rolesList"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "rolesOf"
  ): TypedContractMethod<[who: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "safeExecutor"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "schemaId_IdentityRole"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "setConfig"
  ): TypedContractMethod<
    [key: BytesLike, value: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRoleWeight"
  ): TypedContractMethod<
    [role: BytesLike, weightWad: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTopicMask"
  ): TypedContractMethod<
    [role: BytesLike, topicMask: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "timelock"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "weightOf"
  ): TypedContractMethod<[who: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "weightOfForTopic"
  ): TypedContractMethod<
    [who: AddressLike, topicMask: BigNumberish],
    [bigint],
    "view"
  >;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "ConfigSet"
  ): TypedContractEvent<
    ConfigSetEvent.InputTuple,
    ConfigSetEvent.OutputTuple,
    ConfigSetEvent.OutputObject
  >;
  getEvent(
    key: "Heartbeat"
  ): TypedContractEvent<
    HeartbeatEvent.InputTuple,
    HeartbeatEvent.OutputTuple,
    HeartbeatEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "IssuerAdded"
  ): TypedContractEvent<
    IssuerAddedEvent.InputTuple,
    IssuerAddedEvent.OutputTuple,
    IssuerAddedEvent.OutputObject
  >;
  getEvent(
    key: "IssuerRemoved"
  ): TypedContractEvent<
    IssuerRemovedEvent.InputTuple,
    IssuerRemovedEvent.OutputTuple,
    IssuerRemovedEvent.OutputObject
  >;
  getEvent(
    key: "Locked"
  ): TypedContractEvent<
    LockedEvent.InputTuple,
    LockedEvent.OutputTuple,
    LockedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleIssued"
  ): TypedContractEvent<
    RoleIssuedEvent.InputTuple,
    RoleIssuedEvent.OutputTuple,
    RoleIssuedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked(bytes32,address,address)"
  ): TypedContractEvent<
    RoleRevoked_bytes32_address_address_Event.InputTuple,
    RoleRevoked_bytes32_address_address_Event.OutputTuple,
    RoleRevoked_bytes32_address_address_Event.OutputObject
  >;
  getEvent(
    key: "RoleRevoked(address,bytes32,uint256,string)"
  ): TypedContractEvent<
    RoleRevoked_address_bytes32_uint256_string_Event.InputTuple,
    RoleRevoked_address_bytes32_uint256_string_Event.OutputTuple,
    RoleRevoked_address_bytes32_uint256_string_Event.OutputObject
  >;
  getEvent(
    key: "RoleWeightSet"
  ): TypedContractEvent<
    RoleWeightSetEvent.InputTuple,
    RoleWeightSetEvent.OutputTuple,
    RoleWeightSetEvent.OutputObject
  >;
  getEvent(
    key: "TopicMaskSet"
  ): TypedContractEvent<
    TopicMaskSetEvent.InputTuple,
    TopicMaskSetEvent.OutputTuple,
    TopicMaskSetEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "ConfigSet(bytes32,uint256)": TypedContractEvent<
      ConfigSetEvent.InputTuple,
      ConfigSetEvent.OutputTuple,
      ConfigSetEvent.OutputObject
    >;
    ConfigSet: TypedContractEvent<
      ConfigSetEvent.InputTuple,
      ConfigSetEvent.OutputTuple,
      ConfigSetEvent.OutputObject
    >;

    "Heartbeat(address,bytes32,uint256)": TypedContractEvent<
      HeartbeatEvent.InputTuple,
      HeartbeatEvent.OutputTuple,
      HeartbeatEvent.OutputObject
    >;
    Heartbeat: TypedContractEvent<
      HeartbeatEvent.InputTuple,
      HeartbeatEvent.OutputTuple,
      HeartbeatEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "IssuerAdded(address,uint256)": TypedContractEvent<
      IssuerAddedEvent.InputTuple,
      IssuerAddedEvent.OutputTuple,
      IssuerAddedEvent.OutputObject
    >;
    IssuerAdded: TypedContractEvent<
      IssuerAddedEvent.InputTuple,
      IssuerAddedEvent.OutputTuple,
      IssuerAddedEvent.OutputObject
    >;

    "IssuerRemoved(address,uint256)": TypedContractEvent<
      IssuerRemovedEvent.InputTuple,
      IssuerRemovedEvent.OutputTuple,
      IssuerRemovedEvent.OutputObject
    >;
    IssuerRemoved: TypedContractEvent<
      IssuerRemovedEvent.InputTuple,
      IssuerRemovedEvent.OutputTuple,
      IssuerRemovedEvent.OutputObject
    >;

    "Locked(uint256)": TypedContractEvent<
      LockedEvent.InputTuple,
      LockedEvent.OutputTuple,
      LockedEvent.OutputObject
    >;
    Locked: TypedContractEvent<
      LockedEvent.InputTuple,
      LockedEvent.OutputTuple,
      LockedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleIssued(address,bytes32,uint256,uint256,string,bytes32)": TypedContractEvent<
      RoleIssuedEvent.InputTuple,
      RoleIssuedEvent.OutputTuple,
      RoleIssuedEvent.OutputObject
    >;
    RoleIssued: TypedContractEvent<
      RoleIssuedEvent.InputTuple,
      RoleIssuedEvent.OutputTuple,
      RoleIssuedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevoked_bytes32_address_address_Event.InputTuple,
      RoleRevoked_bytes32_address_address_Event.OutputTuple,
      RoleRevoked_bytes32_address_address_Event.OutputObject
    >;
    "RoleRevoked(address,bytes32,uint256,string)": TypedContractEvent<
      RoleRevoked_address_bytes32_uint256_string_Event.InputTuple,
      RoleRevoked_address_bytes32_uint256_string_Event.OutputTuple,
      RoleRevoked_address_bytes32_uint256_string_Event.OutputObject
    >;

    "RoleWeightSet(bytes32,uint256)": TypedContractEvent<
      RoleWeightSetEvent.InputTuple,
      RoleWeightSetEvent.OutputTuple,
      RoleWeightSetEvent.OutputObject
    >;
    RoleWeightSet: TypedContractEvent<
      RoleWeightSetEvent.InputTuple,
      RoleWeightSetEvent.OutputTuple,
      RoleWeightSetEvent.OutputObject
    >;

    "TopicMaskSet(bytes32,uint256)": TypedContractEvent<
      TopicMaskSetEvent.InputTuple,
      TopicMaskSetEvent.OutputTuple,
      TopicMaskSetEvent.OutputObject
    >;
    TopicMaskSet: TypedContractEvent<
      TopicMaskSetEvent.InputTuple,
      TopicMaskSetEvent.OutputTuple,
      TopicMaskSetEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
