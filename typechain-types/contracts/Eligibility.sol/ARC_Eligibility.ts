/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface ARC_EligibilityInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "CONFIG_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "TOPIC_CARBON"
      | "TOPIC_ENERGY"
      | "TOPIC_GRANTS"
      | "TOPIC_PARAMS"
      | "TOPIC_TREASURY"
      | "UPGRADE_INTERFACE_VERSION"
      | "analytics"
      | "eligibilityComponents"
      | "getEligibilityComponents"
      | "getRoleAdmin"
      | "getTopicConfig"
      | "grantRole"
      | "hasQuorum"
      | "hasRole"
      | "hasSupermajority"
      | "identitySBT"
      | "initialize"
      | "isEligible"
      | "proxiableUUID"
      | "renounceRole"
      | "reputationWeightCap"
      | "revokeRole"
      | "rwaWeightCap"
      | "sbtWeightCap"
      | "setWeightCaps"
      | "supportsInterface"
      | "tokenWeightCap"
      | "topicConfigs"
      | "totalWeight"
      | "updateTopicConfig"
      | "upgradeToAndCall"
      | "weightOf"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Initialized"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "TopicConfigUpdated"
      | "Upgraded"
      | "WeightCapsSet"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CONFIG_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOPIC_CARBON",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOPIC_ENERGY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOPIC_GRANTS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOPIC_PARAMS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOPIC_TREASURY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "analytics", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "eligibilityComponents",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEligibilityComponents",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTopicConfig",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasQuorum",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasSupermajority",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "identitySBT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isEligible",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "reputationWeightCap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rwaWeightCap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sbtWeightCap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setWeightCaps",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenWeightCap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "topicConfigs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalWeight",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTopicConfig",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "weightOf",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "CONFIG_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOPIC_CARBON",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOPIC_ENERGY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOPIC_GRANTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOPIC_PARAMS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOPIC_TREASURY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "analytics", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "eligibilityComponents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEligibilityComponents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTopicConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasQuorum", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasSupermajority",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "identitySBT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isEligible", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "reputationWeightCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rwaWeightCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sbtWeightCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWeightCaps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenWeightCap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "topicConfigs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTopicConfig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weightOf", data: BytesLike): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TopicConfigUpdatedEvent {
  export type InputTuple = [
    topicId: BigNumberish,
    quorumWad: BigNumberish,
    supermajorityWad: BigNumberish,
    votingDays: BigNumberish,
    timelockDays: BigNumberish
  ];
  export type OutputTuple = [
    topicId: bigint,
    quorumWad: bigint,
    supermajorityWad: bigint,
    votingDays: bigint,
    timelockDays: bigint
  ];
  export interface OutputObject {
    topicId: bigint;
    quorumWad: bigint;
    supermajorityWad: bigint;
    votingDays: bigint;
    timelockDays: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WeightCapsSetEvent {
  export type InputTuple = [
    topicMask: BigNumberish,
    sbtCap: BigNumberish,
    tokenCap: BigNumberish,
    rwaCap: BigNumberish,
    reputationCap: BigNumberish
  ];
  export type OutputTuple = [
    topicMask: bigint,
    sbtCap: bigint,
    tokenCap: bigint,
    rwaCap: bigint,
    reputationCap: bigint
  ];
  export interface OutputObject {
    topicMask: bigint;
    sbtCap: bigint;
    tokenCap: bigint;
    rwaCap: bigint;
    reputationCap: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ARC_Eligibility extends BaseContract {
  connect(runner?: ContractRunner | null): ARC_Eligibility;
  waitForDeployment(): Promise<this>;

  interface: ARC_EligibilityInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  CONFIG_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  TOPIC_CARBON: TypedContractMethod<[], [bigint], "view">;

  TOPIC_ENERGY: TypedContractMethod<[], [bigint], "view">;

  TOPIC_GRANTS: TypedContractMethod<[], [bigint], "view">;

  TOPIC_PARAMS: TypedContractMethod<[], [bigint], "view">;

  TOPIC_TREASURY: TypedContractMethod<[], [bigint], "view">;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  analytics: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, string, bigint] & {
        totalEligibilityChecks: bigint;
        averageWeight: bigint;
        highestWeight: bigint;
        highestWeightHolder: string;
        lastUpdate: bigint;
      }
    ],
    "view"
  >;

  eligibilityComponents: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        sbtWeight: bigint;
        tokenWeight: bigint;
        rwaWeight: bigint;
        reputationWeight: bigint;
      }
    ],
    "view"
  >;

  getEligibilityComponents: TypedContractMethod<
    [who: AddressLike, topicMask: BigNumberish],
    [[bigint[], bigint] & { components: bigint[]; total: bigint }],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getTopicConfig: TypedContractMethod<
    [topicId: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        quorumWad: bigint;
        supermajorityWad: bigint;
        votingDays: bigint;
        timelockDays: bigint;
      }
    ],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasQuorum: TypedContractMethod<
    [topicMask: BigNumberish, votes: BigNumberish],
    [boolean],
    "view"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  hasSupermajority: TypedContractMethod<
    [topicMask: BigNumberish, votes: BigNumberish],
    [boolean],
    "view"
  >;

  identitySBT: TypedContractMethod<[], [string], "view">;

  initialize: TypedContractMethod<
    [_identitySBT: AddressLike],
    [void],
    "nonpayable"
  >;

  isEligible: TypedContractMethod<
    [who: AddressLike, topicMask: BigNumberish],
    [boolean],
    "view"
  >;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  reputationWeightCap: TypedContractMethod<
    [arg0: BigNumberish],
    [bigint],
    "view"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  rwaWeightCap: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  sbtWeightCap: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  setWeightCaps: TypedContractMethod<
    [
      topicMask: BigNumberish,
      _sbtCap: BigNumberish,
      _tokenCap: BigNumberish,
      _rwaCap: BigNumberish,
      _reputationCap: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  tokenWeightCap: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  topicConfigs: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, boolean] & {
        quorumWad: bigint;
        supermajorityWad: bigint;
        votingDays: bigint;
        timelockDays: bigint;
        active: boolean;
      }
    ],
    "view"
  >;

  totalWeight: TypedContractMethod<[topicMask: BigNumberish], [bigint], "view">;

  updateTopicConfig: TypedContractMethod<
    [
      topicId: BigNumberish,
      quorumWad: BigNumberish,
      supermajorityWad: BigNumberish,
      votingDays: BigNumberish,
      timelockDays: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  weightOf: TypedContractMethod<
    [who: AddressLike, topicMask: BigNumberish],
    [bigint],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "CONFIG_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "TOPIC_CARBON"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TOPIC_ENERGY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TOPIC_GRANTS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TOPIC_PARAMS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TOPIC_TREASURY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "analytics"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, string, bigint] & {
        totalEligibilityChecks: bigint;
        averageWeight: bigint;
        highestWeight: bigint;
        highestWeightHolder: string;
        lastUpdate: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "eligibilityComponents"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint] & {
        sbtWeight: bigint;
        tokenWeight: bigint;
        rwaWeight: bigint;
        reputationWeight: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEligibilityComponents"
  ): TypedContractMethod<
    [who: AddressLike, topicMask: BigNumberish],
    [[bigint[], bigint] & { components: bigint[]; total: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getTopicConfig"
  ): TypedContractMethod<
    [topicId: BigNumberish],
    [
      [bigint, bigint, bigint, bigint] & {
        quorumWad: bigint;
        supermajorityWad: bigint;
        votingDays: bigint;
        timelockDays: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasQuorum"
  ): TypedContractMethod<
    [topicMask: BigNumberish, votes: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasSupermajority"
  ): TypedContractMethod<
    [topicMask: BigNumberish, votes: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "identitySBT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[_identitySBT: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isEligible"
  ): TypedContractMethod<
    [who: AddressLike, topicMask: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "reputationWeightCap"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rwaWeightCap"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "sbtWeightCap"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "setWeightCaps"
  ): TypedContractMethod<
    [
      topicMask: BigNumberish,
      _sbtCap: BigNumberish,
      _tokenCap: BigNumberish,
      _rwaCap: BigNumberish,
      _reputationCap: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "tokenWeightCap"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "topicConfigs"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, boolean] & {
        quorumWad: bigint;
        supermajorityWad: bigint;
        votingDays: bigint;
        timelockDays: bigint;
        active: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "totalWeight"
  ): TypedContractMethod<[topicMask: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "updateTopicConfig"
  ): TypedContractMethod<
    [
      topicId: BigNumberish,
      quorumWad: BigNumberish,
      supermajorityWad: BigNumberish,
      votingDays: BigNumberish,
      timelockDays: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "weightOf"
  ): TypedContractMethod<
    [who: AddressLike, topicMask: BigNumberish],
    [bigint],
    "view"
  >;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "TopicConfigUpdated"
  ): TypedContractEvent<
    TopicConfigUpdatedEvent.InputTuple,
    TopicConfigUpdatedEvent.OutputTuple,
    TopicConfigUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;
  getEvent(
    key: "WeightCapsSet"
  ): TypedContractEvent<
    WeightCapsSetEvent.InputTuple,
    WeightCapsSetEvent.OutputTuple,
    WeightCapsSetEvent.OutputObject
  >;

  filters: {
    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "TopicConfigUpdated(uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      TopicConfigUpdatedEvent.InputTuple,
      TopicConfigUpdatedEvent.OutputTuple,
      TopicConfigUpdatedEvent.OutputObject
    >;
    TopicConfigUpdated: TypedContractEvent<
      TopicConfigUpdatedEvent.InputTuple,
      TopicConfigUpdatedEvent.OutputTuple,
      TopicConfigUpdatedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;

    "WeightCapsSet(uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      WeightCapsSetEvent.InputTuple,
      WeightCapsSetEvent.OutputTuple,
      WeightCapsSetEvent.OutputObject
    >;
    WeightCapsSet: TypedContractEvent<
      WeightCapsSetEvent.InputTuple,
      WeightCapsSetEvent.OutputTuple,
      WeightCapsSetEvent.OutputObject
    >;
  };
}
